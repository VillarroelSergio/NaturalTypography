{
.appVersion = "3260";
.storedFileType = "public.truetype-ttf-font";
.formatVersion = 3;
customParameters = (
{
name = panose;
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
29
);
},
{
name = glyphOrder;
value = (
.notdef,
.null,
CR,
space,
A,
Aacute,
Acircumflex,
Adieresis,
Agrave,
Amacron,
Aring,
Atilde,
AE,
B,
C,
Ccedilla,
D,
Eth,
E,
Eacute,
Ecircumflex,
Edieresis,
Egrave,
F,
G,
H,
I,
Iacute,
Icircumflex,
Idieresis,
Igrave,
J,
K,
L,
M,
N,
Ntilde,
O,
Oacute,
Ocircumflex,
Odieresis,
Ograve,
Oslash,
Otilde,
P,
Thorn,
Q,
R,
S,
uni1E9E,
T,
U,
Uacute,
Ucircumflex,
Udieresis,
Ugrave,
V,
W,
X,
Y,
Yacute,
Z,
A.ss01,
Aacute.ss01,
B.ss01,
C.ss01,
D.ss01,
E.ss01,
F.ss01,
G.ss01,
H.ss01,
I.ss01,
J.ss01,
K.ss01,
L.ss01,
M.ss01,
N.ss01,
Ntilde.ss01,
O.ss01,
P.ss01,
Q.ss01,
R.ss01,
S.ss01,
T.ss01,
U.ss01,
V.ss01,
W.ss01,
X.ss01,
Y.ss01,
Z.ss01,
A.ss02,
Aacute.ss02,
B.ss02,
C.ss02,
D.ss02,
E.ss02,
F.ss02,
G.ss02,
H.ss02,
I.ss02,
J.ss02,
K.ss02,
L.ss02,
M.ss02,
N.ss02,
Ntilde.ss02,
O.ss02,
P.ss02,
Q.ss02,
R.ss02,
S.ss02,
T.ss02,
U.ss02,
V.ss02,
W.ss02,
X.ss02,
Y.ss02,
Z.ss02,
a,
aacute,
acircumflex,
adieresis,
agrave,
amacron,
aring,
atilde,
ae,
b,
c,
ccedilla,
d,
eth,
e,
eacute,
ecircumflex,
edieresis,
egrave,
f,
g,
h,
i,
iacute,
icircumflex,
idieresis,
i.loclTRK,
igrave,
j,
k,
l,
m,
n,
ntilde,
o,
oacute,
ocircumflex,
odieresis,
ograve,
oslash,
otilde,
p,
thorn,
q,
r,
s,
germandbls,
t,
u,
uacute,
ucircumflex,
udieresis,
ugrave,
v,
w,
x,
y,
yacute,
ydieresis,
z,
a.ss01,
aacute.ss01,
acircumflex.ss01,
b.ss01,
c.ss01,
d.ss01,
e.ss01,
f.ss01,
g.ss01,
h.ss01,
i.ss01,
j.ss01,
k.ss01,
l.ss01,
m.ss01,
n.ss01,
ntilde.ss01,
o.ss01,
p.ss01,
q.ss01,
r.ss01,
s.ss01,
t.ss01,
u.ss01,
v.ss01,
w.ss01,
x.ss01,
y.ss01,
z.ss01,
a.ss02,
aacute.ss02,
acircumflex.ss02,
b.ss02,
c.ss02,
d.ss02,
e.ss02,
f.ss02,
g.ss02,
h.ss02,
i.ss02,
j.ss02,
k.ss02,
l.ss02,
m.ss02,
n.ss02,
ntilde.ss02,
o.ss02,
p.ss02,
q.ss02,
r.ss02,
s.ss02,
t.ss02,
u.ss02,
v.ss02,
w.ss02,
x.ss02,
y.ss02,
z.ss02,
i.sc,
i.sc.loclTRK,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
zero.ss01,
one.ss01,
two.ss01,
three.ss01,
four.ss01,
five.ss01,
six.ss01,
seven.ss01,
eight.ss01,
nine.ss01,
zero.ss02,
one.ss02,
two.ss02,
three.ss02,
four.ss02,
five.ss02,
six.ss02,
seven.ss02,
eight.ss02,
nine.ss02,
DEL,
period,
comma,
colon,
semicolon,
exclam,
exclamdown,
question,
questiondown,
asterisk,
numbersign,
slash,
backslash,
hyphen,
underscore,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
quotedbl,
quotesingle,
at,
ampersand,
bar,
dollar,
plus,
multiply,
divide,
equal,
greater,
less,
asciitilde,
percent
);
}
);
date = "2024-11-02 20:18:33 +0000";
familyName = Natural;
features = (
{
automatic = 1;
code = "";
tag = aalt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_1 {
	sub A by A.ss01;
	sub Aacute by Aacute.ss01;
	sub B by B.ss01;
	sub C by C.ss01;
	sub D by D.ss01;
	sub E by E.ss01;
	sub F by F.ss01;
	sub G by G.ss01;
	sub H by H.ss01;
	sub I by I.ss01;
	sub J by J.ss01;
	sub K by K.ss01;
	sub L by L.ss01;
	sub M by M.ss01;
	sub N by N.ss01;
	sub Ntilde by Ntilde.ss01;
	sub O by O.ss01;
	sub P by P.ss01;
	sub Q by Q.ss01;
	sub R by R.ss01;
	sub S by S.ss01;
	sub T by T.ss01;
	sub U by U.ss01;
	sub V by V.ss01;
	sub W by W.ss01;
	sub X by X.ss01;
	sub Y by Y.ss01;
	sub Z by Z.ss01;
	sub a by a.ss01;
	sub aacute by aacute.ss01;
	sub b by b.ss01;
	sub c by c.ss01;
	sub d by d.ss01;
	sub e by e.ss01;
	sub f by f.ss01;
	sub g by g.ss01;
	sub h by h.ss01;
	sub i by i.ss01;
	sub j by j.ss01;
	sub k by k.ss01;
	sub l by l.ss01;
	sub m by m.ss01;
	sub n by n.ss01;
	sub ntilde by ntilde.ss01;
	sub o by o.ss01;
	sub p by p.ss01;
	sub q by q.ss01;
	sub r by r.ss01;
	sub s by s.ss01;
	sub t by t.ss01;
	sub u by u.ss01;
	sub v by v.ss01;
	sub w by w.ss01;
	sub x by x.ss01;
	sub y by y.ss01;
	sub z by z.ss01;
	sub zero by zero.ss01;
	sub one by one.ss01;
	sub two by two.ss01;
	sub three by three.ss01;
	sub four by four.ss01;
	sub five by five.ss01;
	sub six by six.ss01;
	sub seven by seven.ss01;
	sub eight by eight.ss01;
	sub nine by nine.ss01;
} SUB_1;
script latn;
language dflt;
lookup SUB_1;
language AZE;
lookup SUB_1;
language CRT;
lookup SUB_1;
language KAZ;
lookup SUB_1;
language TAT;
lookup SUB_1;
language TRK;
lookup SUB_1;
";
labels = (
{
language = dflt;
value = "";
}
);
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_2 {
	sub A by A.ss02;
	sub Aacute by Aacute.ss02;
	sub B by B.ss02;
	sub C by C.ss02;
	sub D by D.ss02;
	sub E by E.ss02;
	sub F by F.ss02;
	sub G by G.ss02;
	sub H by H.ss02;
	sub I by I.ss02;
	sub J by J.ss02;
	sub K by K.ss02;
	sub L by L.ss02;
	sub M by M.ss02;
	sub N by N.ss02;
	sub Ntilde by Ntilde.ss02;
	sub O by O.ss02;
	sub P by P.ss02;
	sub Q by Q.ss02;
	sub R by R.ss02;
	sub S by S.ss02;
	sub T by T.ss02;
	sub U by U.ss02;
	sub V by V.ss02;
	sub W by W.ss02;
	sub X by X.ss02;
	sub Y by Y.ss02;
	sub Z by Z.ss02;
	sub a by a.ss02;
	sub aacute by aacute.ss02;
	sub b by b.ss02;
	sub c by c.ss02;
	sub d by d.ss02;
	sub e by e.ss02;
	sub f by f.ss02;
	sub g by g.ss02;
	sub h by h.ss02;
	sub i by i.ss02;
	sub j by j.ss02;
	sub k by k.ss02;
	sub l by l.ss02;
	sub m by m.ss02;
	sub n by n.ss02;
	sub ntilde by ntilde.ss02;
	sub o by o.ss02;
	sub p by p.ss02;
	sub q by q.ss02;
	sub r by r.ss02;
	sub s by s.ss02;
	sub t by t.ss02;
	sub u by u.ss02;
	sub v by v.ss02;
	sub w by w.ss02;
	sub x by x.ss02;
	sub y by y.ss02;
	sub z by z.ss02;
	sub zero by zero.ss02;
	sub one by one.ss02;
	sub two by two.ss02;
	sub three by three.ss02;
	sub four by four.ss02;
	sub five by five.ss02;
	sub six by six.ss02;
	sub seven by seven.ss02;
	sub eight by eight.ss02;
	sub nine by nine.ss02;
} SUB_2;
script latn;
language dflt;
lookup SUB_2;
language AZE;
lookup SUB_2;
language CRT;
lookup SUB_2;
language KAZ;
lookup SUB_2;
language TAT;
lookup SUB_2;
language TRK;
lookup SUB_2;
";
tag = ss02;
},
{
code = "script latn;
language AZE;
lookup SUB_3 {
	sub i by i.loclTRK;
} SUB_3;
language CRT;
lookup SUB_3;
language KAZ;
lookup SUB_3;
language TAT;
lookup SUB_3;
language TRK;
lookup SUB_3;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	sub I by i.sc;
} SUB_4;
script latn;
language dflt;
lookup SUB_4;
language AZE;
lookup SUB_4;
language CRT;
lookup SUB_4;
language KAZ;
lookup SUB_4;
language TAT;
lookup SUB_4;
language TRK;
lookup SUB_4;
";
tag = c2sc;
},
{
code = "script DFLT;
language dflt;
lookup SUB_5 {
	sub i by i.sc;
	sub i.loclTRK by i.sc.loclTRK;
} SUB_5;
script latn;
language dflt;
lookup SUB_5;
language AZE;
lookup SUB_5;
language CRT;
lookup SUB_5;
language KAZ;
lookup SUB_5;
language TAT;
lookup SUB_5;
language TRK;
lookup SUB_5;
";
tag = smcp;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 800;
},
{
name = typoDescender;
value = -200;
},
{
name = typoLineGap;
value = 200;
},
{
name = winAscent;
value = 1000;
},
{
name = winDescent;
value = 396;
},
{
name = hheaAscender;
value = 1000;
},
{
name = hheaDescender;
value = -200;
},
{
name = strikeoutPosition;
value = 0;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
35 0 2 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
23 9 15 2 2 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
32 6 18 0 2 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 9
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 4 values pushed */
1536 1024 2 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 11
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 4 values pushed */
128 64 2 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
26 6 17 1 2 14
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    24,
    24,
    24,
    805,
    805,
    82,
    82,
    95,
    88,
    56,
    56,
    68,
    801,
    \"-17\",
    733,
    483,
    \"-3\",
    \"-321\",
    801,
    \"-17\",
    733,
    483,
    \"-3\",
    \"-321\"
)";
}
);
id = m01;
metricValues = (
{
pos = 800;
},
{
},
{
},
{
},
{
pos = -200;
},
{
}
);
name = Regular;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
width = 600;
}
);
note = .notdef;
},
{
glyphname = .null;
layers = (
{
layerId = m01;
width = 600;
}
);
note = .null;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 600;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
layers = (
{
.lastUpdate = 753955765.418;
layerId = m01;
width = 500;
}
);
note = space;
unicode = (32,160);
},
{
glyphname = A;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(421,-43,o),
(407,33,o),
(400,92,qs),
(390,165,o),
(388,175,q),
(350,168,o),
(285,145,o),
(231,123,qs),
(189,105,o),
(167,97,q),
(167,87,o),
(154,14,o),
(151,1,q),
(151,-5,o),
(121,-40,o),
(86,-69,o),
(78,-69,qs),
(72,-69,o),
(72,-61,q),
(58,-54,o),
(58,-25,qs),
(58,-6,o),
(68,42,qs),
(72,62,o),
(72,64,q),
(64,57,o),
(41,40,o),
(41,49,q),
(34,49,o),
(34,53,qs),
(34,56,o),
(40,63,o),
(41,64,qs),
(55,81,o),
(88,112,q),
(137,352,o),
(230,586,q),
(239,614,ls),
(252,656,o),
(276,711,o),
(293,728,qs),
(302,736,o),
(316,743,qs),
(332,751,o),
(340,759,q),
(368,768,o),
(438,501,o),
(476,319,qs),
(483,285,l),
(498,285,o),
(514,291,o),
(514,302,q),
(535,302,o),
(555,280,o),
(555,265,qs),
(555,249,o),
(545,239,qs),
(536,228,o),
(514,222,o),
(498,222,q),
(509,212,o),
(531,113,o),
(531,97,q),
(533,89,o),
(545,43,o),
(545,34,qs),
(545,26,o),
(506,-36,o),
(459,-87,o),
(446,-87,qs),
(438,-87,o),
(435,-78,qs)
);
},
{
closed = 1;
nodes = (
(266,519,o),
(209,295,o),
(183,144,q),
(373,239,l),
(351,322,o),
(326,484,o),
(309,617,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
74 1 1 3 75 66 61 54 46 43 8 7 0 1 2 76 78 1 2 74 0 2 3 2 133 0 3 1 3 133 0 1 0 1 133 0 0 0 118 18 22 25 32 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = A;
unicode = 65;
},
{
glyphname = Aacute;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(421,-43,o),
(407,33,o),
(400,92,qs),
(390,165,o),
(388,175,q),
(350,168,o),
(285,145,o),
(231,123,qs),
(189,105,o),
(167,97,q),
(167,87,o),
(154,14,o),
(151,1,q),
(151,-5,o),
(121,-40,o),
(86,-69,o),
(78,-69,qs),
(72,-69,o),
(72,-61,q),
(58,-54,o),
(58,-25,qs),
(58,-6,o),
(68,42,qs),
(72,62,o),
(72,64,q),
(64,57,o),
(41,40,o),
(41,49,q),
(34,49,o),
(34,53,qs),
(34,56,o),
(40,63,o),
(41,64,qs),
(55,81,o),
(88,112,q),
(137,352,o),
(230,586,q),
(239,614,ls),
(252,656,o),
(276,711,o),
(293,728,qs),
(302,736,o),
(316,743,qs),
(332,751,o),
(340,759,q),
(368,768,o),
(438,501,o),
(476,319,qs),
(483,285,l),
(498,285,o),
(514,291,o),
(514,302,q),
(535,302,o),
(555,280,o),
(555,265,qs),
(555,249,o),
(545,239,qs),
(536,228,o),
(514,222,o),
(498,222,q),
(509,212,o),
(531,113,o),
(531,97,q),
(533,89,o),
(545,43,o),
(545,34,qs),
(545,26,o),
(506,-36,o),
(459,-87,o),
(446,-87,qs),
(438,-87,o),
(435,-78,qs)
);
},
{
closed = 1;
nodes = (
(266,519,o),
(209,295,o),
(183,144,q),
(373,239,l),
(351,322,o),
(326,484,o),
(309,617,q)
);
},
{
closed = 1;
nodes = (
(510,799,o),
(472,761,o),
(441,716,o),
(441,698,qs),
(441,671,o),
(468,662,qs),
(470,661,o),
(470,664,q),
(479,679,o),
(499,694,qs),
(518,707,ls),
(536,717,o),
(555,735,o),
(555,746,qs),
(555,750,o),
(554,752,q),
(552,767,o),
(524,799,o),
(512,799,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
89 81 78 3 2 4 74 1 1 3 75 66 61 54 46 43 8 7 0 1 3 76 5 1 4 2 4 133 0 2 3 2 133 0 3 1 3 133 0 1 0 1 133 0 0 0 118 79 79 79 97 79 96 18 22 25 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Acircumflex;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(408,-51,o),
(395,20,o),
(389,69,qs),
(383,121,o),
(378,145,q),
(344,139,o),
(281,117,o),
(238,98,qs),
(180,75,l),
(180,66,o),
(167,-1,o),
(165,-12,q),
(165,-17,o),
(139,-48,o),
(107,-74,o),
(99,-74,qs),
(94,-74,o),
(94,-67,q),
(82,-62,o),
(82,-35,qs),
(82,-17,o),
(94,43,o),
(94,45,q),
(87,39,o),
(66,23,o),
(66,32,q),
(57,32,o),
(63,42,o),
(66,45,qs),
(86,68,o),
(109,88,q),
(150,296,o),
(236,515,qs),
(246,544,ls),
(257,580,o),
(278,628,o),
(293,643,qs),
(299,649,o),
(313,655,qs),
(329,664,o),
(335,671,q),
(376,684,o),
(459,267,qs),
(464,244,l),
(478,244,o),
(492,249,o),
(492,259,q),
(511,259,o),
(528,240,o),
(528,226,qs),
(528,211,o),
(520,203,qs),
(511,192,o),
(492,187,o),
(477,187,q),
(487,178,o),
(507,90,o),
(507,75,q),
(509,68,o),
(520,27,o),
(520,18,qs),
(520,11,o),
(484,-45,o),
(442,-91,o),
(430,-91,qs),
(424,-91,o),
(421,-83,qs)
);
},
{
closed = 1;
nodes = (
(268,455,o),
(217,252,o),
(194,117,q),
(365,203,l),
(347,270,o),
(326,398,o),
(311,509,qs),
(307,543,l)
);
},
{
closed = 1;
nodes = (
(144,709,o),
(177,730,o),
(205,744,qs),
(224,753,ls),
(245,764,o),
(271,786,qs),
(290,801,o),
(313,814,o),
(328,814,qs),
(346,814,o),
(371,802,qs),
(411,782,o),
(432,762,qs),
(433,761,o),
(453,746,qs),
(479,728,o),
(510,698,o),
(510,681,qs),
(510,674,o),
(500,660,o),
(494,654,qs),
(493,653,ls),
(490,650,o),
(483,641,o),
(480,640,q),
(476,640,ls),
(462,640,o),
(417,676,o),
(376,713,qs),
(357,731,o),
(322,761,o),
(315,761,q),
(314,760,l),
(304,757,o),
(260,719,qs),
(240,702,o),
(201,673,o),
(194,673,q),
(139,694,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
113 1 5 6 74 1 2 5 70 1 1 3 71 61 57 43 8 5 4 1 50 1 0 4 5 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 3 1 6 3 1 126 0 1 4 6 1 4 126 0 4 0 6 4 0 126 0 0 0 132 0 6 6 26 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 6 5 6 133 0 5 2 5 133 0 2 3 2 133 0 3 1 3 133 0 1 4 1 133 0 4 0 4 133 0 0 0 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
105 103 87 86 40 39 18 22 25 32 7 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Adieresis;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(408,-51,o),
(395,20,o),
(389,69,qs),
(383,121,o),
(378,145,q),
(344,139,o),
(281,117,o),
(238,98,qs),
(180,75,l),
(180,66,o),
(167,-1,o),
(165,-12,q),
(165,-17,o),
(139,-48,o),
(107,-74,o),
(99,-74,qs),
(94,-74,o),
(94,-67,q),
(82,-62,o),
(82,-35,qs),
(82,-17,o),
(94,43,o),
(94,45,q),
(87,39,o),
(66,23,o),
(66,32,q),
(57,32,o),
(63,42,o),
(66,45,qs),
(86,68,o),
(109,88,q),
(150,296,o),
(236,515,qs),
(246,544,ls),
(257,580,o),
(278,628,o),
(293,643,qs),
(299,649,o),
(313,655,qs),
(329,664,o),
(335,671,q),
(376,684,o),
(459,267,qs),
(464,244,l),
(478,244,o),
(492,249,o),
(492,259,q),
(511,259,o),
(528,240,o),
(528,226,qs),
(528,211,o),
(520,203,qs),
(511,192,o),
(492,187,o),
(477,187,q),
(487,178,o),
(507,90,o),
(507,75,q),
(509,68,o),
(520,27,o),
(520,18,qs),
(520,11,o),
(484,-45,o),
(442,-91,o),
(430,-91,qs),
(424,-91,o),
(421,-83,qs)
);
},
{
closed = 1;
nodes = (
(268,455,o),
(217,252,o),
(194,117,q),
(365,203,l),
(347,270,o),
(326,398,o),
(311,509,qs),
(307,543,l)
);
},
{
closed = 1;
nodes = (
(238,736,o),
(205,755,o),
(190,755,qs),
(169,755,o),
(138,728,o),
(138,706,qs),
(138,697,o),
(139,693,qs),
(140,687,o),
(154,674,o),
(160,670,qs),
(176,660,o),
(188,660,qs),
(210,660,o),
(238,705,o),
(238,723,qs)
);
},
{
closed = 1;
nodes = (
(464,781,o),
(433,735,o),
(433,716,qs),
(433,698,o),
(462,678,o),
(482,678,qs),
(501,678,o),
(533,693,o),
(540,706,q),
(542,712,o),
(542,715,qs),
(542,732,o),
(502,779,o),
(486,781,qs),
(481,781,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
94 1 7 6 74 1 2 5 70 1 1 3 71 61 57 43 8 5 4 1 50 1 0 4 5 76 0 8 6 8 133 0 6 7 6 133 0 5 7 2 7 5 2 128 0 2 3 7 2 3 126 0 3 1 7 3 1 126 0 4 1 0 1 4 0 128 0 0 0 132 0 7 5 1 7 89 0 7 7 1 97 0 1 7 1 81 105 104 100 98 88 86 78 76 40 39 18 22 25 32 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Agrave;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(408,-51,o),
(395,20,o),
(389,69,qs),
(383,121,o),
(378,145,q),
(344,139,o),
(281,117,o),
(238,98,qs),
(180,75,l),
(180,66,o),
(167,-1,o),
(165,-12,q),
(165,-17,o),
(139,-48,o),
(107,-74,o),
(99,-74,qs),
(94,-74,o),
(94,-67,q),
(82,-62,o),
(82,-35,qs),
(82,-17,o),
(94,43,o),
(94,45,q),
(87,39,o),
(66,23,o),
(66,32,q),
(57,32,o),
(63,42,o),
(66,45,qs),
(86,68,o),
(109,88,q),
(150,296,o),
(236,515,qs),
(246,544,ls),
(257,580,o),
(278,628,o),
(293,643,qs),
(299,649,o),
(313,655,qs),
(329,664,o),
(335,671,q),
(376,684,o),
(459,267,qs),
(464,244,l),
(478,244,o),
(492,249,o),
(492,259,q),
(511,259,o),
(528,240,o),
(528,226,qs),
(528,211,o),
(520,203,qs),
(511,192,o),
(492,187,o),
(477,187,q),
(487,178,o),
(507,90,o),
(507,75,q),
(509,68,o),
(520,27,o),
(520,18,qs),
(520,11,o),
(484,-45,o),
(442,-91,o),
(430,-91,qs),
(424,-91,o),
(421,-83,qs)
);
},
{
closed = 1;
nodes = (
(268,455,o),
(217,252,o),
(194,117,q),
(365,203,l),
(347,270,o),
(326,398,o),
(311,509,qs),
(307,543,l)
);
},
{
closed = 1;
nodes = (
(194,804,ls),
(206,804,o),
(226,795,o),
(244,786,qs),
(293,761,o),
(293,733,qs),
(293,705,o),
(246,682,qs),
(242,680,o),
(240,680,qs),
(235,680,o),
(223,691,o),
(215,704,o),
(211,708,qs),
(199,718,o),
(161,749,o),
(160,760,qs),
(159,766,o),
(185,804,o),
(191,804,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
74 1 2 5 70 1 1 3 71 61 57 43 8 5 4 1 50 1 0 4 4 76 0 2 5 3 5 2 3 128 0 3 1 5 3 1 126 0 1 4 5 1 4 126 0 4 0 5 4 0 126 0 0 0 132 6 1 5 5 26 5 78 75 75 75 94 75 92 40 39 18 22 25 32 7 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Amacron;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(408,-51,o),
(395,20,o),
(389,69,qs),
(383,121,o),
(378,145,q),
(344,139,o),
(281,117,o),
(238,98,qs),
(180,75,l),
(180,66,o),
(167,-1,o),
(165,-12,q),
(165,-17,o),
(139,-48,o),
(107,-74,o),
(99,-74,qs),
(94,-74,o),
(94,-67,q),
(82,-62,o),
(82,-35,qs),
(82,-17,o),
(94,43,o),
(94,45,q),
(87,39,o),
(66,23,o),
(66,32,q),
(57,32,o),
(63,42,o),
(66,45,qs),
(86,68,o),
(109,88,q),
(150,296,o),
(236,515,qs),
(246,544,ls),
(257,580,o),
(278,628,o),
(293,643,qs),
(299,649,o),
(313,655,qs),
(329,664,o),
(335,671,q),
(376,684,o),
(459,267,qs),
(464,244,l),
(478,244,o),
(492,249,o),
(492,259,q),
(511,259,o),
(528,240,o),
(528,226,qs),
(528,211,o),
(520,203,qs),
(511,192,o),
(492,187,o),
(477,187,q),
(487,178,o),
(507,90,o),
(507,75,q),
(509,68,o),
(520,27,o),
(520,18,qs),
(520,11,o),
(484,-45,o),
(442,-91,o),
(430,-91,qs),
(424,-91,o),
(421,-83,qs)
);
},
{
closed = 1;
nodes = (
(268,455,o),
(217,252,o),
(194,117,q),
(365,203,l),
(347,270,o),
(326,398,o),
(311,509,qs),
(307,543,l)
);
},
{
closed = 1;
nodes = (
(207,762,l),
(296,761,l),
(385,761,l),
(420,761,ls),
(482,761,o),
(486,757,qs),
(491,750,o),
(491,730,qs),
(491,720,o),
(486,705,o),
(482,704,qs),
(467,699,o),
(443,699,qs),
(428,699,o),
(398,701,o),
(384,702,qs),
(314,704,l),
(227,702,ls),
(218,701,o),
(197,697,o),
(190,697,qs),
(184,697,o),
(181,698,qs),
(175,699,o),
(171,743,o),
(170,761,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
74 1 2 5 70 1 1 3 71 61 57 43 8 5 4 1 50 1 0 4 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 2 5 3 5 2 3 128 0 3 1 5 3 1 126 0 1 4 5 1 4 126 0 4 0 5 4 0 126 0 0 0 132 0 8 5 5 8 87 0 8 8 5 97 7 6 2 5 8 5 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
7 1 5 6 2 6 5 114 0 2 3 6 2 3 126 0 3 1 6 3 1 126 0 1 4 6 1 4 126 0 4 0 6 4 0 126 0 0 0 132 0 8 6 6 8 87 0 8 8 6 95 0 6 8 6 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
100 94 88 85 84 82 80 78 40 39 18 22 25 32 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = Aring;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(405,-52,o),
(392,15,o),
(386,62,qs),
(380,112,o),
(375,137,q),
(342,130,o),
(290,112,o),
(234,89,qs),
(184,69,l),
(184,60,o),
(171,-4,o),
(169,-15,q),
(169,-20,o),
(144,-50,o),
(114,-75,o),
(107,-75,qs),
(102,-75,o),
(102,-68,q),
(90,-61,o),
(90,-36,qs),
(90,-19,o),
(102,39,o),
(102,40,q),
(99,37,o),
(81,24,o),
(77,24,qs),
(74,24,o),
(74,28,q),
(65,28,o),
(71,37,o),
(74,40,qs),
(99,67,l),
(115,83,l),
(157,288,o),
(238,493,q),
(255,547,o),
(276,599,o),
(293,616,qs),
(302,625,o),
(314,630,qs),
(330,639,o),
(335,644,q),
(371,655,o),
(451,267,qs),
(458,232,l),
(471,232,o),
(484,237,o),
(484,247,q),
(503,247,o),
(520,229,o),
(520,215,qs),
(520,200,o),
(512,192,qs),
(504,182,o),
(485,177,o),
(471,177,q),
(480,169,o),
(500,83,o),
(500,69,q),
(502,62,o),
(512,23,o),
(512,15,qs),
(512,8,o),
(478,-45,o),
(438,-90,o),
(426,-90,qs),
(420,-90,o),
(417,-82,qs)
);
},
{
closed = 1;
nodes = (
(269,436,o),
(220,243,o),
(197,110,q),
(363,192,l),
(344,267,o),
(319,422,o),
(307,520,q)
);
},
{
closed = 1;
nodes = (
(286,791,o),
(251,771,o),
(251,749,qs),
(251,733,o),
(274,707,o),
(292,707,qs),
(303,707,o),
(321,715,qs),
(344,727,o),
(344,746,qs),
(344,761,o),
(319,785,o),
(305,787,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
74 1 2 5 70 1 1 3 71 62 58 8 4 4 1 51 1 0 4 4 76 0 5 2 5 133 0 2 3 2 133 0 3 1 3 133 0 1 4 1 133 0 4 0 4 133 0 0 0 118 82 80 39 38 18 22 25 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Atilde;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(405,-52,o),
(392,15,o),
(386,62,qs),
(380,112,o),
(375,137,q),
(342,130,o),
(290,112,o),
(234,89,qs),
(184,69,l),
(184,60,o),
(171,-4,o),
(169,-15,q),
(169,-20,o),
(144,-50,o),
(114,-75,o),
(107,-75,qs),
(102,-75,o),
(102,-68,q),
(90,-61,o),
(90,-36,qs),
(90,-19,o),
(102,39,o),
(102,40,q),
(99,37,o),
(81,24,o),
(77,24,qs),
(74,24,o),
(74,28,q),
(65,28,o),
(71,37,o),
(74,40,qs),
(99,67,l),
(115,83,l),
(157,288,o),
(238,493,q),
(255,547,o),
(276,599,o),
(293,616,qs),
(302,625,o),
(314,630,qs),
(330,639,o),
(335,644,q),
(371,655,o),
(451,267,qs),
(458,232,l),
(471,232,o),
(484,237,o),
(484,247,q),
(503,247,o),
(520,229,o),
(520,215,qs),
(520,200,o),
(512,192,qs),
(504,182,o),
(485,177,o),
(471,177,q),
(480,169,o),
(500,83,o),
(500,69,q),
(502,62,o),
(512,23,o),
(512,15,qs),
(512,8,o),
(478,-45,o),
(438,-90,o),
(426,-90,qs),
(420,-90,o),
(417,-82,qs)
);
},
{
closed = 1;
nodes = (
(269,436,o),
(220,243,o),
(197,110,q),
(363,192,l),
(344,267,o),
(319,422,o),
(307,520,q)
);
},
{
closed = 1;
nodes = (
(75,651,o),
(75,659,qs),
(75,664,o),
(93,690,o),
(94,692,qs),
(136,770,o),
(307,770,qs),
(344,770,o),
(394,756,qs),
(430,748,o),
(440,748,q),
(498,754,l),
(516,754,o),
(534,730,o),
(534,698,qs),
(534,686,o),
(514,681,o),
(490,680,qs),
(456,680,o),
(403,692,o),
(369,704,qs),
(344,713,o),
(311,721,o),
(294,721,qs),
(286,721,o),
(272,719,qs),
(253,716,o),
(223,700,o),
(202,685,qs),
(176,668,o),
(142,651,o),
(120,651,qs),
(92,651,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
74 1 2 5 70 1 1 3 71 62 58 8 4 4 1 51 1 0 4 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
11 1 5 7 2 6 5 114 0 2 3 7 2 3 126 0 3 1 7 3 1 126 0 1 4 7 1 4 126 0 4 0 7 4 0 126 0 0 0 132 0 10 0 6 7 10 6 105 0 7 7 8 97 9 1 8 8 28 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
11 1 5 7 2 7 5 2 128 0 2 3 7 2 3 126 0 3 1 7 3 1 126 0 1 4 7 1 4 126 0 4 0 7 4 0 126 0 0 0 132 0 10 0 6 7 10 6 105 0 7 7 8 97 9 1 8 8 28 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
11 1 5 7 2 7 5 2 128 0 2 3 7 2 3 126 0 3 1 7 3 1 126 0 1 4 7 1 4 126 0 4 0 7 4 0 126 0 0 0 132 9 1 8 6 7 8 89 0 10 0 6 7 10 6 105 9 1 8 8 7 97 0 7 8 7 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
0 9 8 6 8 9 6 128 11 1 5 7 2 7 5 2 128 0 2 3 7 2 3 126 0 3 1 7 3 1 126 0 1 4 7 1 4 126 0 4 0 7 4 0 126 0 0 0 132 0 8 9 7 8 89 0 10 0 6 7 10 6 105 0 8 8 7 97 0 7 8 7 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
76 75 101 99 97 96 95 94 90 88 84 82 75 107 76 106 39 38 18 22 25 32 12 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = AE;
layers = (
{
layerId = m01;
width = 600;
}
);
note = AE;
unicode = 198;
},
{
glyphname = B;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,-108,o),
(202,-108,qs),
(177,-108,o),
(125,-87,o),
(92,-55,o),
(92,-40,qs),
(92,-7,o),
(168,1,q),
(113,1,o),
(56,162,o),
(37,380,o),
(32,541,qs),
(29,631,o),
(23,734,o),
(16,761,q),
(23,771,o),
(34,771,qs),
(49,771,o),
(87,738,o),
(114,695,o),
(114,683,qs),
(114,672,o),
(100,676,q),
(100,575,l),
(168,673,o),
(293,770,o),
(341,770,qs),
(378,770,o),
(420,711,o),
(420,657,qs),
(420,559,o),
(354,423,q),
(434,447,o),
(485,447,qs),
(545,447,o),
(603,390,o),
(603,341,qs),
(603,266,o),
(489,68,o),
(317,-87,o),
(235,-102,q)
);
},
{
closed = 1;
nodes = (
(162,445,o),
(151,351,o),
(151,271,q),
(183,333,ls),
(238,441,o),
(301,583,o),
(320,659,q),
(272,612,o),
(208,536,o),
(185,490,qs)
);
},
{
closed = 1;
nodes = (
(185,1,l),
(320,85,o),
(513,276,o),
(524,389,q),
(465,389,o),
(365,334,o),
(300,283,qs),
(260,251,o),
(214,223,o),
(195,223,qs),
(169,223,o),
(151,254,q),
(151,243,o),
(162,173,o),
(168,136,qs),
(185,40,o),
(185,17,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
43 25 17 16 4 0 1 8 1 6 0 55 47 2 5 6 3 76 66 1 3 1 75 2 1 1 0 1 133 0 5 6 3 6 5 3 128 0 4 3 4 134 0 0 0 6 5 0 6 105 0 3 3 30 3 78 63 62 58 56 37 23 40 37 37 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,-37,o),
(194,-37,qs),
(147,-37,o),
(103,9,q),
(50,84,o),
(50,199,qs),
(50,286,o),
(106,476,o),
(148,559,qs),
(168,599,o),
(267,688,o),
(386,748,o),
(437,748,qs),
(483,748,o),
(547,692,o),
(558,632,q),
(558,626,o),
(551,619,o),
(544,614,qs),
(534,608,o),
(527,601,q),
(500,568,o),
(486,568,qs),
(479,568,o),
(470,583,o),
(463,601,qs),
(454,625,o),
(437,654,o),
(421,662,q),
(406,665,o),
(393,665,qs),
(326,665,o),
(235,552,o),
(184,404,o),
(163,313,q),
(158,275,o),
(158,242,qs),
(158,173,o),
(204,71,o),
(255,54,qs),
(258,53,o),
(264,53,qs),
(326,53,o),
(436,222,q),
(450,249,o),
(501,300,o),
(528,300,qs),
(538,300,o),
(543,298,q),
(469,132,o),
(255,-21,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 2 0 2 3 114 0 0 1 2 0 1 126 0 1 5 2 1 5 126 0 2 2 4 97 0 4 4 28 77 0 5 5 27 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 1 5 2 1 5 126 0 2 2 4 97 0 4 4 28 77 0 5 5 27 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 1 5 2 1 5 126 0 5 5 132 0 2 2 4 97 0 4 4 28 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 1 5 2 1 5 126 0 5 5 132 0 4 2 2 4 89 0 4 4 2 97 0 2 4 2 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
41 40 38 42 19 19 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = C;
unicode = 67;
},
{
glyphname = Ccedilla;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,-37,o),
(194,-37,qs),
(147,-37,o),
(103,9,q),
(50,84,o),
(50,199,qs),
(50,286,o),
(106,476,o),
(148,559,qs),
(168,599,o),
(267,688,o),
(386,748,o),
(437,748,qs),
(483,748,o),
(547,692,o),
(558,632,q),
(558,626,o),
(551,619,o),
(544,614,qs),
(534,608,o),
(527,601,q),
(500,568,o),
(486,568,qs),
(479,568,o),
(470,583,o),
(463,601,qs),
(454,625,o),
(437,654,o),
(421,662,q),
(406,665,o),
(393,665,qs),
(326,665,o),
(235,552,o),
(184,404,o),
(163,313,q),
(158,275,o),
(158,242,qs),
(158,173,o),
(204,71,o),
(255,54,qs),
(258,53,o),
(264,53,qs),
(326,53,o),
(436,222,q),
(447,243,o),
(463,243,qs),
(470,243,o),
(496,235,o),
(512,230,q),
(500,155,o),
(404,25,o),
(329,0,q),
(330,-1,o),
(333,-9,o),
(339,-25,qs),
(341,-32,o),
(361,-34,qs),
(379,-37,o),
(403,-48,o),
(422,-82,o),
(422,-115,qs),
(422,-162,o),
(370,-212,o),
(335,-212,qs),
(324,-212,o),
(313,-209,qs),
(301,-205,o),
(274,-168,o),
(274,-158,qs),
(274,-154,o),
(288,-154,o),
(298,-156,qs),
(316,-160,o),
(328,-160,qs),
(363,-160,o),
(363,-127,q),
(361,-111,ls),
(357,-90,o),
(327,-76,o),
(302,-73,qs),
(293,-72,o),
(276,-68,o),
(274,-63,qs),
(255,-21,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
34 1 4 3 83 1 8 4 7 1 0 8 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
34 1 4 3 83 1 8 4 7 1 1 8 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 6 5 3 5 6 114 0 3 4 5 3 4 126 0 4 8 5 4 8 126 1 1 0 0 2 0 2 101 0 5 5 7 97 0 7 7 28 77 0 8 8 27 8 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 6 5 3 5 6 3 128 0 3 4 5 3 4 126 0 4 8 5 4 8 126 1 1 0 0 2 0 2 101 0 5 5 7 97 0 7 7 28 77 0 8 8 27 8 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 6 5 3 5 6 3 128 0 3 4 5 3 4 126 0 4 8 5 4 8 126 0 8 0 5 8 0 126 1 1 0 0 2 0 2 101 0 5 5 7 97 0 7 7 28 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 6 5 3 5 6 3 128 0 3 4 5 3 4 126 0 4 8 5 4 8 126 0 8 0 5 8 0 126 0 7 0 5 6 7 5 105 1 1 0 2 2 0 89 1 1 0 0 2 97 0 2 0 2 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
0 6 5 3 5 6 3 128 0 3 4 5 3 4 126 0 4 8 5 4 8 126 0 8 1 5 8 1 126 0 1 0 5 1 0 126 0 7 0 5 6 7 5 105 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
82 80 71 69 61 59 53 51 41 40 38 36 37 18 40 9 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = D;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,-36,o),
(69,-49,o),
(49,-49,qs),
(41,-49,o),
(40,-48,q),
(44,214,o),
(50,368,qs),
(56,552,o),
(57,684,q),
(110,737,o),
(131,737,qs),
(137,737,o),
(140,734,q),
(157,701,l),
(223,781,o),
(303,781,qs),
(379,781,o),
(525,654,o),
(573,567,q),
(578,550,o),
(578,523,qs),
(578,432,o),
(435,213,o),
(237,22,o),
(157,-32,q)
);
},
{
closed = 1;
nodes = (
(236,154,o),
(379,297,o),
(427,394,q),
(460,441,o),
(460,484,qs),
(460,526,o),
(407,600,o),
(354,652,qs),
(337,669,l),
(300,693,o),
(273,693,qs),
(219,693,o),
(164,544,o),
(148,353,o),
(145,219,qs),
(143,126,o),
(140,101,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
10 1 3 1 41 19 15 3 2 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 3 2 134 0 1 1 28 77 0 3 3 0 97 0 0 0 26 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 2 3 2 134 0 0 0 3 2 0 3 105 0 1 1 28 1 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
39 23 20 39 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = D;
unicode = 68;
},
{
glyphname = Eth;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,-36,o),
(69,-49,o),
(49,-49,qs),
(41,-49,o),
(40,-48,q),
(42,174,o),
(48,337,qs),
(48,342,o),
(32,342,qs),
(10,341,ls),
(3,340,o),
(-10,340,qs),
(-25,340,o),
(-25,344,qs),
(-25,353,o),
(-22,374,o),
(-20,386,qs),
(-15,430,ls),
(-15,433,o),
(5,439,o),
(17,441,qs),
(30,443,o),
(52,449,o),
(52,453,qs),
(56,576,o),
(57,684,q),
(110,737,o),
(131,737,qs),
(137,737,o),
(140,734,q),
(157,701,l),
(223,781,o),
(303,781,qs),
(379,781,o),
(525,654,o),
(573,567,q),
(582,531,o),
(582,488,qs),
(582,381,o),
(478,149,o),
(284,-19,o),
(157,-32,q)
);
},
{
closed = 1;
nodes = (
(235,126,o),
(388,239,o),
(475,386,o),
(475,459,qs),
(475,521,o),
(407,630,o),
(337,669,q),
(300,693,o),
(272,693,qs),
(181,693,o),
(156,446,qs),
(156,441,o),
(179,439,o),
(202,439,qs),
(219,439,o),
(248,436,o),
(247,431,qs),
(240,389,l),
(232,346,ls),
(231,340,o),
(207,340,qs),
(170,341,ls),
(149,341,o),
(149,336,qs),
(146,228,ls),
(144,127,o),
(140,101,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
10 1 6 1 17 15 2 5 6 51 27 2 2 5 68 44 36 3 3 2 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 3 2 3 134 0 5 4 1 2 3 5 2 105 0 1 1 28 77 0 6 6 0 97 0 0 0 26 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 3 2 3 134 0 0 0 6 5 0 6 105 0 5 4 1 2 3 5 2 105 0 1 1 28 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
35 37 39 21 79 20 39 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = E;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,-23,o),
(194,76,o),
(165,197,o),
(153,276,qs),
(145,322,l),
(76,284,o),
(50,284,qs),
(37,284,o),
(37,293,qs),
(37,307,o),
(88,355,o),
(127,374,q),
(127,445,o),
(121,533,o),
(110,568,q),
(99,568,o),
(85,560,o),
(75,551,qs),
(66,542,o),
(51,533,o),
(39,533,qs),
(16,531,ls),
(-10,531,o),
(-10,544,qs),
(-10,556,o),
(30,592,o),
(80,621,o),
(92,621,q),
(92,633,o),
(122,676,o),
(162,708,o),
(177,708,qs),
(197,708,o),
(197,674,q),
(227,684,o),
(282,712,o),
(329,740,qs),
(386,773,o),
(457,807,o),
(497,814,q),
(505,806,o),
(458,747,o),
(399,701,o),
(391,709,q),
(381,704,o),
(322,672,qs),
(250,632,o),
(215,621,q),
(215,555,o),
(221,475,o),
(232,427,q),
(264,444,o),
(314,482,qs),
(375,526,o),
(451,570,o),
(482,570,qs),
(487,570,o),
(497,568,q),
(489,536,o),
(403,474,o),
(323,429,qs),
(261,395,o),
(232,374,q),
(243,348,o),
(261,288,qs),
(283,217,o),
(323,126,o),
(356,93,q),
(364,111,o),
(367,121,q),
(393,183,o),
(420,269,o),
(420,310,qs),
(420,344,o),
(408,374,q),
(408,393,o),
(440,429,o),
(464,448,qs),
(479,462,ls),
(487,470,o),
(493,470,qs),
(511,470,o),
(532,427,q),
(538,400,o),
(538,369,qs),
(538,295,o),
(473,132,o),
(364,0,o),
(303,-30,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
54 1 3 2 83 76 37 25 13 5 7 0 2 76 40 1 3 1 75 44 1 2 74 88 20 2 7 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 2 133 0 3 1 3 133 0 1 6 1 133 0 6 4 6 133 5 1 4 0 4 133 0 7 0 7 134 0 0 0 29 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 2 133 0 3 1 3 133 0 1 6 1 133 0 6 4 6 133 5 1 4 0 4 133 0 0 7 0 133 0 7 7 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
82 80 73 72 68 67 66 65 61 60 57 55 33 31 22 8 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = E;
unicode = 69;
},
{
glyphname = Eacute;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,-13,o),
(95,126,qs),
(95,164,o),
(105,255,o),
(110,293,qs),
(114,318,o),
(116,337,q),
(67,326,o),
(36,326,qs),
(4,326,o),
(4,338,qs),
(4,351,o),
(69,385,o),
(114,392,q),
(134,457,o),
(155,546,o),
(154,583,q),
(141,585,l),
(130,585,o),
(116,577,qs),
(102,568,o),
(89,568,q),
(76,570,ls),
(32,577,o),
(32,592,qs),
(32,607,o),
(115,640,o),
(142,640,qs),
(149,640,o),
(152,639,q),
(157,656,o),
(226,699,o),
(250,699,qs),
(271,699,o),
(271,678,qs),
(271,671,o),
(268,659,q),
(301,660,o),
(365,672,o),
(413,684,qs),
(463,696,o),
(529,708,o),
(562,708,qs),
(585,708,o),
(596,706,q),
(601,698,o),
(553,662,o),
(490,632,o),
(474,632,qs),
(465,632,o),
(464,636,q),
(387,621,ls),
(356,614,o),
(294,604,o),
(270,603,q),
(250,537,o),
(233,461,o),
(230,412,q),
(256,416,o),
(325,441,qs),
(386,461,o),
(453,480,o),
(482,480,qs),
(508,480,o),
(525,470,q),
(508,443,o),
(403,407,o),
(319,389,qs),
(240,371,o),
(215,362,q),
(218,334,o),
(218,272,qs),
(219,193,o),
(230,97,o),
(252,57,q),
(273,82,ls),
(327,149,o),
(384,244,o),
(384,296,qs),
(383,311,l),
(387,326,o),
(421,350,o),
(463,368,o),
(477,374,qs),
(485,378,o),
(488,378,qs),
(499,378,o),
(512,351,o),
(517,325,q),
(511,247,o),
(402,84,o),
(241,-32,o),
(165,-45,q)
);
},
{
closed = 1;
nodes = (
(365,837,o),
(336,806,o),
(314,763,o),
(314,748,qs),
(314,737,o),
(321,730,qs),
(325,726,o),
(331,726,qs),
(345,726,o),
(390,758,o),
(429,796,o),
(428,799,qs),
(425,806,o),
(384,839,o),
(375,837,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */
95 1 11 12 75 1 8 9 34 27 2 0 1 85 1 10 0 4 76 92 17 12 3 10 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
0 12 11 12 133 6 1 4 11 5 11 4 5 128 0 3 7 2 7 3 2 128 0 8 9 1 9 8 1 128 0 0 1 10 1 0 10 128 0 10 10 132 0 5 0 2 9 5 2 105 0 7 0 9 8 7 9 105 0 11 11 28 77 0 1 1 29 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 75 values pushed */
0 12 11 12 133 0 4 11 6 11 4 6 128 0 6 5 11 6 5 126 0 3 7 2 7 3 2 128 0 8 9 1 9 8 1 128 0 0 1 10 1 0 10 128 0 10 10 132 0 5 0 2 9 5 2 105 0 7 0 9 8 7 9 105 0 11 11 28 77 0 1 1 29 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
107 106 99 98 84 82 74 73 71 70 65 64 60 58 55 54 50 48 44 43 38 37 30 28 21 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecircumflex;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,-24,o),
(100,111,qs),
(100,147,o),
(110,236,o),
(115,273,qs),
(119,296,o),
(121,316,q),
(73,305,o),
(43,305,qs),
(12,305,o),
(12,317,qs),
(12,329,o),
(75,362,o),
(119,369,q),
(139,435,o),
(159,519,o),
(158,554,q),
(145,556,l),
(135,556,o),
(121,548,qs),
(105,540,o),
(95,540,q),
(82,542,ls),
(39,549,o),
(39,563,qs),
(39,577,o),
(120,609,o),
(146,609,qs),
(153,609,o),
(156,608,q),
(161,625,o),
(227,666,o),
(250,666,qs),
(271,666,o),
(271,646,qs),
(271,639,o),
(268,628,q),
(299,629,o),
(358,640,o),
(408,652,qs),
(465,665,o),
(521,675,o),
(552,675,qs),
(575,675,o),
(586,673,q),
(591,665,o),
(545,631,o),
(484,602,o),
(468,602,qs),
(459,602,o),
(458,606,q),
(430,601,o),
(388,592,qs),
(356,585,o),
(294,575,o),
(270,574,q),
(250,507,o),
(234,435,o),
(231,388,q),
(255,392,o),
(322,415,qs),
(372,433,o),
(446,454,o),
(476,454,qs),
(503,454,o),
(517,445,q),
(500,418,o),
(403,385,o),
(317,366,qs),
(238,347,o),
(217,340,q),
(218,320,o),
(219,277,o),
(220,255,qs),
(220,181,o),
(231,84,o),
(253,44,q),
(273,69,ls),
(328,136,o),
(385,237,o),
(380,290,q),
(384,305,o),
(417,328,o),
(458,345,o),
(471,351,q),
(476,355,o),
(482,355,qs),
(500,355,o),
(510,304,q),
(504,228,o),
(398,70,o),
(242,-43,o),
(168,-55,q)
);
},
{
closed = 1;
nodes = (
(146,720,o),
(179,757,o),
(205,782,qs),
(227,806,ls),
(249,832,o),
(280,864,o),
(287,864,q),
(291,863,ls),
(297,862,o),
(319,855,o),
(326,853,q),
(347,850,ls),
(401,842,o),
(464,820,o),
(490,788,qs),
(495,783,o),
(508,771,o),
(508,766,qs),
(508,765,l),
(501,750,ls),
(498,744,o),
(489,729,o),
(485,729,qs),
(484,729,l),
(295,800,l),
(293,800,l),
(292,800,l),
(205,709,l),
(200,701,o),
(168,701,qs),
(146,701,o),
(146,704,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
75 1 8 9 33 26 2 0 1 85 21 2 10 0 3 76 124 117 105 100 97 5 11 74 92 15 2 10 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
0 11 4 11 133 6 1 4 5 4 133 0 3 7 2 7 3 2 128 0 8 9 1 9 8 1 128 0 1 0 9 1 0 126 0 0 10 9 0 10 126 0 10 10 132 0 7 3 9 7 89 0 5 0 2 9 5 2 105 0 7 7 9 97 0 9 7 9 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
0 11 4 11 133 0 4 6 4 133 0 6 5 6 133 0 3 7 2 7 3 2 128 0 8 9 1 9 8 1 128 0 1 0 9 1 0 126 0 0 10 9 0 10 126 0 10 10 132 0 7 3 9 7 89 0 5 0 2 9 5 2 105 0 7 7 9 97 0 9 7 9 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
95 94 84 82 74 73 71 70 65 64 60 58 55 54 50 48 44 43 37 36 29 27 20 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,4,o),
(100,125,qs),
(100,157,o),
(109,236,o),
(114,269,qs),
(120,307,o),
(121,316,q),
(73,305,o),
(43,305,qs),
(12,305,o),
(12,317,qs),
(12,329,o),
(75,362,o),
(119,369,q),
(139,435,o),
(159,519,o),
(158,554,q),
(145,556,l),
(135,556,o),
(121,548,qs),
(105,540,o),
(95,540,q),
(82,542,ls),
(39,549,o),
(39,563,qs),
(39,577,o),
(120,609,o),
(146,609,qs),
(153,609,o),
(156,608,q),
(161,625,o),
(227,666,o),
(250,666,qs),
(271,666,o),
(271,646,qs),
(271,639,o),
(268,628,q),
(299,629,o),
(358,640,o),
(408,652,qs),
(465,665,o),
(521,675,o),
(552,675,qs),
(575,675,o),
(586,673,q),
(591,665,o),
(545,631,o),
(484,602,o),
(468,602,qs),
(459,602,o),
(458,606,q),
(430,601,o),
(388,592,qs),
(356,585,o),
(294,575,o),
(270,574,q),
(250,507,o),
(234,435,o),
(231,388,q),
(255,392,o),
(322,415,qs),
(372,433,o),
(446,454,o),
(476,454,qs),
(503,454,o),
(517,445,q),
(500,418,o),
(403,385,o),
(317,366,qs),
(238,347,o),
(217,340,q),
(218,331,o),
(218,314,qs),
(218,296,o),
(215,260,o),
(213,242,qs),
(208,204,o),
(208,172,qs),
(208,116,o),
(230,76,q),
(242,62,o),
(269,62,qs),
(293,62,o),
(342,86,o),
(372,131,o),
(369,162,q),
(373,177,o),
(406,200,o),
(447,217,o),
(460,223,q),
(465,227,o),
(471,227,qs),
(489,227,o),
(499,176,q),
(494,113,o),
(422,15,o),
(311,-39,o),
(248,-39,qs),
(207,-39,o),
(168,-27,q)
);
},
{
closed = 1;
nodes = (
(195,746,o),
(176,764,o),
(149,778,o),
(138,778,qs),
(119,778,o),
(94,745,o),
(94,725,qs),
(94,710,o),
(109,691,o),
(124,691,qs),
(134,691,o),
(144,694,qs),
(164,701,o),
(195,728,o),
(195,741,qs)
);
},
{
closed = 1;
nodes = (
(412,794,o),
(387,794,qs),
(367,794,o),
(338,773,o),
(338,757,qs),
(338,741,o),
(355,724,qs),
(366,713,o),
(385,713,qs),
(406,713,o),
(442,738,o),
(442,756,qs),
(442,759,o),
(437,773,o),
(434,778,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
82 1 10 11 92 40 33 3 12 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 95 values pushed */
0 16 14 16 133 0 14 15 14 133 0 13 15 6 15 13 6 128 8 1 6 7 15 6 7 126 0 5 9 4 9 5 4 128 0 10 11 3 11 10 3 128 0 3 12 11 3 12 126 0 12 1 11 12 1 126 0 1 2 11 1 2 126 0 7 0 4 11 7 4 105 0 9 0 11 10 9 11 105 0 15 15 28 77 0 2 2 0 98 0 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
0 16 14 16 133 0 14 15 14 133 0 13 15 6 15 13 6 128 8 1 6 7 15 6 7 126 0 5 9 4 9 5 4 128 0 10 11 3 11 10 3 128 0 3 12 11 3 12 126 0 12 1 11 12 1 126 0 1 2 11 1 2 126 0 7 0 4 11 7 4 105 0 9 0 11 10 9 11 105 0 2 0 0 2 0 102 0 15 15 28 15 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 95 values pushed */
0 16 14 16 133 0 14 15 14 133 0 15 13 15 133 0 13 6 13 133 8 1 6 7 6 133 0 5 9 4 9 5 4 128 0 10 11 3 11 10 3 128 0 3 12 11 3 12 126 0 12 1 11 12 1 126 0 1 2 11 1 2 126 0 7 0 4 11 7 4 105 0 9 0 11 10 9 11 105 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 99 values pushed */
0 16 14 16 133 0 14 15 14 133 0 15 13 15 133 0 13 6 13 133 0 6 8 6 133 0 8 7 8 133 0 5 9 4 9 5 4 128 0 10 11 3 11 10 3 128 0 3 12 11 3 12 126 0 12 1 11 12 1 126 0 1 2 11 1 2 126 0 7 0 4 11 7 4 105 0 9 0 11 10 9 11 105 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
128 126 121 119 111 109 105 103 91 89 81 80 78 77 72 71 67 65 62 61 57 55 51 50 44 43 36 34 41 20 32 17 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Egrave;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,-23,o),
(194,76,o),
(165,197,o),
(153,276,qs),
(145,322,l),
(76,284,o),
(50,284,qs),
(37,284,o),
(37,293,qs),
(37,307,o),
(88,355,o),
(127,374,q),
(127,445,o),
(121,533,o),
(110,568,q),
(99,568,o),
(85,560,o),
(75,551,qs),
(66,542,o),
(51,533,o),
(39,533,qs),
(16,531,ls),
(-10,531,o),
(-10,544,qs),
(-10,556,o),
(30,592,o),
(80,621,o),
(92,621,q),
(92,633,o),
(122,676,o),
(162,708,o),
(177,708,qs),
(197,708,o),
(197,674,q),
(227,684,o),
(282,712,o),
(329,740,qs),
(386,773,o),
(457,807,o),
(497,814,q),
(505,806,o),
(458,747,o),
(399,701,o),
(391,709,q),
(381,704,o),
(322,672,qs),
(250,632,o),
(215,621,q),
(215,555,o),
(221,475,o),
(232,427,q),
(264,444,o),
(314,482,qs),
(375,526,o),
(451,570,o),
(482,570,qs),
(487,570,o),
(497,568,q),
(489,536,o),
(403,474,o),
(323,429,qs),
(261,395,o),
(232,374,q),
(243,348,o),
(261,288,qs),
(283,217,o),
(323,126,o),
(356,93,q),
(364,111,o),
(367,121,q),
(393,183,o),
(420,269,o),
(420,310,qs),
(420,344,o),
(408,374,q),
(408,393,o),
(440,429,o),
(464,448,qs),
(479,462,ls),
(487,470,o),
(493,470,qs),
(511,470,o),
(532,427,q),
(538,400,o),
(538,369,qs),
(538,295,o),
(473,132,o),
(364,0,o),
(303,-30,q)
);
},
{
closed = 1;
nodes = (
(96,882,o),
(139,864,o),
(162,846,qs),
(175,836,o),
(194,822,o),
(194,816,qs),
(194,811,o),
(180,794,o),
(169,783,qs),
(161,775,o),
(141,755,o),
(133,752,q),
(132,752,ls),
(125,752,o),
(96,782,o),
(88,791,q),
(78,799,o),
(68,808,qs),
(50,824,o),
(39,831,qs),
(36,833,o),
(25,839,o),
(24,841,q),
(24,842,ls),
(24,845,o),
(38,857,o),
(42,860,qs),
(49,866,o),
(63,879,o),
(71,882,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
44 1 2 8 54 1 3 2 83 76 37 25 13 5 7 0 3 76 40 1 3 1 75 88 20 2 7 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 8 3 8 2 3 128 0 3 1 8 3 1 126 0 1 6 8 1 6 126 0 6 4 8 6 4 126 5 1 4 0 8 4 0 126 0 8 0 7 8 7 101 0 0 0 29 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
0 2 8 3 8 2 3 128 0 3 1 8 3 1 126 0 1 6 8 1 6 126 0 6 4 8 6 4 126 5 1 4 0 8 4 0 126 0 0 7 8 0 7 126 0 8 2 7 8 89 0 8 8 7 97 0 7 8 7 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
118 117 82 80 73 72 68 67 66 65 61 60 57 55 33 31 22 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = F;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,-60,o),
(127,-42,q),
(131,-11,l),
(131,386,l),
(83,360,o),
(55,360,qs),
(43,360,o),
(30,370,o),
(30,378,qs),
(30,392,o),
(65,430,o),
(99,450,q),
(105,450,o),
(111,439,o),
(117,433,o),
(131,433,q),
(131,672,l),
(109,672,o),
(76,657,o),
(49,642,qs),
(24,627,o),
(19,625,q),
(4,630,o),
(4,641,qs),
(4,652,o),
(30,681,o),
(62,704,o),
(68,704,q),
(77,712,o),
(99,719,qs),
(123,727,o),
(131,735,qs),
(144,749,o),
(182,779,o),
(195,779,qs),
(211,779,o),
(211,752,q),
(235,764,o),
(372,814,o),
(506,853,o),
(534,853,qs),
(550,853,o),
(550,846,qs),
(550,830,o),
(480,784,q),
(435,775,o),
(338,745,o),
(248,716,qs),
(211,704,l),
(222,652,o),
(227,549,o),
(227,481,q),
(235,481,o),
(306,515,o),
(348,536,qs),
(435,578,o),
(521,617,o),
(538,617,qs),
(548,617,o),
(545,609,qs),
(530,564,o),
(423,506,o),
(329,473,qs),
(259,449,o),
(227,433,q),
(229,349,ls),
(234,214,o),
(234,170,qs),
(234,90,o),
(227,68,q),
(227,21,o),
(183,-48,o),
(147,-60,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
29 1 2 1 35 1 3 2 50 1 0 3 68 63 2 5 4 70 69 2 3 6 5 5 76 7 1 4 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 1 2 1 133 0 3 2 0 2 3 0 128 0 0 4 2 0 4 126 0 5 4 6 4 5 6 128 0 4 0 6 4 6 101 0 2 2 26 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 1 2 1 133 0 2 3 2 133 0 3 0 3 133 0 0 4 0 133 0 5 4 6 4 5 6 128 0 4 5 6 4 89 0 4 4 6 97 0 6 4 6 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
72 71 67 65 57 56 55 54 38 36 32 31 45 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(443,-234,o),
(434,-234,qs),
(425,-234,o),
(425,-225,q),
(429,-191,o),
(441,-113,qs),
(454,-22,o),
(466,87,o),
(466,148,q),
(418,100,o),
(291,49,o),
(225,49,qs),
(134,49,o),
(66,95,q),
(5,156,o),
(5,267,qs),
(5,329,o),
(40,463,o),
(66,521,q),
(96,569,o),
(191,680,o),
(302,760,o),
(350,760,qs),
(404,760,o),
(439,707,q),
(427,684,o),
(381,644,o),
(372,654,qs),
(351,675,o),
(319,697,o),
(300,697,qs),
(290,697,o),
(279,693,qs),
(184,654,o),
(86,453,o),
(86,336,qs),
(86,300,o),
(93,254,qs),
(100,183,o),
(216,113,o),
(294,113,qs),
(336,113,o),
(372,122,q),
(460,155,o),
(460,201,qs),
(460,244,o),
(337,330,o),
(266,361,q),
(186,361,o),
(186,387,q),
(219,441,o),
(266,441,qs),
(300,441,o),
(346,414,q),
(396,402,o),
(465,379,o),
(492,361,q),
(556,297,o),
(556,176,qs),
(556,136,o),
(546,59,o),
(535,-6,qs),
(523,-74,o),
(519,-118,q),
(519,-161,o),
(489,-215,o),
(452,-225,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
41 1 3 4 16 1 1 0 57 1 2 1 62 2 2 6 5 4 76 0 6 5 6 134 0 4 0 3 0 4 3 105 0 0 0 1 2 0 1 105 0 2 5 5 2 89 0 2 2 5 97 0 5 2 5 81 40 41 38 40 38 18 45 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = G;
unicode = 71;
},
{
glyphname = H;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(101,-63,o),
(83,-63,qs),
(58,-63,o),
(40,10,o),
(40,65,qs),
(41,125,ls),
(41,561,o),
(58,628,q),
(58,641,o),
(100,682,o),
(125,695,q),
(143,621,o),
(143,514,qs),
(142,408,ls),
(142,323,o),
(158,276,q),
(229,297,ls),
(285,312,o),
(326,326,q),
(326,367,o),
(316,481,qs),
(304,609,o),
(304,676,qs),
(304,717,o),
(309,762,q),
(309,769,o),
(336,795,o),
(371,815,o),
(383,815,qs),
(390,815,o),
(393,812,q),
(393,581,o),
(443,326,q),
(578,326,o),
(578,292,q),
(567,260,o),
(560,245,o),
(540,240,o),
(507,239,qs),
(460,237,l),
(465,208,o),
(474,150,o),
(474,128,qs),
(474,88,o),
(445,28,o),
(410,7,qs),
(385,-10,o),
(367,-10,qs),
(353,-10,o),
(335,15,o),
(326,41,q),
(350,64,o),
(350,133,qs),
(350,157,o),
(345,209,qs),
(343,237,l),
(283,237,o),
(191,228,qs),
(162,225,l),
(162,184,o),
(180,102,o),
(192,74,q),
(192,41,o),
(158,-10,o),
(125,-43,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
56 53 33 3 3 4 48 29 2 0 3 13 5 2 3 1 0 3 76 45 1 3 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 1 5 134 0 3 2 1 0 1 3 0 105 0 4 4 26 77 0 1 1 27 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 4 3 4 133 0 5 1 5 134 0 3 2 1 0 1 3 0 105 0 1 1 27 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
63 61 20 20 39 39 23 6 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,-10,o),
(257,-10,qs),
(237,-10,o),
(224,68,o),
(224,156,qs),
(224,223,o),
(225,263,qs),
(226,432,ls),
(226,569,o),
(223,647,qs),
(223,657,o),
(248,689,o),
(281,714,o),
(292,714,qs),
(299,714,o),
(301,709,qs),
(313,686,o),
(313,670,qs),
(313,659,o),
(308,644,qs),
(299,615,o),
(299,590,qs),
(299,570,o),
(301,557,qs),
(325,326,l),
(338,197,ls),
(339,190,o),
(347,146,qs),
(355,104,o),
(355,87,qs),
(355,56,o),
(318,11,o),
(270,-7,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 28 77 0 1 1 27 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
0 0 1 0 133 0 1 1 27 1 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
30 29 19 18 2 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = I;
unicode = 73;
},
{
glyphname = Iacute;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,-10,o),
(257,-10,qs),
(237,-10,o),
(224,68,o),
(224,156,qs),
(224,223,o),
(225,263,qs),
(226,432,ls),
(226,569,o),
(223,647,qs),
(223,657,o),
(248,689,o),
(281,714,o),
(292,714,qs),
(299,714,o),
(301,709,qs),
(313,686,o),
(313,670,qs),
(313,659,o),
(308,644,qs),
(299,615,o),
(299,590,qs),
(299,570,o),
(301,557,qs),
(325,326,l),
(338,197,ls),
(339,190,o),
(347,146,qs),
(355,104,o),
(355,87,qs),
(355,56,o),
(318,11,o),
(270,-7,qs)
);
},
{
closed = 1;
nodes = (
(445,757,o),
(400,715,o),
(370,663,o),
(370,642,qs),
(370,621,o),
(391,607,qs),
(392,606,o),
(394,606,qs),
(400,606,o),
(426,623,o),
(434,627,q),
(465,638,ls),
(514,653,o),
(538,669,qs),
(542,672,o),
(542,677,qs),
(542,689,o),
(513,736,o),
(477,768,o),
(465,764,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
36 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 28 77 0 1 1 27 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
0 0 1 0 133 0 1 1 27 1 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
30 29 19 18 2 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,-12,o),
(254,-12,qs),
(240,-12,o),
(230,28,o),
(230,72,qs),
(230,115,o),
(233,178,qs),
(238,341,o),
(238,422,qs),
(238,496,o),
(235,583,qs),
(235,593,o),
(260,625,o),
(293,650,o),
(304,650,qs),
(311,650,o),
(313,645,qs),
(325,622,o),
(325,606,qs),
(325,595,o),
(320,580,qs),
(311,551,o),
(311,526,qs),
(311,506,o),
(313,493,qs),
(325,379,o),
(328,314,qs),
(332,257,o),
(338,197,qs),
(339,190,o),
(347,146,qs),
(355,104,o),
(355,87,qs),
(355,56,o),
(318,11,o),
(270,-7,q)
);
},
{
closed = 1;
nodes = (
(117,702,o),
(204,767,o),
(286,817,o),
(298,814,qs),
(317,811,o),
(401,756,o),
(469,692,o),
(469,675,qs),
(469,671,o),
(465,667,q),
(446,656,o),
(432,656,qs),
(421,656,o),
(405,668,o),
(391,683,qs),
(371,703,o),
(357,715,qs),
(337,731,o),
(291,750,o),
(286,750,q),
(256,742,o),
(210,710,o),
(184,686,qs),
(174,677,o),
(156,663,o),
(151,663,q),
(150,664,l),
(139,665,o),
(114,681,o),
(106,691,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
57 45 38 3 2 74 0 2 0 2 133 0 0 1 0 133 0 1 1 27 1 78 54 52 33 32 21 20 3 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,-12,o),
(254,-12,qs),
(241,-12,o),
(231,21,o),
(231,58,qs),
(231,77,o),
(235,159,qs),
(242,315,o),
(242,423,qs),
(242,492,o),
(239,573,qs),
(239,583,o),
(264,615,o),
(297,640,o),
(308,640,qs),
(315,640,o),
(317,635,qs),
(329,612,o),
(329,596,qs),
(329,585,o),
(324,570,qs),
(315,541,o),
(315,516,qs),
(315,496,o),
(317,483,qs),
(328,374,o),
(330,311,qs),
(332,254,o),
(338,197,qs),
(339,190,o),
(347,146,qs),
(355,104,o),
(355,87,qs),
(355,56,o),
(318,11,o),
(270,-7,q)
);
},
{
closed = 1;
nodes = (
(226,727,o),
(200,751,o),
(176,751,qs),
(156,751,o),
(125,723,o),
(125,702,qs),
(125,689,o),
(132,676,qs),
(135,669,o),
(156,662,o),
(169,662,qs),
(192,662,o),
(226,684,o),
(226,707,qs)
);
},
{
closed = 1;
nodes = (
(462,736,o),
(422,756,o),
(396,756,qs),
(375,756,o),
(354,724,o),
(354,702,qs),
(354,680,o),
(364,667,qs),
(374,654,o),
(405,654,qs),
(418,654,o),
(441,661,o),
(447,666,qs),
(464,682,o),
(464,720,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
64 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 1 3 2 3 133 4 1 2 0 2 133 0 0 1 0 133 0 1 1 27 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 3 2 3 133 0 2 4 2 133 0 4 0 4 133 0 0 1 0 133 0 1 1 27 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 5 3 5 133 0 3 2 3 133 0 2 4 2 133 0 4 0 4 133 0 0 1 0 133 0 1 1 27 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
62 60 55 53 47 45 39 37 33 32 21 20 6 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Igrave;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,-10,o),
(257,-10,qs),
(237,-10,o),
(224,68,o),
(224,156,qs),
(224,223,o),
(225,263,qs),
(226,432,ls),
(226,569,o),
(223,647,qs),
(223,657,o),
(248,689,o),
(281,714,o),
(292,714,qs),
(299,714,o),
(301,709,qs),
(313,686,o),
(313,670,qs),
(313,659,o),
(308,644,qs),
(299,615,o),
(299,590,qs),
(299,570,o),
(301,557,qs),
(325,326,l),
(338,197,ls),
(339,190,o),
(347,146,qs),
(355,104,o),
(355,87,qs),
(355,56,o),
(318,11,o),
(270,-7,qs)
);
},
{
closed = 1;
nodes = (
(156,866,o),
(181,852,qs),
(208,837,o),
(212,835,qs),
(234,823,o),
(260,806,o),
(261,794,qs),
(262,786,o),
(238,773,o),
(210,761,q),
(194,749,l),
(182,752,o),
(157,767,o),
(146,775,qs),
(118,792,ls),
(103,800,o),
(71,808,q),
(68,808,o),
(68,809,qs),
(67,812,o),
(82,831,o),
(86,836,qs),
(91,844,o),
(104,865,o),
(119,879,o),
(127,879,qs),
(130,879,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
48 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 2 0 2 133 0 0 0 28 77 0 1 1 27 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
3 1 2 0 2 133 0 0 1 0 133 0 1 1 27 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
34 33 33 59 34 59 30 29 19 18 4 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = J;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(413,62,o),
(304,-21,o),
(244,-21,qs),
(200,-21,o),
(165,3,q),
(136,18,o),
(62,89,o),
(65,107,q),
(71,121,o),
(125,174,o),
(140,174,qs),
(145,174,o),
(148,170,qs),
(181,133,o),
(276,87,o),
(316,87,q),
(332,144,o),
(332,219,qs),
(332,260,o),
(321,363,o),
(315,412,qs),
(306,478,o),
(297,570,o),
(297,615,qs),
(297,653,o),
(299,672,q),
(283,672,o),
(249,676,qs),
(215,680,o),
(196,680,qs),
(168,680,o),
(145,672,q),
(131,665,o),
(107,656,o),
(103,655,q),
(79,668,o),
(79,685,qs),
(79,700,o),
(110,730,o),
(153,750,o),
(168,750,qs),
(210,748,o),
(279,748,qs),
(377,748,o),
(482,760,o),
(518,769,qs),
(525,770,o),
(536,773,o),
(541,773,qs),
(547,773,o),
(550,772,q),
(558,752,o),
(558,733,qs),
(558,711,o),
(523,687,o),
(450,676,o),
(382,672,q),
(386,631,o),
(404,533,o),
(414,487,qs),
(431,410,o),
(449,299,o),
(449,244,qs),
(449,180,o),
(433,120,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
29 1 5 0 1 76 15 1 1 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 5 0 4 0 5 4 128 3 2 2 0 0 1 95 0 1 1 28 77 0 4 4 6 97 0 6 6 27 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 0 4 0 5 4 128 0 1 3 2 2 0 5 1 0 105 0 4 4 6 97 0 6 6 27 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
3 1 0 2 5 2 0 114 0 5 4 2 5 4 126 0 1 0 2 0 1 2 105 0 4 4 6 97 0 6 6 27 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
38 20 26 18 41 76 23 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = J;
unicode = 74;
},
{
glyphname = K;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(113,-39,o),
(70,263,o),
(34,635,o),
(34,681,qs),
(34,689,o),
(68,734,o),
(109,772,o),
(119,772,qs),
(126,772,o),
(126,764,qs),
(140,611,o),
(157,479,qs),
(169,379,o),
(176,313,q),
(187,343,ls),
(226,457,o),
(323,671,o),
(384,728,qs),
(402,745,o),
(440,755,o),
(474,757,qs),
(503,759,l),
(456,734,o),
(377,621,o),
(325,507,o),
(295,429,qs),
(281,393,l),
(318,424,o),
(377,455,o),
(401,455,qs),
(432,455,o),
(482,403,o),
(503,347,qs),
(507,333,o),
(527,283,qs),
(551,227,o),
(577,142,o),
(577,105,qs),
(577,36,o),
(520,3,q),
(504,-9,o),
(490,-9,qs),
(462,-9,o),
(434,76,o),
(418,168,qs),
(408,229,o),
(390,309,o),
(377,338,qs),
(367,358,o),
(348,358,qs),
(327,358,o),
(275,320,o),
(237,285,qs),
(206,255,o),
(188,244,q),
(198,169,ls),
(206,113,o),
(210,88,q),
(210,50,o),
(163,-18,o),
(126,-31,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
33 1 0 2 46 5 2 3 1 0 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 3 4 133 0 3 2 3 133 0 2 0 2 133 0 0 1 0 133 0 1 1 30 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 3 4 133 0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 28 77 0 1 1 30 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 4 3 4 133 0 3 2 3 133 0 2 0 2 133 0 0 1 0 133 0 1 1 30 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
28 39 42 38 41 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = K;
unicode = 75;
},
{
glyphname = L;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,11,o),
(205,11,qs),
(181,11,o),
(165,43,o),
(165,77,qs),
(166,129,l),
(160,238,o),
(146,438,qs),
(133,613,o),
(133,642,qs),
(133,685,o),
(144,724,o),
(167,735,qs),
(207,754,o),
(223,754,qs),
(238,754,o),
(249,727,o),
(249,697,qs),
(249,598,o),
(257,390,qs),
(265,180,o),
(265,79,q),
(270,77,o),
(300,85,o),
(322,92,qs),
(366,107,o),
(402,118,qs),
(471,139,o),
(503,139,qs),
(538,139,o),
(538,117,qs),
(538,94,o),
(497,46,q),
(470,53,o),
(435,53,qs),
(380,53,o),
(282,30,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
28 1 1 2 3 1 3 0 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 2 0 2 1 0 128 0 0 3 2 0 3 126 0 2 2 28 77 0 3 3 30 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 1 2 133 0 1 0 1 133 0 0 3 0 133 0 3 3 30 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 2 1 2 133 0 1 0 1 133 0 0 3 0 133 0 3 3 118
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
43 44 36 32 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(586,108,o),
(526,59,o),
(512,59,qs),
(503,59,o),
(504,72,q),
(474,575,l),
(428,485,o),
(343,339,o),
(304,300,q),
(298,291,o),
(270,291,qs),
(258,291,o),
(240,293,o),
(237,294,q),
(232,299,o),
(209,359,o),
(196,394,qs),
(179,440,o),
(144,530,o),
(133,546,q),
(120,493,o),
(107,384,o),
(101,311,qs),
(98,281,o),
(93,220,o),
(89,190,q),
(79,159,o),
(38,129,o),
(0,116,q),
(0,152,o),
(8,424,o),
(11,545,qs),
(15,679,l),
(28,692,o),
(89,719,o),
(89,709,qs),
(89,575,l),
(103,603,o),
(131,640,o),
(151,650,q),
(157,654,o),
(194,655,o),
(201,655,qs),
(221,655,o),
(269,541,o),
(296,457,qs),
(311,413,l),
(362,483,o),
(439,608,o),
(474,680,q),
(479,688,o),
(522,703,o),
(540,703,qs),
(563,703,o),
(563,689,qs),
(565,621,o),
(582,477,o),
(596,378,qs),
(604,319,o),
(617,211,o),
(617,181,qs),
(617,141,o),
(607,131,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
29 1 1 0 56 42 25 15 4 2 1 57 33 2 3 2 3 76 0 1 0 2 0 1 2 128 0 2 3 0 2 3 126 0 0 1 3 0 89 0 0 0 3 97 0 3 0 3 81 60 58 52 50 56 40 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(207,118,o),
(176,74,o),
(138,42,o),
(128,42,qs),
(123,42,o),
(121,48,q),
(118,83,o),
(100,161,o),
(84,218,qs),
(64,286,o),
(44,381,o),
(44,424,qs),
(44,476,o),
(57,523,o),
(74,536,o),
(103,551,qs),
(129,565,o),
(129,461,q),
(152,490,o),
(181,490,qs),
(223,490,o),
(316,389,o),
(384,293,qs),
(438,219,o),
(456,197,q),
(421,306,o),
(384,484,o),
(384,576,qs),
(385,609,ls),
(389,660,o),
(443,704,o),
(501,715,q),
(478,630,o),
(478,554,qs),
(478,503,o),
(496,419,o),
(515,350,qs),
(542,262,o),
(552,205,q),
(555,195,o),
(555,184,qs),
(555,159,o),
(524,116,o),
(477,91,o),
(455,91,qs),
(433,91,o),
(420,104,q),
(389,126,o),
(341,189,o),
(305,245,qs),
(261,316,o),
(189,401,o),
(138,426,q),
(137,398,o),
(156,325,o),
(176,263,qs),
(192,216,o),
(208,155,o),
(207,135,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
40 33 5 3 0 1 1 76 29 26 2 1 74 0 0 1 2 1 0 2 128 0 2 2 132 0 1 1 29 1 78 55 54 39 37 44 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = N;
unicode = 78;
},
{
glyphname = Ntilde;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(104,119,o),
(73,75,o),
(32,42,o),
(21,42,qs),
(16,42,o),
(14,48,q),
(4,127,o),
(-1,298,o),
(-1,422,qs),
(-1,456,o),
(15,489,o),
(8,485,o),
(59,512,qs),
(67,516,o),
(74,516,qs),
(84,516,o),
(89,498,o),
(89,481,q),
(110,508,o),
(139,508,qs),
(184,508,o),
(290,399,o),
(368,297,qs),
(429,216,o),
(463,181,q),
(473,282,o),
(478,471,o),
(478,616,qs),
(478,653,o),
(515,740,o),
(577,803,o),
(613,810,q),
(601,742,o),
(590,586,o),
(585,465,qs),
(577,276,o),
(568,189,q),
(568,161,o),
(528,101,o),
(461,60,o),
(423,60,qs),
(413,61,o),
(403,62,q),
(354,92,o),
(271,186,o),
(212,265,qs),
(175,315,o),
(124,379,o),
(97,406,q),
(97,358,o),
(101,252,qs),
(104,136,ls)
);
},
{
closed = 1;
nodes = (
(55,631,o),
(26,616,o),
(4,600,o),
(-1,600,q),
(-5,605,o),
(-5,614,qs),
(-5,635,o),
(44,680,o),
(81,686,qs),
(217,715,o),
(303,749,qs),
(329,758,o),
(355,765,o),
(373,765,q),
(381,718,o),
(247,667,o),
(139,648,qs),
(84,637,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
33 26 14 2 4 0 1 1 76 19 1 4 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 4 1 4 133 2 1 1 0 1 133 0 0 3 0 133 0 3 3 118
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 4 2 4 133 0 2 1 2 133 0 1 0 1 133 0 0 3 0 133 0 3 3 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
56 55 48 47 36 35 32 30 26 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = O;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,30,o),
(168,30,qs),
(85,30,o),
(5,140,o),
(5,230,qs),
(5,305,o),
(57,471,o),
(148,611,o),
(203,648,q),
(243,682,o),
(337,717,o),
(387,717,qs),
(445,717,o),
(555,671,o),
(597,629,qs),
(618,610,o),
(651,558,o),
(651,536,qs),
(651,521,o),
(641,511,qs),
(602,473,o),
(588,473,qs),
(581,473,o),
(572,484,o),
(563,500,qs),
(552,522,o),
(538,541,q),
(446,646,o),
(350,646,qs),
(282,646,o),
(169,544,o),
(104,387,o),
(104,311,qs),
(104,230,o),
(184,127,o),
(264,127,q),
(321,131,o),
(406,198,o),
(451,299,o),
(451,354,qs),
(451,417,o),
(390,521,o),
(330,544,q),
(323,544,o),
(323,551,o),
(330,568,o),
(330,573,q),
(357,597,o),
(390,597,qs),
(425,597,o),
(490,541,o),
(530,445,o),
(530,389,qs),
(530,297,o),
(413,120,o),
(286,53,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 3 2 0 3 128 0 3 1 2 3 1 126 0 1 0 5 1 5 101 0 2 2 4 97 0 4 4 28 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 0 2 3 2 0 3 128 0 3 1 2 3 1 126 0 4 0 2 0 4 2 105 0 1 5 5 1 89 0 1 1 5 97 0 5 1 5 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
40 40 37 37 43 37 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = O;
unicode = 79;
},
{
glyphname = Oacute;
layers = (
{
.lastUpdate = 753955765.465;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,-30,o),
(168,-30,qs),
(85,-30,o),
(5,80,o),
(5,170,qs),
(5,245,o),
(57,411,o),
(148,551,o),
(203,588,q),
(243,622,o),
(337,657,o),
(387,657,qs),
(445,657,o),
(555,611,o),
(597,569,qs),
(618,550,o),
(651,498,o),
(651,476,qs),
(651,461,o),
(641,451,qs),
(602,413,o),
(588,413,qs),
(581,413,o),
(572,424,o),
(563,440,qs),
(552,462,o),
(538,481,q),
(446,586,o),
(350,586,qs),
(282,586,o),
(169,484,o),
(104,327,o),
(104,251,qs),
(104,170,o),
(184,67,o),
(264,67,q),
(321,71,o),
(406,138,o),
(451,239,o),
(451,294,qs),
(451,357,o),
(390,461,o),
(330,484,q),
(323,484,o),
(323,491,o),
(330,508,o),
(330,513,q),
(357,537,o),
(390,537,qs),
(425,537,o),
(490,481,o),
(530,385,o),
(530,329,qs),
(530,237,o),
(413,60,o),
(286,-7,q)
);
},
{
closed = 1;
nodes = (
(540,816,o),
(486,782,o),
(442,738,o),
(442,722,qs),
(442,721,ls),
(443,706,o),
(464,706,qs),
(487,706,o),
(561,736,o),
(572,745,qs),
(587,756,o),
(587,771,qs),
(587,787,o),
(560,816,o),
(549,816,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
8 1 7 6 7 133 0 6 4 4 6 112 0 0 2 3 2 0 3 128 0 3 1 2 3 1 126 0 4 0 2 0 4 2 106 0 1 1 5 97 0 5 5 27 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
8 1 7 6 7 133 0 6 4 6 133 0 0 2 3 2 0 3 128 0 3 1 2 3 1 126 0 4 0 2 0 4 2 106 0 1 1 5 97 0 5 5 27 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
8 1 7 6 7 133 0 6 4 6 133 0 0 2 3 2 0 3 128 0 3 1 2 3 1 126 0 4 0 2 0 4 2 106 0 1 5 5 1 89 0 1 1 5 97 0 5 1 5 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
56 56 56 70 56 69 40 40 40 37 37 43 37 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,-31,o),
(168,-31,qs),
(85,-31,o),
(5,79,o),
(5,169,qs),
(5,244,o),
(57,410,o),
(148,550,o),
(203,587,q),
(243,621,o),
(337,656,o),
(387,656,qs),
(445,656,o),
(555,610,o),
(597,568,qs),
(618,549,o),
(651,497,o),
(651,475,qs),
(651,460,o),
(641,450,qs),
(602,412,o),
(588,412,qs),
(581,412,o),
(572,423,o),
(563,439,qs),
(552,461,o),
(538,480,q),
(446,585,o),
(350,585,qs),
(282,585,o),
(169,483,o),
(104,326,o),
(104,250,qs),
(104,169,o),
(184,66,o),
(264,66,q),
(321,70,o),
(406,137,o),
(451,238,o),
(451,293,qs),
(451,356,o),
(390,460,o),
(330,483,q),
(323,483,o),
(323,490,o),
(330,507,o),
(330,512,q),
(357,536,o),
(390,536,qs),
(425,536,o),
(490,480,o),
(530,384,o),
(530,328,qs),
(530,236,o),
(413,59,o),
(286,-8,q)
);
},
{
closed = 1;
nodes = (
(159,698,o),
(291,805,o),
(297,804,qs),
(337,801,o),
(422,775,o),
(461,755,qs),
(469,750,o),
(488,739,o),
(488,731,qs),
(487,724,ls),
(485,716,o),
(476,698,o),
(472,696,q),
(462,693,o),
(451,693,qs),
(435,693,o),
(401,704,o),
(373,716,qs),
(356,723,o),
(324,734,o),
(313,734,qs),
(307,734,ls),
(302,733,o),
(283,715,o),
(276,709,qs),
(262,698,o),
(193,651,o),
(185,651,qs),
(184,651,l),
(170,657,o),
(137,679,o),
(142,683,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
77 1 8 7 1 76 84 1 7 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 8 7 133 0 8 4 8 133 0 6 4 2 4 6 2 128 0 0 2 3 2 0 3 128 0 3 1 2 3 1 126 0 4 0 2 0 4 2 105 0 1 1 5 97 0 5 5 27 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 7 8 7 133 0 8 4 8 133 0 6 4 2 4 6 2 128 0 0 2 3 2 0 3 128 0 3 1 2 3 1 126 0 4 0 2 0 4 2 105 0 1 5 5 1 89 0 1 1 5 97 0 5 1 5 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 22 36 40 40 37 37 43 37 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Odieresis;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,-26,o),
(168,-26,qs),
(85,-26,o),
(5,84,o),
(5,174,qs),
(5,249,o),
(57,415,o),
(148,555,o),
(203,592,q),
(243,626,o),
(337,661,o),
(387,661,qs),
(445,661,o),
(555,615,o),
(597,573,qs),
(618,554,o),
(651,502,o),
(651,480,qs),
(651,465,o),
(641,455,qs),
(602,417,o),
(588,417,qs),
(581,417,o),
(572,428,o),
(563,444,qs),
(552,466,o),
(538,485,q),
(446,590,o),
(350,590,qs),
(282,590,o),
(169,488,o),
(104,331,o),
(104,255,qs),
(104,174,o),
(184,71,o),
(264,71,q),
(321,75,o),
(406,142,o),
(451,243,o),
(451,298,qs),
(451,361,o),
(390,465,o),
(330,488,q),
(323,488,o),
(323,495,o),
(330,512,o),
(330,517,q),
(357,541,o),
(390,541,qs),
(425,541,o),
(490,485,o),
(530,389,o),
(530,333,qs),
(530,241,o),
(413,64,o),
(286,-3,q)
);
},
{
closed = 1;
nodes = (
(218,768,o),
(195,771,q),
(186,774,o),
(174,774,qs),
(148,774,o),
(139,758,qs),
(132,747,o),
(132,736,qs),
(132,719,o),
(162,697,o),
(182,697,qs),
(199,697,o),
(229,719,o),
(229,735,qs),
(229,742,o),
(226,749,qs)
);
},
{
closed = 1;
nodes = (
(431,781,o),
(387,781,qs),
(366,781,o),
(331,754,o),
(331,737,qs),
(331,728,o),
(337,719,qs),
(340,714,o),
(355,705,o),
(362,702,qs),
(373,696,o),
(382,696,qs),
(403,696,o),
(431,737,o),
(431,757,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
9 1 7 6 7 133 8 1 6 4 4 6 112 0 0 2 3 2 0 3 128 0 3 1 2 3 1 126 0 4 0 2 0 4 2 106 0 1 1 5 97 0 5 5 27 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 9 7 9 133 0 7 6 7 133 8 1 6 4 6 133 0 0 2 3 2 0 3 128 0 3 1 2 3 1 126 0 4 0 2 0 4 2 106 0 1 1 5 97 0 5 5 27 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
85 83 37 37 37 40 40 37 37 43 37 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ograve;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,-21,o),
(168,-21,qs),
(85,-21,o),
(5,89,o),
(5,179,qs),
(5,254,o),
(57,420,o),
(148,560,o),
(203,597,q),
(243,631,o),
(337,666,o),
(387,666,qs),
(445,666,o),
(555,620,o),
(597,578,qs),
(618,559,o),
(651,507,o),
(651,485,qs),
(651,470,o),
(641,460,qs),
(602,422,o),
(588,422,qs),
(581,422,o),
(572,433,o),
(563,449,qs),
(552,471,o),
(538,490,q),
(446,595,o),
(350,595,qs),
(282,595,o),
(169,493,o),
(104,336,o),
(104,260,qs),
(104,179,o),
(184,76,o),
(264,76,q),
(321,80,o),
(406,147,o),
(451,248,o),
(451,303,qs),
(451,366,o),
(390,470,o),
(330,493,q),
(323,493,o),
(323,500,o),
(330,517,o),
(330,522,q),
(357,546,o),
(390,546,qs),
(425,546,o),
(490,490,o),
(530,394,o),
(530,338,qs),
(530,246,o),
(413,69,o),
(286,2,q)
);
},
{
closed = 1;
nodes = (
(251,709,o),
(224,748,o),
(211,757,qs),
(189,774,o),
(156,790,o),
(142,790,qs),
(128,790,o),
(101,774,o),
(84,755,qs),
(72,742,o),
(60,722,o),
(60,710,qs),
(60,704,o),
(61,701,qs),
(62,695,o),
(80,686,o),
(110,677,o),
(113,675,q),
(141,663,o),
(176,652,o),
(189,652,qs),
(204,652,o),
(219,658,o),
(234,677,o),
(247,701,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 7 4 7 133 0 6 4 2 4 6 2 128 0 0 2 3 2 0 3 128 0 3 1 2 3 1 126 0 4 0 2 0 4 2 105 0 1 1 5 98 0 5 5 27 5 78 45 36 40 40 37 37 43 37 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oslash;
layers = (
{
layerId = m01;
width = 600;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Otilde;
layers = (
{
layerId = m01;
width = 600;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = P;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,-66,o),
(128,-46,qs),
(128,-37,o),
(134,-6,o),
(137,9,qs),
(145,47,o),
(145,56,q),
(129,119,l),
(90,96,o),
(72,96,qs),
(59,96,o),
(70,125,o),
(106,166,o),
(129,183,q),
(113,278,o),
(87,405,o),
(66,468,q),
(66,479,o),
(82,501,o),
(97,516,q),
(123,536,o),
(138,536,qs),
(151,536,o),
(164,507,o),
(172,474,qs),
(177,453,l),
(212,594,o),
(298,776,o),
(385,860,o),
(423,860,qs),
(464,860,o),
(516,774,o),
(516,703,qs),
(516,593,o),
(380,329,o),
(236,210,q),
(239,183,o),
(245,126,o),
(245,104,qs),
(245,45,o),
(200,-37,o),
(141,-59,q)
);
},
{
closed = 1;
nodes = (
(206,453,o),
(206,404,qs),
(206,379,o),
(215,330,o),
(227,278,q),
(270,321,o),
(368,451,o),
(439,598,o),
(439,659,qs),
(439,731,o),
(383,770,q),
(369,784,o),
(306,689,o),
(243,555,o),
(231,522,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
51 33 27 24 15 5 2 1 1 76 34 1 2 73 0 0 1 0 133 0 1 2 1 133 0 2 2 118 42 38 42 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = P;
unicode = 80;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
width = 600;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = Q;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(542,-86,o),
(495,-133,o),
(474,-133,qs),
(464,-133,o),
(457,-126,q),
(438,-99,o),
(426,-76,o),
(418,-51,qs),
(411,-33,o),
(391,22,o),
(375,61,q),
(305,40,o),
(240,40,qs),
(161,40,o),
(51,106,o),
(-5,218,o),
(-5,289,qs),
(-5,386,o),
(98,589,o),
(196,666,qs),
(235,698,o),
(364,745,o),
(421,745,qs),
(478,745,o),
(547,691,o),
(547,633,qs),
(547,610,o),
(541,581,q),
(599,501,o),
(599,398,qs),
(599,318,o),
(529,169,o),
(465,117,q),
(472,103,o),
(488,78,o),
(495,67,qs),
(520,29,o),
(542,-25,o),
(542,-66,qs)
);
},
{
closed = 1;
nodes = (
(192,153,o),
(294,131,o),
(336,131,q),
(324,158,o),
(287,211,o),
(256,251,qs),
(220,300,l),
(220,310,o),
(275,356,o),
(285,356,q),
(349,284,o),
(418,202,o),
(453,145,q),
(495,167,o),
(536,264,o),
(536,328,qs),
(536,406,o),
(480,565,o),
(383,669,o),
(325,669,qs),
(291,669,o),
(260,652,q),
(208,634,o),
(122,538,o),
(72,411,o),
(72,348,qs),
(72,293,o),
(113,202,o),
(156,173,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
10 1 4 3 60 54 2 5 4 27 5 2 1 5 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 4 3 5 3 4 5 128 0 2 1 2 134 0 5 0 1 2 5 1 106 0 3 3 0 97 0 0 0 28 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 4 3 5 3 4 5 128 0 2 1 2 134 0 0 0 3 4 0 3 105 0 5 1 1 5 89 0 5 5 1 98 0 1 5 1 82
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
22 25 42 40 40 46 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(477,-42,o),
(408,0,o),
(357,58,o),
(323,106,qs),
(290,153,o),
(240,210,o),
(172,254,o),
(129,261,q),
(129,197,o),
(121,153,o),
(90,132,o),
(42,116,q),
(24,116,o),
(24,176,qs),
(24,209,o),
(27,234,qs),
(28,261,ls),
(30,293,o),
(30,322,qs),
(30,383,o),
(20,571,o),
(16,637,qs),
(13,681,ls),
(13,697,o),
(61,737,o),
(80,737,qs),
(95,737,o),
(100,725,q),
(100,609,l),
(136,670,o),
(233,731,o),
(281,731,qs),
(327,731,o),
(388,677,o),
(388,632,qs),
(388,571,o),
(264,416,o),
(129,333,q),
(194,333,o),
(292,292,o),
(361,233,o),
(408,183,qs),
(462,125,o),
(549,57,o),
(609,42,q),
(625,42,o),
(625,33,qs),
(625,23,o),
(584,-15,o),
(533,-45,o),
(522,-45,qs)
);
},
{
closed = 1;
nodes = (
(153,633,o),
(120,603,o),
(107,565,o),
(107,535,qs),
(107,509,o),
(110,465,qs),
(114,417,o),
(115,377,q),
(162,393,o),
(244,478,o),
(294,579,o),
(294,616,qs),
(294,640,o),
(271,668,o),
(247,668,qs),
(223,668,o),
(187,652,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
22 1 6 2 61 59 21 3 1 6 42 34 2 4 1 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 6 4 6 1 4 128 0 4 0 6 4 0 126 0 0 5 6 0 5 126 7 1 5 5 132 0 6 6 2 97 3 1 2 2 28 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 6 4 6 1 4 128 0 4 0 6 4 0 126 0 0 5 6 0 5 126 7 1 5 5 132 0 3 3 28 77 0 6 6 2 97 0 2 2 28 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 53 51 0 50 0 49 28 36 37 22 20 8 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = R;
unicode = 82;
},
{
glyphname = S;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(375,-4,o),
(366,-4,qs),
(320,-4,o),
(229,32,o),
(150,83,o),
(89,127,qs),
(50,155,l),
(13,176,o),
(-23,210,o),
(-23,226,qs),
(-23,242,o),
(12,275,o),
(50,295,q),
(89,283,o),
(179,229,o),
(245,182,qs),
(322,128,o),
(415,75,o),
(450,75,qs),
(484,75,o),
(503,108,qs),
(522,142,o),
(522,167,qs),
(522,200,o),
(466,247,o),
(381,278,o),
(309,298,qs),
(228,321,o),
(127,359,o),
(48,420,o),
(38,465,qs),
(30,496,o),
(30,531,qs),
(30,608,o),
(115,732,o),
(248,802,o),
(317,802,qs),
(382,802,o),
(484,734,o),
(506,666,q),
(506,659,o),
(479,629,o),
(443,605,o),
(429,605,q),
(411,659,o),
(299,720,o),
(239,720,qs),
(207,720,o),
(157,702,o),
(144,684,qs),
(104,621,o),
(104,574,qs),
(104,528,o),
(176,465,o),
(281,428,o),
(366,405,qs),
(434,387,o),
(518,360,o),
(549,341,qs),
(618,303,o),
(618,238,qs),
(618,190,o),
(549,86,o),
(443,9,o),
(393,-2,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
51 1 3 1 1 76 0 1 0 3 0 1 3 128 0 3 4 0 3 4 126 0 0 0 2 97 0 2 2 26 77 0 4 4 30 4 78 63 61 46 44 28 26 21 20 18 16 5 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = S;
unicode = 83;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = T;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(269,-33,o),
(256,-29,o),
(256,-20,q),
(229,38,o),
(203,289,o),
(203,432,qs),
(203,574,o),
(213,662,q),
(189,662,o),
(154,669,qs),
(116,675,o),
(95,675,q),
(58,671,ls),
(39,668,o),
(27,668,qs),
(11,668,o),
(0,675,q),
(10,717,o),
(82,749,o),
(136,749,qs),
(163,749,o),
(211,745,qs),
(243,742,o),
(266,742,q),
(639,715,l),
(645,709,o),
(645,701,qs),
(645,690,o),
(623,665,o),
(594,642,o),
(586,635,qs),
(578,628,o),
(542,617,o),
(526,617,qs),
(511,617,o),
(506,622,q),
(479,629,o),
(400,635,qs),
(334,640,o),
(293,648,q),
(293,469,o),
(312,188,o),
(349,74,qs),
(352,65,o),
(352,57,qs),
(352,34,o),
(313,-13,o),
(283,-33,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
30 20 2 3 1 7 1 0 3 44 2 2 6 0 3 76
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
20 1 4 1 7 1 0 3 44 2 2 6 0 3 76 30 1 4 1 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
20 1 4 1 7 1 0 5 44 2 2 6 0 3 76 30 1 4 1 75
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 0 3 6 3 0 6 128 5 4 2 3 3 1 97 2 1 1 1 28 77 0 6 6 27 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 0 3 6 3 0 6 128 0 6 6 132 5 4 2 3 3 1 97 2 1 1 1 28 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
5 1 3 4 0 4 3 0 128 0 0 6 4 0 6 126 0 6 6 132 0 2 0 4 3 2 4 105 0 1 1 28 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 3 4 5 4 3 5 128 0 5 0 4 5 0 126 0 0 6 4 0 6 126 0 6 6 132 0 2 0 4 3 2 4 105 0 1 1 28 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
23 18 18 35 34 25 44 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = T;
unicode = 84;
},
{
glyphname = U;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-37,o),
(76,148,o),
(10,422,o),
(10,558,qs),
(10,622,o),
(18,676,q),
(33,719,o),
(97,792,o),
(132,792,qs),
(140,792,o),
(149,789,q),
(156,767,o),
(168,741,qs),
(178,715,o),
(185,693,o),
(185,678,qs),
(185,638,o),
(149,563,q),
(143,556,o),
(143,529,qs),
(143,466,o),
(208,230,o),
(307,53,o),
(356,57,q),
(401,64,o),
(468,192,o),
(503,386,o),
(503,491,qs),
(503,647,o),
(468,751,q),
(463,756,o),
(463,763,qs),
(463,776,o),
(490,809,o),
(532,832,o),
(552,832,qs),
(581,832,o),
(618,776,o),
(618,713,qs),
(618,532,o),
(583,213,o),
(452,-37,o),
(323,-37,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
10 1 2 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 0 133 0 1 1 26 77 3 1 2 2 27 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 0 133 3 1 2 1 2 134 0 1 1 26 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 42 0 41 34 32 37 4 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,-44,o),
(79,139,o),
(10,419,o),
(10,558,qs),
(10,622,o),
(18,676,q),
(25,702,ls),
(29,720,o),
(40,733,o),
(58,733,qs),
(82,733,o),
(136,723,q),
(163,723,o),
(163,698,qs),
(163,686,o),
(151,647,o),
(144,627,qs),
(129,587,o),
(123,563,q),
(119,523,o),
(119,502,qs),
(119,397,o),
(191,186,o),
(302,53,o),
(356,57,q),
(401,64,o),
(468,173,o),
(503,341,o),
(503,434,qs),
(503,572,o),
(468,676,q),
(463,681,o),
(463,688,qs),
(463,701,o),
(490,734,o),
(532,757,o),
(552,757,qs),
(581,757,o),
(618,701,o),
(618,638,qs),
(618,468,o),
(585,188,o),
(461,-29,o),
(337,-37,qs)
);
},
{
closed = 1;
nodes = (
(378,939,o),
(336,866,o),
(308,779,o),
(309,779,q),
(313,776,o),
(329,765,o),
(331,765,qs),
(351,765,o),
(421,819,o),
(476,887,o),
(476,908,q),
(475,915,l),
(470,930,o),
(438,947,o),
(421,947,qs),
(414,947,o),
(406,945,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
48 1 0 4 10 1 3 1 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
48 1 5 4 10 1 3 1 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 0 4 133 5 1 0 1 0 133 2 1 1 1 28 77 6 1 3 3 27 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 0 4 133 5 1 0 0 28 77 2 1 1 1 28 77 6 1 3 3 27 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 0 4 133 5 1 0 1 0 133 2 1 1 1 28 77 6 1 3 3 27 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 0 4 133 5 1 0 2 0 133 6 1 3 1 3 134 0 2 2 28 77 0 1 1 28 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 4 5 4 133 0 5 0 5 133 0 0 2 0 133 6 1 3 1 3 134 0 2 2 28 77 0 1 1 28 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 5 4 133 0 5 0 5 133 0 0 2 0 133 0 1 2 3 2 1 3 128 6 1 3 3 132 0 2 2 28 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 53 52 46 44 0 43 0 42 34 32 31 30 37 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,-44,o),
(79,116,o),
(10,366,o),
(10,496,qs),
(10,556,o),
(18,610,q),
(25,636,ls),
(29,654,o),
(40,667,o),
(58,667,qs),
(82,667,o),
(136,657,q),
(163,657,o),
(163,632,qs),
(163,620,o),
(151,581,o),
(144,561,qs),
(129,521,o),
(123,497,q),
(119,457,o),
(119,437,qs),
(119,338,o),
(190,159,o),
(301,53,o),
(356,57,q),
(401,64,o),
(468,157,o),
(503,301,o),
(503,384,qs),
(503,506,o),
(468,610,q),
(463,615,o),
(463,622,qs),
(463,635,o),
(490,668,o),
(532,691,o),
(552,691,qs),
(581,691,o),
(618,635,o),
(618,572,qs),
(618,408,o),
(585,159,o),
(461,-29,o),
(337,-37,qs)
);
},
{
closed = 1;
nodes = (
(136,774,o),
(191,824,qs),
(210,842,l),
(299,938,o),
(318,943,qs),
(321,944,o),
(327,944,qs),
(350,944,o),
(396,921,q),
(426,902,ls),
(452,884,o),
(466,878,qs),
(503,861,o),
(552,836,o),
(557,826,q),
(557,824,ls),
(557,813,o),
(515,741,o),
(508,742,qs),
(462,751,o),
(348,812,qs),
(323,825,l),
(316,827,l),
(314,827,l),
(301,818,o),
(268,788,qs),
(244,767,o),
(198,729,o),
(195,730,q),
(186,735,o),
(145,759,o),
(136,763,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
75 59 56 51 46 5 0 4 10 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 0 4 133 0 0 1 0 133 2 1 1 3 1 133 5 1 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 4 0 4 133 0 0 2 0 133 0 2 1 2 133 0 1 3 1 133 5 1 3 3 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 68 67 0 43 0 42 34 32 31 30 37 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,-44,o),
(79,139,o),
(10,419,o),
(10,558,qs),
(10,622,o),
(18,676,q),
(25,702,ls),
(29,720,o),
(40,733,o),
(58,733,qs),
(82,733,o),
(136,723,q),
(163,723,o),
(163,698,qs),
(163,686,o),
(151,647,o),
(144,627,qs),
(129,587,o),
(123,563,q),
(119,523,o),
(119,502,qs),
(119,397,o),
(191,186,o),
(302,53,o),
(356,57,q),
(401,64,o),
(468,173,o),
(503,341,o),
(503,434,qs),
(503,572,o),
(468,676,q),
(463,681,o),
(463,688,qs),
(463,701,o),
(490,734,o),
(532,757,o),
(552,757,qs),
(581,757,o),
(618,701,o),
(618,638,qs),
(618,468,o),
(585,188,o),
(461,-29,o),
(337,-37,qs)
);
},
{
closed = 1;
nodes = (
(266,829,ls),
(266,845,o),
(238,862,o),
(218,862,qs),
(192,862,o),
(152,835,o),
(152,811,qs),
(152,803,l),
(156,782,o),
(182,762,o),
(201,762,qs),
(217,762,o),
(247,785,o),
(266,815,o),
(266,825,qs)
);
},
{
closed = 1;
nodes = (
(431,863,o),
(405,863,qs),
(383,863,o),
(344,826,o),
(344,803,qs),
(344,794,o),
(346,789,qs),
(348,781,o),
(363,774,qs),
(376,766,o),
(389,766,qs),
(413,766,o),
(454,800,o),
(454,817,qs),
(454,820,o),
(447,832,o),
(444,836,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
70 50 2 0 5 10 1 3 1 2 76
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
70 50 2 6 5 10 1 3 1 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
70 50 2 4 5 10 1 3 1 2 76
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
7 1 5 0 5 133 6 4 2 0 1 0 133 2 1 1 1 28 77 8 1 3 3 27 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
7 1 5 0 5 133 6 4 2 0 0 28 77 2 1 1 1 28 77 8 1 3 3 27 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
7 1 5 0 5 133 6 4 2 0 1 0 133 2 1 1 1 28 77 8 1 3 3 27 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
7 1 5 0 5 133 6 4 2 0 2 0 133 8 1 3 1 3 134 0 2 2 28 77 0 1 1 28 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
7 1 5 6 5 133 0 6 0 6 133 4 1 0 2 0 133 8 1 3 1 3 134 0 2 2 28 77 0 1 1 28 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
7 1 5 4 5 133 6 1 4 0 4 133 0 0 2 0 133 8 1 3 1 3 134 0 2 2 28 77 0 1 1 28 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
7 1 5 4 5 133 6 1 4 0 4 133 0 0 2 0 133 0 1 2 3 2 1 3 128 8 1 3 3 132 0 2 2 28 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 74 72 65 63 55 53 48 46 0 43 0 42 34 32 31 30 37 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Ugrave;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,-44,o),
(79,139,o),
(10,419,o),
(10,558,qs),
(10,622,o),
(18,676,q),
(25,702,ls),
(29,720,o),
(40,733,o),
(58,733,qs),
(82,733,o),
(136,723,q),
(163,723,o),
(163,698,qs),
(163,686,o),
(151,647,o),
(144,627,qs),
(129,587,o),
(123,563,q),
(119,523,o),
(119,502,qs),
(119,397,o),
(191,186,o),
(302,53,o),
(356,57,q),
(401,64,o),
(468,173,o),
(503,341,o),
(503,434,qs),
(503,572,o),
(468,676,q),
(464,682,o),
(479,688,o),
(494,688,qs),
(531,688,o),
(615,660,o),
(618,638,q),
(618,468,o),
(585,188,o),
(461,-29,o),
(337,-37,qs)
);
},
{
closed = 1;
nodes = (
(151,859,o),
(204,794,o),
(266,744,o),
(275,737,q),
(279,739,o),
(293,749,o),
(297,753,q),
(299,761,o),
(299,768,qs),
(299,793,o),
(272,870,o),
(232,933,o),
(215,940,qs),
(213,941,o),
(207,941,qs),
(187,941,o),
(156,906,o),
(155,887,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
58 49 2 1 4 3 1 3 0 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
58 49 2 2 4 3 1 3 0 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 1 4 133 0 0 1 3 1 0 3 128 2 1 1 1 28 77 5 1 3 3 27 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 2 4 133 0 0 1 3 1 0 3 128 5 1 3 3 132 0 2 2 28 77 0 1 1 28 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 2 4 133 0 1 2 0 2 1 0 128 0 0 3 2 0 3 126 5 1 3 3 132 0 2 2 28 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 43 42 0 40 0 39 31 29 28 27 37 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = V;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,-8,o),
(248,-8,qs),
(189,-8,o),
(143,115,q),
(50,323,o),
(-1,546,q),
(-1,567,o),
(43,613,o),
(65,613,qs),
(73,613,o),
(79,610,q),
(102,558,o),
(143,445,qs),
(188,320,o),
(259,156,o),
(302,99,q),
(319,139,o),
(344,248,o),
(359,331,qs),
(383,462,o),
(429,630,o),
(518,765,o),
(589,785,q),
(606,779,o),
(606,765,qs),
(606,747,o),
(559,706,o),
(541,706,q),
(517,649,o),
(482,515,o),
(461,419,qs),
(432,292,o),
(385,132,o),
(350,67,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
27 17 2 2 1 1 76 0 0 1 0 133 0 1 2 1 133 0 2 2 30 2 78 32 30 25 23 21 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(201,38,o),
(148,-15,o),
(124,-15,qs),
(97,-15,o),
(85,18,qs),
(72,48,o),
(13,244,o),
(-34,448,o),
(-34,504,qs),
(-34,539,o),
(-24,549,q),
(-15,567,o),
(22,596,o),
(41,596,qs),
(59,596,o),
(70,581,qs),
(87,556,o),
(112,500,o),
(112,479,qs),
(112,441,o),
(70,440,q),
(85,392,o),
(106,309,qs),
(128,219,o),
(148,159,q),
(161,242,o),
(184,339,o),
(240,425,o),
(288,425,qs),
(306,425,o),
(348,348,o),
(384,267,qs),
(431,156,o),
(460,112,q),
(481,195,o),
(495,373,o),
(498,502,qs),
(502,638,o),
(507,705,q),
(507,730,o),
(534,774,o),
(572,800,o),
(586,800,qs),
(601,800,o),
(601,784,qs),
(601,753,ls),
(597,688,o),
(595,557,qs),
(594,442,o),
(585,291,o),
(555,134,o),
(523,65,q),
(515,44,o),
(440,-1,o),
(413,-1,qs),
(403,-1,o),
(397,2,q),
(376,17,o),
(316,118,o),
(265,235,o),
(257,268,q),
(245,201,ls),
(238,153,o),
(225,94,o),
(210,65,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
25 1 4 1 39 30 3 3 0 2 2 76 0 4 1 3 1 4 3 128 0 3 2 1 3 2 126 0 2 0 1 2 0 126 0 1 1 26 77 0 0 0 30 77 0 5 5 27 5 78 41 37 23 44 42 40 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(19,1,o),
(6,5,o),
(6,8,qs),
(6,16,o),
(45,49,qs),
(82,83,ls),
(126,123,o),
(201,237,o),
(562,963,o),
(258,355,q),
(237,381,ls),
(164,469,o),
(72,586,o),
(34,645,qs),
(31,650,o),
(31,655,qs),
(31,675,o),
(90,708,o),
(114,708,q),
(142,675,o),
(303,488,o),
(323,468,q),
(338,489,o),
(389,570,qs),
(445,659,o),
(526,766,o),
(579,805,q),
(618,809,l),
(644,809,o),
(644,789,q),
(636,780,o),
(612,755,o),
(583,737,o),
(566,737,qs),
(558,737,o),
(547,740,q),
(516,686,o),
(454,586,qs),
(388,478,o),
(355,420,q),
(490,283,o),
(563,227,q),
(593,245,o),
(606,245,qs),
(613,245,o),
(621,236,o),
(621,229,qs),
(621,212,o),
(589,162,o),
(538,124,o),
(512,124,qs),
(496,124,o),
(483,131,qs),
(451,147,o),
(379,215,o),
(330,268,qs),
(291,308,l),
(284,297,o),
(265,256,o),
(255,235,qs),
(224,166,o),
(171,70,o),
(94,-1,o),
(46,-1,qs),
(35,-1,o),
(30,0,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */
35 1 3 4 55 49 43 25 8 5 2 5 23 18 2 1 2 3 76 0 3 4 5 4 3 5 128 0 2 5 1 5 2 1 128 0 1 0 5 1 0 126 0 4 4 26 77 0 5 5 0 97 6 1 0 0 30 0 78 2 0 47 46 37 36 32 30 22 20 15 13 0 65 2 65 7 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,-31,o),
(199,-31,qs),
(190,-31,o),
(190,-17,qs),
(190,9,o),
(242,132,o),
(292,239,qs),
(359,379,o),
(359,398,q),
(308,405,o),
(141,548,o),
(0,716,o),
(-6,747,q),
(20,784,o),
(54,816,o),
(67,816,qs),
(81,816,o),
(107,786,o),
(129,750,qs),
(160,700,o),
(220,619,o),
(322,524,o),
(393,482,q),
(415,515,o),
(444,604,o),
(461,669,qs),
(476,730,o),
(497,786,o),
(512,789,q),
(529,789,o),
(574,775,o),
(574,764,q),
(561,678,o),
(502,498,o),
(431,336,o),
(372,211,qs),
(327,116,ls),
(317,96,o),
(288,37,o),
(250,-10,o),
(227,-17,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
31 27 17 8 4 2 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 1 26 77 0 0 0 26 77 0 2 2 27 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 0 0 0 26 77 0 2 2 27 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 0 2 0 2 134 0 0 0 26 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 1 133 0 0 2 0 133 0 2 2 118
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
44 44 26 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Yacute;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,-31,o),
(199,-31,qs),
(190,-31,o),
(190,-17,qs),
(190,9,o),
(242,132,o),
(292,239,qs),
(359,379,o),
(359,398,q),
(308,405,o),
(141,548,o),
(0,716,o),
(-6,747,q),
(20,784,o),
(54,816,o),
(67,816,qs),
(81,816,o),
(107,786,o),
(129,750,qs),
(160,700,o),
(220,619,o),
(322,524,o),
(393,482,q),
(415,515,o),
(444,604,o),
(461,669,qs),
(476,730,o),
(497,786,o),
(512,789,q),
(529,789,o),
(574,775,o),
(574,764,q),
(561,678,o),
(502,498,o),
(431,336,o),
(372,211,qs),
(327,116,ls),
(317,96,o),
(288,37,o),
(250,-10,o),
(227,-17,q)
);
},
{
closed = 1;
nodes = (
(344,877,o),
(304,805,o),
(300,764,q),
(314,757,l),
(316,755,o),
(319,755,qs),
(331,755,o),
(464,849,o),
(469,860,q),
(471,868,o),
(471,873,qs),
(471,892,o),
(439,913,o),
(417,913,qs),
(389,913,o),
(373,900,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
45 1 1 3 53 8 2 4 0 31 27 17 3 2 4 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 1 3 133 0 1 1 26 77 0 0 0 26 77 0 4 4 28 77 0 2 2 27 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 3 133 0 4 0 2 0 4 2 128 0 1 1 26 77 0 0 0 26 77 0 2 2 27 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 3 133 0 1 0 1 133 0 4 0 2 0 4 2 128 0 0 0 26 77 0 2 2 27 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 3 133 0 1 0 1 133 0 4 0 2 0 4 2 128 0 2 2 132 0 0 0 26 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 3 1 3 133 0 1 0 1 133 0 0 4 0 133 0 4 2 4 133 0 2 2 118
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
22 34 44 44 26 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Z;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(282,-1,o),
(249,-1,qs),
(192,-1,o),
(141,70,o),
(141,129,qs),
(141,195,o),
(194,355,o),
(227,407,q),
(194,399,o),
(66,379,o),
(23,379,qs),
(-27,379,o),
(-27,395,qs),
(-27,414,o),
(44,454,q),
(120,454,o),
(217,459,o),
(258,469,q),
(327,569,ls),
(373,635,o),
(405,686,o),
(405,699,qs),
(405,708,o),
(389,715,o),
(372,715,qs),
(353,715,o),
(308,710,qs),
(268,706,o),
(161,699,o),
(105,699,q),
(95,697,o),
(77,683,qs),
(53,665,o),
(40,665,qs),
(25,665,o),
(13,683,q),
(6,690,o),
(6,699,qs),
(6,713,o),
(36,741,o),
(77,760,o),
(90,760,q),
(120,775,o),
(319,775,qs),
(333,775,o),
(369,781,qs),
(418,788,o),
(434,788,qs),
(467,788,o),
(488,775,q),
(483,737,o),
(446,669,o),
(411,621,qs),
(381,579,o),
(344,517,o),
(335,484,q),
(363,491,o),
(410,507,qs),
(500,536,o),
(549,545,q),
(538,514,o),
(484,475,o),
(418,454,o),
(366,443,qs),
(319,434,o),
(288,424,q),
(226,304,o),
(226,209,qs),
(226,144,o),
(282,70,o),
(327,70,qs),
(378,70,o),
(497,171,o),
(549,270,q),
(546,276,o),
(546,283,qs),
(546,295,o),
(562,317,o),
(586,339,o),
(594,347,q),
(621,347,o),
(621,326,qs),
(621,291,o),
(495,139,o),
(344,10,o),
(319,10,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
29 25 2 8 5 77 1 9 8 9 1 1 0 3 76 35 1 3 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 0 5 6 8 6 5 8 128 0 0 9 1 9 0 1 128 0 3 0 6 5 3 6 105 0 8 0 9 0 8 9 105 0 2 2 26 77 0 1 1 11 97 12 1 11 11 30 77 0 10 10 30 10 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
0 2 3 2 133 0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 0 5 6 8 6 5 8 128 0 0 9 1 9 0 1 128 0 3 0 6 5 3 6 105 0 8 0 9 0 8 9 105 0 1 12 1 11 10 1 11 105 0 10 10 30 10 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
0 0 0 85 0 85 84 82 75 73 70 68 61 59 57 55 52 50 44 43 42 40 38 36 40 20 13 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Z;
unicode = 90;
},
{
glyphname = A.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,-123,o),
(440,-98,qs),
(422,-71,o),
(415,-64,q),
(415,-50,o),
(406,-1,qs),
(403,18,o),
(397,51,o),
(397,61,q),
(375,61,o),
(272,50,qs),
(211,43,o),
(199,43,q),
(194,35,o),
(188,9,qs),
(178,-27,o),
(154,-64,o),
(128,-64,q),
(117,-53,o),
(101,-46,qs),
(94,-42,o),
(80,-34,o),
(74,-28,qs),
(64,-17,o),
(50,11,o),
(50,24,qs),
(50,36,o),
(57,43,q),
(98,296,o),
(254,759,q),
(272,759,ls),
(287,759,o),
(348,736,o),
(361,723,qs),
(379,706,l),
(379,584,o),
(429,348,o),
(477,179,qs),
(494,118,o),
(529,-11,o),
(540,-64,qs),
(545,-84,o),
(545,-98,qs),
(545,-122,o),
(524,-149,o),
(507,-149,qs),
(489,-149,o),
(468,-135,q)
);
},
{
closed = 1;
nodes = (
(237,298,o),
(209,162,qs),
(199,115,l),
(225,128,o),
(349,151,o),
(379,151,q),
(354,261,o),
(323,473,o),
(307,616,q),
(307,600,o),
(281,492,qs),
(254,388,o),
(254,365,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
60 51 12 3 5 1 57 1 4 5 2 76 43 1 2 1 75 0 1 5 1 133 0 3 4 2 4 3 2 128 0 2 0 4 2 0 126 0 0 0 132 0 5 4 4 5 89 0 5 5 4 97 0 4 5 4 81 55 54 18 20 28 45 32 6 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = A.ss01;
},
{
glyphname = Aacute.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(454,-131,o),
(434,-102,qs),
(416,-75,o),
(410,-69,q),
(410,-61,o),
(402,-9,qs),
(393,38,o),
(393,51,q),
(381,51,o),
(309,44,o),
(274,41,qs),
(215,34,o),
(203,34,q),
(200,27,o),
(195,10,o),
(192,1,qs),
(183,-33,o),
(161,-69,o),
(136,-69,q),
(131,-64,o),
(111,-52,q),
(95,-45,o),
(84,-34,qs),
(75,-24,o),
(61,3,o),
(61,15,qs),
(61,27,o),
(68,34,q),
(107,274,o),
(256,718,q),
(273,718,ls),
(287,718,o),
(346,696,o),
(358,683,qs),
(375,667,l),
(375,552,o),
(421,331,o),
(468,166,qs),
(513,4,o),
(529,-69,qs),
(533,-85,o),
(533,-102,qs),
(533,-125,o),
(514,-150,o),
(497,-150,qs),
(480,-150,o),
(460,-137,q)
);
},
{
closed = 1;
nodes = (
(239,269,o),
(221,186,qs),
(203,102,l),
(228,115,o),
(346,137,o),
(375,137,q),
(352,243,o),
(322,445,o),
(307,581,q),
(307,562,o),
(282,464,qs),
(256,360,o),
(256,341,q)
);
},
{
closed = 1;
nodes = (
(521,777,o),
(470,741,o),
(438,700,o),
(438,687,qs),
(438,658,o),
(452,658,qs),
(459,658,o),
(475,665,qs),
(493,673,o),
(503,674,q),
(535,672,l),
(553,669,o),
(569,669,qs),
(594,669,o),
(594,682,q),
(589,710,ls),
(582,748,o),
(567,787,o),
(548,784,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
63 1 6 1 11 1 8 6 59 50 2 5 8 56 1 4 5 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
7 1 6 1 8 1 6 8 128 0 8 5 1 8 5 126 0 5 4 1 5 4 126 0 4 3 1 4 3 126 0 3 2 1 3 2 126 0 2 0 1 2 0 126 0 0 0 132 0 1 1 28 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 1 6 1 133 7 1 6 8 6 133 0 8 5 8 133 0 5 4 5 133 0 4 3 4 133 0 3 2 3 133 0 2 0 2 133 0 0 0 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
35 17 42 31 19 21 27 44 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Aacute.ss01;
},
{
glyphname = B.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,-84,o),
(193,-84,qs),
(173,-84,o),
(119,-61,o),
(81,-28,o),
(81,-14,qs),
(81,7,o),
(126,14,q),
(120,49,o),
(111,199,o),
(108,277,qs),
(105,357,o),
(96,515,o),
(89,556,q),
(89,548,o),
(75,548,qs),
(62,548,o),
(29,562,o),
(17,574,q),
(14,580,o),
(14,587,qs),
(14,602,o),
(35,633,o),
(58,660,qs),
(83,689,o),
(89,701,q),
(89,728,o),
(95,760,o),
(108,760,qs),
(120,760,o),
(144,737,q),
(218,805,o),
(303,805,qs),
(355,805,o),
(443,755,o),
(494,667,o),
(494,615,qs),
(494,549,o),
(451,484,q),
(519,456,o),
(584,357,o),
(584,294,qs),
(584,211,o),
(483,36,o),
(325,-79,o),
(244,-79,qs),
(234,-79,o),
(216,-77,q)
);
},
{
closed = 1;
nodes = (
(174,568,o),
(180,461,o),
(180,375,q),
(198,393,o),
(240,431,qs),
(289,474,o),
(348,534,o),
(390,609,o),
(390,650,qs),
(390,676,o),
(379,707,q),
(353,722,o),
(322,722,qs),
(255,722,o),
(180,647,q),
(180,646,o),
(178,637,o),
(170,629,o),
(162,629,q)
);
},
{
closed = 1;
nodes = (
(216,32,l),
(341,95,o),
(506,231,o),
(506,315,qs),
(506,351,o),
(487,388,q),
(453,419,o),
(409,419,qs),
(323,419,o),
(198,303,q),
(198,282,o),
(209,152,qs),
(213,110,o),
(216,68,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
16 1 5 2 26 21 2 3 5 8 1 6 3 80 79 70 63 47 39 6 0 6 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 1 5 1 2 5 128 0 3 5 6 5 3 6 128 0 6 0 5 6 0 126 4 1 0 0 132 0 5 5 1 97 0 1 1 26 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 2 1 5 1 2 5 128 0 3 5 6 5 3 6 128 0 6 0 5 6 0 126 0 0 4 5 0 4 126 0 4 4 132 0 5 5 1 97 0 1 1 26 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
73 71 38 44 43 34 43 32 7 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = B.ss01;
},
{
glyphname = C.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(372,-28,o),
(322,-28,qs),
(244,-28,o),
(110,74,o),
(30,237,o),
(30,323,qs),
(30,364,o),
(38,396,q),
(45,469,o),
(132,657,o),
(263,790,o),
(333,790,qs),
(399,790,o),
(456,727,qs),
(475,708,o),
(475,700,qs),
(475,694,o),
(466,694,qs),
(455,694,o),
(417,713,o),
(403,727,q),
(330,703,o),
(209,556,o),
(139,359,o),
(139,263,qs),
(139,143,o),
(195,65,q),
(214,55,o),
(236,55,qs),
(281,55,o),
(378,128,o),
(456,232,o),
(473,273,q),
(473,296,o),
(486,296,qs),
(497,296,o),
(525,274,o),
(544,257,q),
(576,235,o),
(576,202,qs),
(576,163,o),
(504,74,o),
(448,21,qs),
(421,-5,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
22 1 2 3 10 1 1 0 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 26 77 0 1 1 4 97 0 4 4 27 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 3 2 3 133 0 2 0 2 133 0 0 1 0 133 0 1 4 4 1 89 0 1 1 4 97 0 4 1 4 81
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
40 36 41 36 39 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = C.ss01;
},
{
glyphname = D.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,-27,o),
(280,-27,qs),
(245,-27,o),
(170,-15,o),
(112,-3,q),
(105,-6,o),
(96,-6,qs),
(80,-6,o),
(41,16,o),
(14,48,o),
(14,62,qs),
(19,133,o),
(22,274,o),
(22,380,qs),
(22,486,o),
(25,628,o),
(30,699,qs),
(30,719,o),
(36,748,o),
(47,748,q),
(47,785,o),
(52,816,o),
(62,816,qs),
(76,816,o),
(112,780,q),
(133,784,o),
(161,784,qs),
(271,784,o),
(464,632,o),
(580,398,o),
(580,283,qs),
(580,172,o),
(462,9,o),
(341,-20,qs)
);
},
{
closed = 1;
nodes = (
(171,37,o),
(204,37,qs),
(295,37,o),
(420,126,o),
(482,271,o),
(482,356,qs),
(482,448,o),
(411,617,o),
(275,723,o),
(182,723,qs),
(152,723,o),
(112,715,q),
(105,628,o),
(105,525,qs),
(105,429,o),
(115,234,o),
(125,84,qs),
(128,45,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
8 1 2 0 34 1 6 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 1 26 77 0 2 2 28 77 0 5 5 0 97 0 0 0 26 77 0 3 3 30 77 0 6 6 4 97 0 4 4 27 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 5 6 0 5 105 0 1 1 26 77 0 2 2 28 77 0 3 3 30 77 0 6 6 4 97 0 4 4 27 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 1 0 1 133 0 2 0 5 0 2 5 128 0 0 0 5 6 0 5 105 0 3 3 30 77 0 6 6 4 97 0 4 4 27 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 0 1 133 0 2 0 5 0 2 5 128 0 0 0 5 6 0 5 105 0 6 0 4 6 4 101 0 3 3 30 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
38 40 35 43 18 34 37 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = D.ss01;
},
{
glyphname = E.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,-21,o),
(284,-21,qs),
(152,-21,o),
(43,187,o),
(43,355,qs),
(43,507,o),
(83,718,q),
(76,732,o),
(76,736,qs),
(76,739,o),
(79,739,q),
(100,735,l),
(89,746,o),
(89,754,qs),
(89,767,o),
(115,767,q),
(305,800,o),
(423,800,qs),
(437,800,o),
(486,782,o),
(524,754,o),
(524,741,qs),
(524,728,o),
(505,718,q),
(439,718,l),
(164,718,l),
(164,711,o),
(155,711,qs),
(149,711,o),
(135,715,q),
(115,718,l),
(138,695,o),
(156,629,o),
(156,585,qs),
(156,553,o),
(150,487,qs),
(144,425,o),
(144,400,qs),
(144,380,o),
(147,362,q),
(186,372,o),
(251,394,qs),
(322,418,o),
(358,427,q),
(374,427,l),
(410,410,o),
(454,383,o),
(454,368,qs),
(454,356,o),
(439,346,q),
(439,335,o),
(359,313,o),
(342,313,qs),
(262,313,o),
(164,281,q),
(147,281,l),
(147,213,o),
(164,113,o),
(196,70,q),
(212,68,o),
(221,68,qs),
(293,68,o),
(434,166,o),
(488,233,q),
(483,233,o),
(477,239,o),
(477,244,qs),
(477,247,o),
(483,253,o),
(488,253,qs),
(496,253,o),
(505,248,q),
(567,223,o),
(567,178,qs),
(567,143,o),
(503,64,o),
(411,1,o),
(374,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
66 65 63 46 4 5 7 37 27 2 3 4 2 76 0 7 6 5 6 7 5 128 0 4 5 3 5 4 3 128 0 3 2 5 3 2 126 0 2 0 5 2 0 126 0 0 1 5 0 1 126 0 5 5 6 97 0 6 6 26 77 0 1 1 8 97 0 8 8 27 8 78 44 17 37 95 23 33 20 39 38 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = E.ss01;
},
{
glyphname = F.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(242,-6,o),
(231,-6,qs),
(208,-6,o),
(161,27,o),
(150,49,q),
(150,201,l),
(120,190,o),
(102,190,qs),
(79,190,o),
(79,213,q),
(83,252,l),
(116,256,o),
(144,267,o),
(155,293,o),
(155,323,qs),
(153,379,ls),
(150,487,o),
(150,522,q),
(139,517,o),
(77,488,o),
(66,488,q),
(69,479,o),
(69,474,qs),
(69,462,o),
(57,462,qs),
(44,462,o),
(6,489,o),
(-2,505,q),
(-11,514,o),
(-11,522,qs),
(-11,538,o),
(36,565,o),
(80,584,qs),
(111,596,o),
(146,614,o),
(150,623,q),
(150,725,l),
(161,728,o),
(169,728,qs),
(192,728,o),
(222,696,o),
(222,676,qs),
(222,665,o),
(218,657,q),
(238,665,o),
(303,694,qs),
(356,720,o),
(433,751,o),
(471,758,q),
(483,758,o),
(516,717,o),
(541,661,o),
(541,643,qs),
(541,620,o),
(522,623,q),
(503,631,o),
(478,631,qs),
(447,631,o),
(380,610,o),
(331,590,qs),
(267,562,o),
(234,556,q),
(234,534,o),
(240,479,o),
(243,454,qs),
(252,393,o),
(252,353,q),
(269,359,o),
(300,377,qs),
(331,394,o),
(375,413,o),
(398,413,qs),
(418,413,o),
(437,404,q),
(458,404,o),
(514,365,o),
(514,349,qs),
(514,341,o),
(505,336,q),
(408,309,ls),
(329,287,o),
(271,261,o),
(249,209,o),
(249,148,qs),
(250,76,ls),
(252,30,o),
(252,-1,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
49 42 2 2 4 68 56 50 24 4 6 2 63 1 5 6 80 76 19 3 7 0 86 81 2 8 7 5 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 6 2 5 2 6 5 128 0 5 0 2 5 0 126 1 1 0 7 2 0 7 126 0 7 8 2 7 8 126 0 3 0 2 6 3 2 105 0 4 4 28 77 0 8 8 30 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 6 2 5 2 6 5 128 0 5 1 2 5 1 126 0 1 0 2 1 0 126 0 0 7 2 0 7 126 0 7 8 2 7 8 126 0 3 0 2 6 3 2 105 0 4 4 28 77 0 8 8 30 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 43 19 45 25 22 45 33 27 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = F.ss01;
},
{
glyphname = G.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(559,313,o),
(599,137,o),
(599,35,qs),
(599,-27,o),
(586,-121,o),
(576,-132,q),
(560,-140,o),
(548,-140,qs),
(525,-140,o),
(508,-110,qs),
(505,-103,o),
(505,-84,qs),
(505,-65,o),
(512,2,o),
(516,36,qs),
(526,120,o),
(526,142,qs),
(526,159,o),
(523,162,q),
(494,89,o),
(367,3,o),
(293,3,qs),
(219,3,o),
(93,97,o),
(59,191,qs),
(32,260,o),
(32,337,qs),
(32,426,o),
(102,600,o),
(165,663,qs),
(241,739,o),
(329,739,qs),
(362,739,o),
(417,718,o),
(449,686,o),
(449,672,qs),
(449,665,o),
(447,662,qs),
(428,636,o),
(409,636,qs),
(402,636,o),
(384,643,o),
(375,648,qs),
(361,656,o),
(338,665,o),
(325,665,qs),
(301,665,o),
(272,647,q),
(196,580,o),
(111,393,o),
(111,291,qs),
(111,215,o),
(134,146,qs),
(148,108,o),
(208,71,o),
(247,71,qs),
(292,71,o),
(383,114,o),
(408,146,q),
(428,165,o),
(464,231,o),
(464,255,qs),
(464,272,o),
(454,282,q),
(433,283,o),
(323,286,o),
(276,286,qs),
(254,286,o),
(241,309,o),
(241,344,q),
(247,354,o),
(319,364,o),
(368,364,qs),
(421,364,o),
(509,353,o),
(516,344,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
39 1 3 5 5 1 1 0 58 56 2 2 1 3 76 0 4 3 0 3 4 0 128 0 7 6 7 134 0 0 0 1 2 0 1 103 0 3 3 5 97 0 5 5 28 77 0 2 2 6 97 0 6 6 30 6 78 44 40 38 36 40 39 68 33 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = G.ss01;
},
{
glyphname = H.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,-49,o),
(166,-49,qs),
(149,-49,o),
(114,-24,o),
(91,12,o),
(91,27,q),
(79,100,o),
(73,245,o),
(73,354,q),
(38,371,o),
(0,397,o),
(0,409,q),
(12,421,o),
(50,427,o),
(73,427,q),
(73,462,o),
(67,579,o),
(64,636,qs),
(54,790,o),
(54,845,q),
(89,845,o),
(127,776,o),
(142,675,o),
(149,592,qs),
(152,558,o),
(159,488,o),
(163,463,q),
(169,463,o),
(214,475,o),
(238,482,qs),
(300,500,o),
(309,500,q),
(309,772,ls),
(309,844,o),
(334,844,qs),
(346,844,o),
(363,827,qs),
(400,790,o),
(400,536,q),
(487,534,ls),
(506,534,o),
(551,512,o),
(581,471,o),
(581,445,q),
(542,446,o),
(501,441,o),
(467,436,qs),
(437,431,o),
(400,427,q),
(400,409,o),
(411,319,qs),
(421,233,o),
(432,120,o),
(432,71,qs),
(432,-42,o),
(395,-42,qs),
(370,-42,o),
(327,9,q),
(309,27,o),
(309,232,qs),
(310,369,ls),
(310,404,o),
(309,409,q),
(233,372,o),
(163,372,q),
(163,303,o),
(172,190,qs),
(182,46,o),
(182,-45,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
56 5 2 0 7 62 59 1 3 1 0 2 76 19 1 7 1 75 68 1 1 73
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
56 5 2 0 7 62 59 1 3 1 0 68 1 8 1 3 76 19 1 7 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
6 1 4 3 4 133 0 2 5 7 5 2 7 128 0 7 0 5 7 0 126 0 0 1 5 0 1 126 0 3 8 1 1 3 1 101 0 5 5 29 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
6 1 4 3 4 133 0 5 3 2 3 5 2 128 0 2 7 3 2 7 126 0 7 0 3 7 0 126 0 0 1 3 0 1 126 0 3 5 1 3 87 0 3 3 1 97 8 1 1 3 1 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
6 1 4 3 4 133 0 5 3 2 3 5 2 128 0 2 7 3 2 7 126 0 7 0 3 7 0 126 0 0 1 3 0 1 126 0 8 1 8 134 0 3 5 1 3 87 0 3 3 1 97 0 1 3 1 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
27 21 26 18 35 35 26 39 19 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = H.ss01;
},
{
glyphname = I.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,-28,o),
(333,-28,qs),
(312,-28,o),
(275,-6,o),
(252,26,o),
(252,41,qs),
(252,684,l),
(249,696,o),
(249,707,qs),
(249,725,o),
(266,746,o),
(281,746,qs),
(307,746,o),
(337,716,q),
(340,710,o),
(340,706,qs),
(340,701,o),
(322,695,o),
(315,692,o),
(315,683,qs),
(315,678,o),
(318,667,q),
(318,564,o),
(335,324,qs),
(341,228,o),
(352,35,o),
(352,-25,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
26 19 4 3 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 28 77 0 1 1 27 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 1 0 133 0 1 1 27 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 0 1 0 133 0 1 1 118
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
40 45 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = I.ss01;
},
{
glyphname = J.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(395,-69,o),
(174,-24,o),
(-7,49,o),
(-7,93,qs),
(-7,97,o),
(-5,105,q),
(32,105,o),
(107,87,o),
(167,69,qs),
(226,51,o),
(307,33,o),
(346,33,qs),
(368,33,o),
(379,35,q),
(400,92,o),
(400,167,qs),
(400,249,o),
(359,425,o),
(318,561,qs),
(283,680,o),
(274,715,q),
(263,704,o),
(148,698,o),
(100,698,q),
(94,695,o),
(87,695,qs),
(70,695,o),
(35,722,o),
(35,735,qs),
(35,750,o),
(65,750,q),
(129,768,o),
(282,793,o),
(406,810,qs),
(483,820,l),
(498,820,o),
(544,805,o),
(578,780,o),
(578,767,qs),
(578,758,o),
(570,750,qs),
(564,744,o),
(507,737,o),
(454,733,qs),
(413,730,o),
(337,721,o),
(326,715,q),
(347,662,ls),
(416,489,o),
(511,191,o),
(511,79,qs),
(511,-50,o),
(431,-69,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
5 1 2 1 1 76
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
5 1 3 1 1 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
3 1 2 1 5 1 2 5 128 0 5 4 1 5 4 126 0 4 6 1 4 6 126 0 6 6 132 0 0 0 26 77 0 1 1 28 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 1 0 133 3 1 2 1 5 1 2 5 128 0 5 4 1 5 4 126 0 4 6 1 4 6 126 0 6 6 132 0 1 1 28 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 1 0 133 0 1 2 1 133 3 1 2 5 2 133 0 5 4 5 133 0 4 6 4 133 0 6 6 118
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 0 1 0 133 0 1 3 1 133 0 3 2 3 133 0 2 5 2 133 0 5 4 5 133 0 4 6 4 133 0 6 6 118
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
52 51 46 45 41 39 30 28 26 25 22 21 17 16 7 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = J.ss01;
},
{
glyphname = K.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,-31,o),
(148,-27,o),
(136,-5,o),
(136,27,qs),
(137,64,l),
(138,142,ls),
(138,237,o),
(129,350,q),
(101,569,o),
(94,618,qs),
(78,747,o),
(68,844,q),
(69,852,o),
(83,852,qs),
(93,852,o),
(117,845,o),
(121,844,q),
(144,844,o),
(161,747,o),
(167,645,qs),
(170,579,o),
(179,494,o),
(188,470,q),
(215,502,o),
(265,683,o),
(274,793,q),
(282,797,o),
(292,797,qs),
(312,797,o),
(348,764,o),
(360,741,q),
(360,683,o),
(299,499,o),
(222,325,o),
(222,329,q),
(296,313,o),
(425,212,o),
(521,75,o),
(548,3,q),
(519,-21,o),
(498,-21,qs),
(476,-21,o),
(435,29,o),
(411,87,q),
(377,156,o),
(274,261,o),
(205,261,q),
(205,209,o),
(212,146,qs),
(222,58,o),
(222,-31,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
27 19 15 3 0 2 11 1 1 0 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
4 1 3 2 3 133 0 0 2 1 2 0 1 128 0 2 2 26 77 5 1 1 1 27 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
4 1 3 2 3 133 0 0 2 1 2 0 1 128 0 2 2 26 77 0 1 1 27 77 0 5 5 27 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 3 4 133 0 3 2 3 133 0 0 2 1 2 0 1 128 0 2 2 26 77 0 1 1 27 77 0 5 5 27 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 3 4 133 0 3 2 3 133 0 0 2 1 2 0 1 128 0 5 1 5 134 0 2 2 26 77 0 1 1 27 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
28 34 25 43 36 19 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = K.ss01;
},
{
glyphname = L.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,-20,o),
(231,-20,qs),
(179,-20,o),
(124,76,o),
(103,202,o),
(97,294,qs),
(92,357,o),
(91,366,q),
(91,395,o),
(72,577,qs),
(66,631,o),
(56,729,o),
(56,742,qs),
(56,750,o),
(62,750,qs),
(73,750,o),
(115,708,o),
(116,697,q),
(160,469,l),
(237,80,l),
(275,133,o),
(359,222,o),
(426,287,qs),
(492,351,l),
(529,351,o),
(597,308,o),
(597,276,q),
(518,216,o),
(376,84,o),
(282,-10,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
21 16 2 0 1 23 9 2 3 2 0 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 0 1 2 1 0 2 128 0 1 1 28 77 0 2 2 27 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 0 0 2 0 133 0 2 2 27 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
44 24 20 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = L.ss01;
},
{
glyphname = M.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(575,-24,o),
(564,-24,qs),
(548,-24,o),
(509,-1,o),
(482,31,o),
(482,43,q),
(473,133,o),
(454,259,qs),
(446,319,o),
(429,447,o),
(424,497,q),
(415,450,ls),
(401,378,o),
(380,293,o),
(365,263,q),
(356,262,o),
(340,262,qs),
(286,262,o),
(211,308,o),
(153,390,o),
(108,469,q),
(123,387,o),
(145,156,o),
(145,87,q),
(141,78,o),
(131,78,qs),
(118,78,o),
(82,112,o),
(72,131,q),
(68,237,o),
(45,392,qs),
(29,508,o),
(23,578,qs),
(22,592,o),
(51,592,qs),
(70,592,o),
(87,585,q),
(131,560,o),
(192,494,o),
(235,437,qs),
(281,375,o),
(306,350,q),
(314,397,o),
(332,469,qs),
(341,508,o),
(360,593,o),
(365,631,qs),
(368,648,o),
(435,684,o),
(461,684,qs),
(479,684,o),
(482,673,qs),
(505,556,o),
(543,301,o),
(567,122,qs),
(585,-16,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
44 34 13 3 3 1 31 26 2 2 3 55 49 2 4 2 3 76 0 0 1 0 133 0 1 3 1 133 0 3 2 3 133 0 2 4 2 133 0 4 4 27 4 78 45 39 39 45 36 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = M.ss01;
},
{
glyphname = N.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,-8,o),
(133,-8,qs),
(116,-8,o),
(102,9,o),
(99,40,o),
(99,76,q),
(91,203,o),
(61,371,o),
(38,467,qs),
(17,553,o),
(11,597,q),
(11,690,l),
(18,702,o),
(42,702,qs),
(62,702,o),
(92,685,o),
(86,673,q),
(115,636,o),
(184,533,o),
(217,483,qs),
(300,354,o),
(423,192,o),
(496,135,q),
(496,247,o),
(489,394,o),
(456,557,o),
(421,635,q),
(429,659,o),
(454,659,qs),
(470,659,o),
(508,639,o),
(534,610,o),
(534,597,q),
(547,571,o),
(580,415,o),
(603,227,o),
(603,154,qs),
(603,36,o),
(571,19,q),
(489,40,o),
(359,146,o),
(263,276,o),
(198,380,qs),
(139,473,o),
(115,507,q),
(197,172,o),
(197,59,qs),
(197,5,o),
(179,1,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
36 1 0 1 37 25 15 3 4 2 0 2 76 0 1 0 1 133 0 0 2 0 133 0 2 2 30 2 78 47 45 35 33 20 18 3 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = N.ss01;
},
{
glyphname = Ntilde.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(435,643,o),
(382,643,qs),
(351,643,o),
(290,656,o),
(244,669,qs),
(198,682,o),
(136,695,o),
(105,695,qs),
(70,695,o),
(39,685,q),
(34,674,o),
(20,674,qs),
(2,674,o),
(-42,708,o),
(-42,718,q),
(3,750,o),
(68,750,qs),
(94,750,o),
(146,742,o),
(190,733,qs),
(266,716,o),
(305,716,qs),
(314,716,o),
(334,718,qs),
(355,718,o),
(391,731,o),
(415,744,qs),
(447,760,o),
(465,766,q),
(492,759,o),
(522,732,o),
(522,716,qs),
(522,703,o),
(502,678,o),
(481,668,qs)
);
},
{
closed = 1;
nodes = (
(179,-9,o),
(163,-9,qs),
(142,-9,o),
(133,20,o),
(133,64,q),
(126,178,o),
(98,346,o),
(78,438,qs),
(61,518,o),
(56,554,q),
(56,635,l),
(59,641,o),
(67,641,qs),
(77,641,o),
(108,622,o),
(126,596,o),
(122,587,q),
(147,555,o),
(207,466,o),
(235,423,qs),
(307,311,o),
(416,167,o),
(481,116,q),
(481,214,o),
(474,343,o),
(446,485,o),
(415,554,q),
(422,575,o),
(444,575,qs),
(466,575,o),
(514,538,o),
(514,521,q),
(525,498,o),
(554,361,o),
(574,196,o),
(574,132,qs),
(574,27,o),
(546,14,q),
(474,32,o),
(360,125,o),
(275,240,o),
(218,332,qs),
(185,387,o),
(147,442,q),
(219,147,o),
(219,49,qs),
(219,1,o),
(203,-2,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
71 1 6 7 72 59 50 38 4 8 6 2 76 19 1 0 1 75 5 1 2 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 4 0 3 3 4 114 0 7 5 6 5 7 6 128 0 6 8 5 6 8 126 0 3 3 2 98 0 2 2 28 77 0 5 5 0 97 1 1 0 0 28 77 0 8 8 30 8 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 4 0 3 3 4 114 0 7 5 6 5 7 6 128 0 6 8 5 6 8 126 0 2 0 3 5 2 3 105 0 5 5 0 97 1 1 0 0 28 77 0 8 8 30 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 4 0 3 3 4 114 0 7 5 6 5 7 6 128 0 6 8 5 6 8 126 0 2 0 3 5 2 3 105 1 1 0 0 5 7 0 5 105 0 8 8 30 8 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
81 79 69 68 54 52 36 34 35 35 33 25 9 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ntilde.ss01;
},
{
glyphname = O.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,-27,o),
(284,-27,qs),
(188,-27,o),
(66,94,o),
(13,276,o),
(13,372,qs),
(13,402,o),
(16,429,qs),
(24,517,o),
(108,696,o),
(247,814,o),
(334,814,qs),
(350,814,o),
(408,787,o),
(453,746,o),
(453,725,q),
(451,714,l),
(516,714,o),
(581,590,o),
(581,489,qs),
(581,387,o),
(518,165,o),
(405,-2,o),
(334,-23,q)
);
},
{
closed = 1;
nodes = (
(304,72,o),
(414,208,o),
(463,405,o),
(463,513,qs),
(463,620,o),
(442,706,q),
(433,702,o),
(423,702,qs),
(406,702,o),
(384,728,o),
(384,747,q),
(302,732,o),
(181,611,o),
(118,438,o),
(118,344,qs),
(118,262,o),
(168,114,o),
(217,61,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
30 7 2 0 1 35 1 3 0 41 1 2 3 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 2 0 3 2 128 0 1 1 26 77 0 0 0 28 77 0 2 2 27 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 0 1 3 1 0 3 128 0 3 2 1 3 2 126 0 1 1 26 77 0 2 2 27 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 1 133 0 0 3 0 133 0 3 2 3 133 0 2 2 27 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 1 133 0 0 3 0 133 0 3 2 3 133 0 2 2 118
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
42 40 36 21 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = O.ss01;
},
{
glyphname = P.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(164,-9,o),
(151,-9,qs),
(134,-9,o),
(107,19,o),
(91,57,o),
(91,68,qs),
(91,102,o),
(83,324,qs),
(74,524,o),
(74,580,q),
(36,606,o),
(36,632,qs),
(36,657,o),
(74,683,q),
(74,702,o),
(88,724,o),
(101,724,qs),
(112,724,o),
(125,717,q),
(194,758,o),
(264,758,qs),
(338,758,o),
(459,669,o),
(529,526,o),
(529,450,qs),
(529,377,o),
(459,253,o),
(309,173,o),
(194,170,q),
(196,130,ls),
(198,98,o),
(198,79,qs),
(198,21,o),
(177,0,q)
);
},
{
closed = 1;
nodes = (
(170,557,o),
(177,452,qs),
(185,334,o),
(194,273,q),
(214,271,o),
(224,271,qs),
(287,271,o),
(385,335,o),
(438,439,o),
(438,498,qs),
(438,559,o),
(408,614,q),
(381,675,o),
(309,675,qs),
(246,675,o),
(160,632,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
19 14 2 4 2 49 23 2 5 4 2 76 0 1 0 4 5 1 4 105 0 5 0 0 3 5 0 105 0 2 2 28 77 0 3 3 30 3 78 38 34 45 34 38 20 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = P.ss01;
},
{
glyphname = Q.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(591,-89,o),
(579,-89,qs),
(552,-89,o),
(501,-41,o),
(462,24,o),
(454,50,q),
(376,13,o),
(307,13,qs),
(215,13,o),
(75,130,o),
(0,319,o),
(0,424,qs),
(0,522,o),
(69,695,o),
(136,751,q),
(210,801,o),
(281,801,qs),
(365,801,o),
(495,664,o),
(566,449,o),
(566,339,qs),
(566,267,o),
(535,144,o),
(504,101,q),
(517,75,o),
(547,29,qs),
(571,-8,o),
(596,-56,o),
(603,-83,q)
);
},
{
closed = 1;
nodes = (
(230,95,o),
(253,95,qs),
(290,95,o),
(359,124,o),
(386,151,q),
(374,163,o),
(356,185,qs),
(339,205,o),
(317,227,o),
(303,234,q),
(296,241,o),
(276,256,o),
(265,268,o),
(265,274,qs),
(265,279,o),
(270,284,q),
(275,286,o),
(286,286,qs),
(307,286,o),
(346,261,o),
(378,234,qs),
(406,210,o),
(420,201,q),
(461,304,o),
(461,421,qs),
(461,500,o),
(423,652,o),
(386,717,q),
(361,725,o),
(331,725,qs),
(260,725,o),
(154,619,o),
(98,452,o),
(98,362,qs),
(98,276,o),
(152,136,o),
(204,101,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
60 42 4 3 5 4 22 1 1 5 28 1 2 1 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 3 5 3 4 5 128 0 2 1 2 134 0 3 3 0 97 0 0 0 26 77 0 5 5 1 98 0 1 1 30 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 3 5 3 4 5 128 0 2 1 2 134 0 5 0 1 2 5 1 106 0 3 3 0 97 0 0 0 26 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
46 42 39 36 39 42 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Q.ss01;
},
{
glyphname = R.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(715,-39,o),
(683,-39,qs),
(643,-39,o),
(517,49,o),
(414,135,qs),
(322,212,o),
(209,295,o),
(164,310,q),
(164,284,o),
(174,217,o),
(179,185,qs),
(194,108,o),
(194,64,qs),
(194,22,o),
(182,-7,q),
(170,-11,o),
(156,-11,qs),
(128,-11,o),
(88,29,o),
(76,64,q),
(76,81,o),
(74,189,o),
(66,283,o),
(58,275,q),
(32,262,o),
(19,262,qs),
(-12,262,o),
(-12,328,qs),
(-12,343,o),
(8,358,o),
(29,366,qs),
(52,374,o),
(58,381,q),
(58,421,o),
(50,517,qs),
(47,557,o),
(41,644,o),
(41,680,q),
(26,665,o),
(5,617,o),
(5,592,q),
(4,585,o),
(-55,618,o),
(-65,627,q),
(-65,685,o),
(29,766,o),
(169,806,o),
(237,806,qs),
(265,806,o),
(287,803,q),
(352,789,o),
(412,716,o),
(412,662,qs),
(412,608,o),
(357,482,o),
(274,374,o),
(234,345,q),
(288,333,o),
(505,196,o),
(702,36,o),
(728,-7,q)
);
},
{
closed = 1;
nodes = (
(127,667,o),
(153,456,o),
(164,433,q),
(235,490,o),
(323,646,o),
(323,733,q),
(289,734,ls),
(259,736,o),
(241,736,qs),
(201,736,o),
(143,720,o),
(129,698,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
72 69 52 27 22 16 3 7 1 4 60 40 2 2 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 4 2 4 1 2 128 0 4 4 0 97 0 0 0 26 77 0 2 2 27 77 0 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 1 4 2 4 1 2 128 0 3 2 3 134 0 4 4 0 97 0 0 0 26 77 0 2 2 27 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
66 62 59 57 44 42 35 33 43 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = R.ss01;
},
{
glyphname = S.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(292,-21,o),
(252,-21,qs),
(202,-21,o),
(101,2,o),
(33,52,o),
(33,90,qs),
(33,102,o),
(42,113,o),
(64,122,o),
(68,125,qs),
(73,130,o),
(81,130,qs),
(99,130,o),
(138,93,o),
(138,72,q),
(154,70,o),
(163,70,qs),
(218,70,o),
(345,124,o),
(432,214,o),
(432,265,qs),
(432,292,o),
(419,318,q),
(395,342,o),
(325,381,o),
(270,406,qs),
(210,434,o),
(144,471,o),
(121,494,qs),
(79,536,o),
(79,589,qs),
(79,638,o),
(147,738,o),
(249,813,o),
(297,827,qs),
(302,828,o),
(311,828,qs),
(345,828,o),
(410,785,o),
(451,730,o),
(451,717,qs),
(451,711,o),
(446,711,qs),
(430,711,o),
(384,757,q),
(352,757,o),
(257,693,o),
(187,599,o),
(187,557,qs),
(187,505,o),
(244,476,qs),
(262,467,o),
(310,447,qs),
(380,418,o),
(472,367,o),
(539,287,o),
(542,230,qs),
(542,170,o),
(480,64,o),
(375,-7,o),
(314,-15,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
19 1 1 0 45 1 3 4 2 76 0 2 0 2 133 0 0 1 0 133 0 1 4 1 133 0 4 3 4 133 0 3 3 5 97 0 5 5 27 5 78 59 57 48 47 44 42 37 17 30 6 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = S.ss01;
},
{
glyphname = T.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(393,2,o),
(348,61,o),
(338,138,o),
(338,192,q),
(314,322,ls),
(296,424,o),
(271,548,o),
(250,616,q),
(236,630,l),
(215,624,o),
(180,622,qs),
(149,620,o),
(116,613,o),
(104,601,q),
(90,601,ls),
(68,601,o),
(15,632,o),
(15,650,qs),
(15,657,o),
(17,660,q),
(27,670,o),
(109,689,o),
(134,689,q),
(204,706,o),
(331,729,qs),
(451,751,o),
(499,762,q),
(523,762,o),
(577,738,o),
(587,718,q),
(587,689,l),
(572,674,o),
(528,674,q),
(497,664,o),
(331,645,o),
(294,645,q),
(319,607,o),
(392,366,o),
(445,106,o),
(445,40,qs),
(445,15,o),
(440,2,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
11 1 3 2 23 1 0 1 37 1 6 4 3 76 10 1 3 1 75 0 2 3 2 133 0 3 1 3 133 0 1 0 1 133 0 0 5 0 133 0 5 4 5 133 0 4 6 4 133 0 6 6 30 6 78 25 34 38 20 20 18 21 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = T.ss01;
},
{
glyphname = U.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,3,o),
(115,248,o),
(27,575,o),
(16,710,qs),
(12,747,l),
(12,763,o),
(22,763,qs),
(26,763,o),
(33,760,q),
(39,762,o),
(43,762,qs),
(57,762,o),
(90,739,o),
(113,706,o),
(113,693,qs),
(113,681,o),
(103,677,q),
(135,499,o),
(228,213,o),
(310,101,q),
(383,241,o),
(448,569,o),
(448,743,q),
(459,753,o),
(476,753,qs),
(501,753,o),
(558,714,o),
(569,693,q),
(573,652,o),
(573,593,qs),
(573,427,o),
(495,99,o),
(413,3,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
27 12 9 3 3 0 1 76 23 1 0 74
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
23 1 0 2 27 12 9 3 3 0 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
23 1 0 1 27 12 9 3 3 0 2 76
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
2 1 2 0 0 28 77 0 3 3 30 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 0 2 133 1 1 0 3 0 133 0 3 3 30 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
2 1 1 0 1 133 0 0 3 0 133 0 3 3 30 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
21 35 28 38 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = U.ss01;
},
{
glyphname = V.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(422,-9,o),
(404,-9,qs),
(366,-9,o),
(294,58,o),
(265,102,q),
(184,249,o),
(19,571,o),
(-27,686,q),
(-20,706,o),
(-5,706,qs),
(24,706,o),
(125,558,o),
(219,380,o),
(285,249,qs),
(325,167,o),
(334,153,q),
(357,271,o),
(445,515,o),
(506,652,q),
(515,661,o),
(530,661,qs),
(549,661,o),
(595,631,o),
(626,586,o),
(626,566,q),
(593,499,o),
(542,346,o),
(513,239,qs),
(495,176,o),
(456,47,o),
(437,-1,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
14 5 2 2 0 1 76 0 1 0 1 133 0 0 2 0 133 0 2 2 30 2 78 38 41 40 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = V.ss01;
},
{
glyphname = W.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(258,-2,ls),
(229,-2,o),
(196,20,o),
(172,68,o),
(150,125,qs),
(117,209,o),
(68,323,o),
(26,405,q),
(3,462,ls),
(-13,498,o),
(-31,548,o),
(-31,564,qs),
(-31,586,o),
(-11,586,qs),
(6,586,o),
(41,570,q),
(61,540,o),
(190,253,o),
(220,180,q),
(224,243,o),
(248,298,o),
(268,298,qs),
(287,298,o),
(335,261,o),
(374,224,qs),
(406,192,o),
(430,173,q),
(454,280,o),
(475,446,qs),
(489,546,o),
(506,655,o),
(521,719,q),
(536,766,o),
(574,766,qs),
(591,766,o),
(630,749,o),
(655,735,q),
(622,602,o),
(596,476,o),
(585,405,qs),
(578,362,o),
(556,241,o),
(536,150,qs),
(523,84,o),
(494,25,o),
(473,25,qs),
(451,25,o),
(394,75,o),
(332,140,qs),
(314,159,l),
(310,134,o),
(308,87,qs),
(306,49,o),
(300,12,o),
(289,0,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
17 1 3 1 35 27 4 3 0 2 2 76 0 1 3 1 133 0 3 2 3 133 0 0 2 4 2 0 4 128 0 2 2 4 97 0 4 4 30 4 78 43 38 42 42 39 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = W.ss01;
},
{
glyphname = X.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-8,62,o),
(-8,106,qs),
(-8,125,o),
(16,171,o),
(39,206,qs),
(68,252,o),
(73,262,q),
(93,282,o),
(218,467,o),
(231,492,q),
(223,506,o),
(176,560,qs),
(103,649,o),
(38,737,o),
(44,750,q),
(52,756,o),
(68,756,qs),
(88,756,o),
(130,743,o),
(142,732,qs),
(167,707,o),
(204,657,o),
(232,615,qs),
(261,571,o),
(274,555,q),
(294,575,o),
(346,651,qs),
(385,707,o),
(438,776,o),
(460,793,q),
(472,793,o),
(518,760,o),
(518,750,q),
(512,739,o),
(510,720,qs),
(507,704,o),
(500,690,o),
(490,690,qs),
(484,690,o),
(475,693,q),
(432,586,o),
(361,469,q),
(371,456,o),
(404,407,qs),
(460,320,o),
(503,276,qs),
(516,262,o),
(531,216,o),
(531,196,qs),
(531,164,o),
(514,164,q),
(506,166,l),
(467,185,o),
(408,261,o),
(371,323,qs),
(335,384,o),
(317,405,q),
(305,389,o),
(251,299,qs),
(188,192,o),
(99,60,o),
(73,47,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
28 1 1 3 51 36 19 4 4 0 1 2 76 61 1 0 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 1 3 0 3 1 0 128 0 0 0 132 0 2 2 26 77 0 3 3 28 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 2 1 2 3 1 128 0 1 0 2 1 0 126 0 0 0 132 0 2 2 26 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
44 22 43 26 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = X.ss01;
},
{
glyphname = Y.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,-19,o),
(197,23,o),
(197,47,q),
(191,59,o),
(226,157,o),
(267,256,qs),
(298,329,o),
(329,411,o),
(329,426,q),
(206,544,o),
(66,712,o),
(66,733,qs),
(66,748,o),
(135,703,o),
(269,577,o),
(362,476,q),
(370,500,o),
(396,563,o),
(409,593,qs),
(437,656,o),
(470,747,o),
(477,789,q),
(477,800,o),
(485,800,qs),
(494,800,o),
(530,770,o),
(543,756,q),
(543,697,o),
(505,564,o),
(469,463,qs),
(444,393,ls),
(434,366,o),
(412,280,qs),
(378,147,o),
(319,-12,o),
(279,-19,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
32 26 19 8 4 1 0 1 76 0 0 0 26 77 0 1 1 27 1 78 35 34 26 2 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Y.ss01;
},
{
glyphname = Z.ss01;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,15,o),
(169,15,qs),
(94,15,o),
(12,86,o),
(12,145,qs),
(12,182,o),
(47,267,o),
(81,310,q),
(26,333,o),
(26,352,qs),
(26,363,o),
(59,378,o),
(94,389,qs),
(115,395,l),
(155,456,o),
(230,555,qs),
(308,659,o),
(334,698,q),
(318,698,o),
(216,690,qs),
(116,682,o),
(98,682,q),
(82,679,o),
(28,699,o),
(28,713,qs),
(28,727,o),
(107,755,o),
(198,766,qs),
(275,773,ls),
(349,779,o),
(364,779,qs),
(408,779,o),
(444,746,o),
(452,698,q),
(432,659,o),
(383,588,o),
(342,535,qs),
(288,465,o),
(266,429,q),
(320,397,o),
(320,376,qs),
(320,359,o),
(269,340,o),
(215,327,q),
(119,196,o),
(98,91,q),
(144,96,o),
(237,128,o),
(307,157,qs),
(392,192,o),
(499,226,o),
(554,226,q),
(563,217,o),
(589,194,o),
(607,168,o),
(607,155,qs),
(607,149,o),
(604,141,q),
(557,134,o),
(462,103,o),
(391,75,qs),
(309,42,o),
(249,24,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
54 23 2 0 2 16 1 4 0 2 76 28 1 3 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 3 1 2 1 3 2 128 0 2 0 1 2 0 126 0 0 4 1 0 4 126 0 1 1 26 77 0 4 4 30 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 3 1 133 0 3 2 3 133 0 2 0 2 133 0 0 4 0 133 0 4 4 30 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 1 3 1 133 0 3 2 3 133 0 2 0 2 133 0 0 4 0 133 0 4 4 118
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
61 59 44 43 41 40 32 30 26 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Z.ss01;
},
{
glyphname = A.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(442,17,o),
(418,115,o),
(406,160,qs),
(383,251,o),
(376,283,q),
(359,283,o),
(271,255,o),
(188,220,o),
(179,211,q),
(167,182,o),
(144,110,o),
(134,76,qs),
(111,-5,o),
(89,-59,q),
(89,-64,o),
(82,-64,qs),
(68,-64,o),
(17,-34,o),
(17,-23,qs),
(17,3,o),
(35,64,o),
(53,109,qs),
(62,133,o),
(71,157,q),
(67,161,o),
(51,171,qs),
(31,185,o),
(13,203,o),
(13,215,qs),
(13,222,o),
(17,229,q),
(17,241,o),
(73,265,o),
(89,265,q),
(132,480,o),
(232,749,q),
(250,777,o),
(276,777,qs),
(295,777,o),
(331,750,o),
(340,732,q),
(346,712,o),
(363,653,o),
(373,617,qs),
(417,453,o),
(430,426,q),
(441,426,o),
(460,440,o),
(466,444,q),
(489,434,ls),
(529,417,o),
(574,383,o),
(574,354,qs),
(574,346,o),
(531,330,o),
(477,319,o),
(466,319,q),
(502,193,o),
(544,19,o),
(556,-77,q),
(563,-90,o),
(563,-97,qs),
(563,-107,o),
(552,-107,qs),
(539,-107,o),
(494,-80,o),
(454,-41,o),
(448,-23,q)
);
},
{
closed = 1;
nodes = (
(265,569,o),
(236,457,qs),
(209,356,o),
(197,319,q),
(210,332,o),
(327,390,o),
(340,390,q),
(333,417,o),
(313,507,qs),
(297,581,o),
(286,624,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
78 18 2 2 3 36 1 5 4 5 1 0 5 3 76 74 1 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 2 3 133 0 2 7 2 133 0 7 1 7 133 0 1 6 1 133 0 6 4 6 133 0 0 5 0 134 0 4 5 5 4 89 0 4 4 5 97 0 5 4 5 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 2 3 7 3 2 7 128 0 7 1 3 7 1 126 0 1 6 3 1 6 126 0 6 4 3 6 4 126 0 0 5 0 134 0 4 0 5 0 4 5 105 0 3 3 26 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 3 2 3 133 0 2 7 2 133 0 7 1 7 133 0 1 6 1 133 0 6 4 6 133 0 0 5 0 134 0 4 5 5 4 89 0 4 4 5 97 0 5 4 5 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
72 71 62 61 51 50 19 39 25 22 34 8 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = A.ss02;
},
{
glyphname = Aacute.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(442,17,o),
(418,115,o),
(406,160,qs),
(383,251,o),
(376,283,q),
(359,283,o),
(271,255,o),
(188,220,o),
(179,211,q),
(167,182,o),
(144,110,o),
(134,76,qs),
(111,-5,o),
(89,-59,q),
(89,-64,o),
(82,-64,qs),
(68,-64,o),
(17,-34,o),
(17,-23,qs),
(17,3,o),
(35,64,o),
(53,109,qs),
(62,133,o),
(71,157,q),
(67,161,o),
(51,171,qs),
(31,185,o),
(13,203,o),
(13,215,qs),
(13,222,o),
(17,229,q),
(17,241,o),
(73,265,o),
(89,265,q),
(132,480,o),
(232,749,q),
(250,777,o),
(276,777,qs),
(295,777,o),
(331,750,o),
(340,732,q),
(346,712,o),
(363,653,o),
(373,617,qs),
(417,453,o),
(430,426,q),
(441,426,o),
(460,440,o),
(466,444,q),
(489,434,ls),
(529,417,o),
(574,383,o),
(574,354,qs),
(574,346,o),
(531,330,o),
(477,319,o),
(466,319,q),
(502,193,o),
(544,19,o),
(556,-77,q),
(563,-90,o),
(563,-97,qs),
(563,-107,o),
(552,-107,qs),
(539,-107,o),
(494,-80,o),
(454,-41,o),
(448,-23,q)
);
},
{
closed = 1;
nodes = (
(265,569,o),
(236,457,qs),
(209,356,o),
(197,319,q),
(210,332,o),
(327,390,o),
(340,390,q),
(333,417,o),
(313,507,qs),
(297,581,o),
(286,624,q)
);
},
{
closed = 1;
nodes = (
(467,750,o),
(454,731,qs),
(426,692,o),
(426,671,qs),
(426,649,o),
(455,649,qs),
(477,649,o),
(534,671,o),
(541,680,qs),
(547,688,o),
(547,700,qs),
(547,714,o),
(541,728,qs),
(534,745,o),
(514,766,o),
(497,774,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
94 1 8 3 78 18 2 2 8 36 1 5 4 5 1 0 5 4 76 74 1 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 3 8 3 133 0 2 8 7 8 2 7 128 0 7 1 8 7 1 126 0 6 1 4 1 6 4 128 0 0 5 0 134 0 8 0 1 6 8 1 105 0 4 5 5 4 89 0 4 4 5 97 0 5 4 5 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 8 7 8 2 7 128 0 7 1 8 7 1 126 0 6 1 4 1 6 4 128 0 0 5 0 134 0 8 0 1 6 8 1 105 0 4 0 5 0 4 5 105 0 3 3 26 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 3 8 3 133 0 2 8 7 8 2 7 128 0 7 1 8 7 1 126 0 6 1 4 1 6 4 128 0 0 5 0 134 0 8 0 1 6 8 1 105 0 4 5 5 4 89 0 4 4 5 97 0 5 4 5 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
89 87 72 71 62 61 51 50 19 39 25 22 34 9 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Aacute.ss02;
},
{
glyphname = B.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,-26,o),
(268,-26,qs),
(255,-26,o),
(225,-7,q),
(208,6,o),
(190,12,q),
(138,138,o),
(5,509,o),
(-25,619,qs),
(-27,629,o),
(-27,634,qs),
(-27,652,o),
(-7,677,o),
(7,677,qs),
(16,677,o),
(26,671,q),
(66,714,o),
(163,760,o),
(210,760,qs),
(272,760,o),
(352,685,o),
(352,615,qs),
(352,567,o),
(328,502,q),
(410,536,o),
(474,536,qs),
(536,536,o),
(601,469,o),
(601,412,qs),
(601,352,o),
(529,203,o),
(387,50,o),
(288,-14,q)
);
},
{
closed = 1;
nodes = (
(69,573,o),
(92,507,qs),
(118,428,o),
(131,374,q),
(175,421,o),
(225,480,o),
(263,552,o),
(263,586,qs),
(263,616,o),
(245,646,q),
(230,662,o),
(192,678,o),
(171,678,qs),
(140,678,o),
(80,643,o),
(61,611,q)
);
},
{
closed = 1;
nodes = (
(257,79,l),
(358,162,o),
(508,348,o),
(508,408,qs),
(508,433,o),
(495,449,q),
(475,468,o),
(435,468,qs),
(373,468,o),
(223,379,o),
(169,300,q),
(172,284,o),
(205,213,o),
(222,179,qs),
(246,129,o),
(249,119,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
48 21 2 0 2 8 1 5 0 63 53 44 3 3 5 3 76 0 2 4 0 4 2 0 128 0 1 0 4 2 1 4 105 0 0 0 5 3 0 5 105 0 3 3 27 3 78 57 55 35 42 35 37 37 6 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = B.ss02;
},
{
glyphname = C.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(368,-28,o),
(358,-28,qs),
(281,-28,o),
(132,47,o),
(26,180,o),
(9,263,q),
(6,293,o),
(6,324,qs),
(6,448,o),
(107,682,o),
(207,750,q),
(261,780,o),
(329,780,qs),
(382,780,o),
(475,741,o),
(532,663,o),
(532,609,qs),
(532,594,o),
(531,587,q),
(524,580,o),
(512,580,qs),
(499,580,o),
(469,595,o),
(460,605,qs),
(454,612,o),
(451,634,o),
(451,653,qs),
(451,674,o),
(448,702,o),
(442,713,q),
(339,720,o),
(190,595,o),
(113,391,o),
(113,283,qs),
(113,203,o),
(134,138,q),
(186,60,o),
(268,60,qs),
(337,60,o),
(483,159,o),
(531,227,q),
(538,239,o),
(550,239,qs),
(565,239,o),
(599,213,o),
(622,192,q),
(622,71,o),
(388,-26,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
28 1 3 2 1 1 1 0 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 2 2 4 97 0 4 4 26 77 0 1 1 5 97 0 5 5 27 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 4 0 2 3 4 2 105 0 1 1 5 97 0 5 5 27 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 4 0 2 3 4 2 105 0 1 5 5 1 89 0 1 1 5 97 0 5 1 5 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
41 38 40 22 35 35 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = C.ss02;
},
{
glyphname = D.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,-58,o),
(282,-58,qs),
(230,-58,o),
(93,-13,o),
(-8,45,o),
(-8,61,qs),
(-8,73,o),
(24,73,qs),
(45,73,o),
(81,67,q),
(70,173,o),
(63,319,qs),
(59,387,o),
(48,535,o),
(41,598,q),
(-14,650,o),
(-14,679,qs),
(-14,693,o),
(0,700,q),
(116,787,o),
(227,787,qs),
(329,787,o),
(494,650,o),
(587,433,o),
(587,318,qs),
(587,181,o),
(448,-25,o),
(307,-56,q)
);
},
{
closed = 1;
nodes = (
(164,304,o),
(184,141,o),
(184,46,q),
(269,51,o),
(395,169,o),
(460,347,o),
(460,439,qs),
(460,512,o),
(418,632,o),
(333,704,o),
(272,704,qs),
(206,704,o),
(123,659,q),
(123,649,o),
(133,547,qs),
(143,445,o),
(143,434,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
44 31 2 1 3 17 1 4 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 3 4 3 1 4 128 0 4 0 2 4 2 101 0 3 3 0 97 0 0 0 26 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 3 4 3 1 4 128 0 0 0 3 1 0 3 105 0 4 2 2 4 89 0 4 4 2 97 0 2 4 2 81
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
22 38 36 43 37 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = D.ss02;
},
{
glyphname = E.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,-70,o),
(115,35,o),
(71,196,o),
(71,286,qs),
(71,332,o),
(75,365,q),
(59,372,o),
(39,395,o),
(39,404,qs),
(39,422,o),
(75,422,q),
(69,453,o),
(66,516,o),
(66,564,qs),
(66,611,o),
(63,675,o),
(56,706,q),
(22,727,o),
(22,750,qs),
(22,764,o),
(51,781,o),
(75,781,q),
(166,799,o),
(427,838,o),
(491,838,q),
(536,815,o),
(557,804,o),
(585,769,o),
(585,743,q),
(565,732,o),
(535,721,o),
(520,721,qs),
(494,721,o),
(472,743,q),
(448,742,o),
(358,737,o),
(302,734,qs),
(150,724,o),
(131,724,q),
(146,687,o),
(156,611,o),
(158,554,qs),
(159,526,o),
(164,466,o),
(169,441,q),
(245,461,o),
(327,479,o),
(374,479,qs),
(481,479,o),
(491,403,q),
(453,390,o),
(378,384,o),
(323,384,qs),
(270,384,o),
(201,378,o),
(169,365,q),
(169,290,o),
(175,189,o),
(199,78,o),
(226,25,q),
(243,37,ls),
(325,97,o),
(430,201,o),
(453,271,q),
(472,271,o),
(529,214,q),
(535,193,o),
(535,173,qs),
(535,119,o),
(464,21,o),
(356,-52,o),
(302,-70,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
42 1 3 6 26 1 7 2 21 1 1 7 65 15 2 0 1 11 1 8 0 5 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 4 3 2 3 4 2 128 0 7 2 1 2 7 1 128 0 0 1 8 1 0 8 128 0 8 8 132 0 5 0 3 4 5 3 103 0 6 6 26 77 0 1 1 2 97 0 2 2 29 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 6 5 3 5 6 3 128 0 4 3 2 3 4 2 128 0 7 2 1 2 7 1 128 0 0 1 8 1 0 8 128 0 8 8 132 0 5 0 3 4 5 3 103 0 1 1 2 97 0 2 2 29 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
25 26 18 22 33 88 35 42 22 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = E.ss02;
},
{
glyphname = F.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(240,-120,o),
(197,-38,o),
(183,77,o),
(180,168,qs),
(178,228,o),
(172,298,o),
(165,320,q),
(160,314,o),
(145,298,o),
(126,287,o),
(114,286,q),
(63,308,o),
(63,329,qs),
(63,347,o),
(118,372,o),
(165,387,q),
(165,624,l),
(143,611,o),
(126,611,qs),
(104,611,o),
(73,640,o),
(59,674,o),
(64,675,q),
(162,725,o),
(347,797,o),
(422,797,qs),
(472,797,o),
(503,776,q),
(508,775,o),
(501,750,o),
(481,727,o),
(469,726,q),
(449,730,o),
(301,686,o),
(233,658,q),
(233,630,o),
(242,540,qs),
(250,438,o),
(250,421,q),
(279,433,ls),
(324,453,o),
(390,475,o),
(419,475,qs),
(476,475,o),
(503,421,q),
(509,399,o),
(384,363,o),
(285,344,qs),
(250,337,l),
(261,268,o),
(275,126,qs),
(291,-34,o),
(300,-86,qs),
(303,-110,ls),
(303,-115,o),
(295,-120,o),
(283,-120,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
39 33 24 21 4 2 1 49 45 40 17 7 5 3 0 2 76 0 2 1 0 1 2 0 128 4 1 3 0 3 134 0 1 1 26 77 0 0 0 29 0 78 0 0 0 56 0 55 37 47 44 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = F.ss02;
},
{
glyphname = G.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,-194,o),
(503,-132,o),
(474,-36,o),
(474,0,qs),
(474,20,o),
(478,29,q),
(369,-73,o),
(263,-73,qs),
(199,-73,o),
(93,-3,o),
(23,110,o),
(11,173,qs),
(2,209,o),
(2,254,qs),
(2,352,o),
(76,571,o),
(207,719,o),
(286,719,qs),
(354,719,o),
(425,658,q),
(452,638,o),
(486,577,o),
(486,555,qs),
(486,537,o),
(473,537,qs),
(457,537,o),
(425,568,q),
(417,584,o),
(398,621,o),
(378,644,o),
(366,644,qs),
(363,644,o),
(353,640,q),
(287,624,o),
(173,488,o),
(107,301,o),
(107,213,qs),
(107,134,o),
(166,17,o),
(227,-7,q),
(250,-12,o),
(267,-12,qs),
(318,-12,o),
(401,49,o),
(449,149,o),
(449,204,qs),
(449,235,o),
(442,262,q),
(397,253,o),
(355,253,qs),
(307,253,o),
(244,273,o),
(244,289,qs),
(244,304,o),
(314,337,o),
(388,352,q),
(425,352,ls),
(454,352,o),
(521,327,o),
(568,278,o),
(568,244,qs),
(571,123,ls),
(576,30,o),
(576,-51,qs),
(576,-139,o),
(568,-187,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
17 1 1 0 59 1 2 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 3 5 4 5 3 4 128 0 4 0 5 4 0 126 0 0 0 1 2 0 1 106 0 2 0 6 2 6 101 0 5 5 28 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 5 3 5 133 0 3 4 3 133 0 4 0 4 133 0 0 0 1 2 0 1 106 0 2 6 6 2 89 0 2 2 6 97 0 6 2 6 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
40 37 36 41 38 37 39 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = G.ss02;
},
{
glyphname = H.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,-53,o),
(150,-26,o),
(128,14,o),
(128,31,qs),
(128,336,l),
(119,336,o),
(69,328,qs),
(24,319,o),
(10,319,q),
(3,337,o),
(3,351,qs),
(3,374,o),
(39,391,o),
(73,396,qs),
(102,400,o),
(111,405,q),
(111,777,l),
(117,789,o),
(128,789,qs),
(143,789,o),
(179,755,o),
(179,744,q),
(190,676,o),
(196,536,o),
(196,422,q),
(232,429,ls),
(295,443,o),
(384,456,o),
(434,456,q),
(432,506,ls),
(426,592,o),
(426,668,qs),
(426,839,o),
(468,828,q),
(522,774,o),
(522,753,qs),
(522,747,o),
(519,744,q),
(522,641,o),
(537,-35,o),
(536,-36,q),
(466,-36,o),
(417,81,o),
(417,181,qs),
(417,207,o),
(419,253,qs),
(420,315,ls),
(420,347,o),
(417,371,q),
(376,361,o),
(318,354,qs),
(255,347,o),
(213,336,q),
(213,292,o),
(224,213,qs),
(236,121,o),
(236,74,qs),
(236,0,o),
(213,-53,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
41 36 22 20 4 1 2 42 33 9 3 4 1 2 76 5 1 4 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 1 2 4 2 1 4 128 0 3 4 0 4 3 0 128 0 5 0 5 134 0 4 4 2 97 0 2 2 26 77 0 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 2 4 2 1 4 128 0 3 4 0 4 3 0 128 0 0 5 4 0 5 126 0 5 5 132 0 4 4 2 97 0 2 2 26 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 4 2 1 4 128 0 3 4 0 4 3 0 128 0 0 5 4 0 5 126 0 5 5 132 0 2 1 4 2 89 0 2 2 4 97 0 4 2 4 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
58 57 53 52 50 49 40 38 30 29 17 16 6 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = H.ss02;
},
{
glyphname = I.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(355,-26,o),
(343,-26,qs),
(327,-26,o),
(291,0,o),
(267,35,o),
(267,48,q),
(259,150,o),
(251,386,qs),
(243,623,o),
(235,723,q),
(231,745,o),
(245,745,qs),
(257,745,o),
(301,714,o),
(336,676,o),
(336,665,qs),
(336,657,o),
(325,657,q),
(320,658,o),
(315,658,q),
(315,558,o),
(330,353,o),
(344,212,qs),
(349,155,o),
(360,40,o),
(364,-17,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
5 1 0 1 25 19 2 2 0 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 0 1 2 1 0 2 128 0 1 1 28 77 0 2 2 27 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 0 0 2 0 133 0 2 2 27 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
40 36 23 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = I.ss02;
},
{
glyphname = J.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(371,0,o),
(320,0,qs),
(266,0,o),
(135,46,o),
(29,119,o),
(10,157,q),
(6,196,o),
(29,196,qs),
(44,196,o),
(90,171,o),
(129,145,qs),
(181,112,o),
(252,75,o),
(279,75,qs),
(301,75,o),
(314,89,qs),
(373,157,o),
(373,362,qs),
(373,433,o),
(362,594,qs),
(354,712,o),
(354,749,qs),
(354,776,o),
(363,800,o),
(382,800,q),
(426,789,o),
(450,678,o),
(450,597,qs),
(450,566,o),
(456,484,o),
(459,445,qs),
(469,339,o),
(469,284,qs),
(469,207,o),
(438,78,o),
(399,22,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 1 0 2 1 128 0 0 0 26 77 0 1 1 3 97 0 3 3 30 3 78 36 36 41 26 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = J.ss02;
},
{
glyphname = K.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(531,-10,o),
(508,-10,qs),
(489,-10,o),
(478,7,o),
(475,33,qs),
(470,79,o),
(436,181,o),
(384,253,q),
(311,310,o),
(219,310,qs),
(194,310,o),
(147,303,qs),
(126,300,l),
(126,245,o),
(135,155,qs),
(143,53,o),
(143,9,qs),
(143,-10,o),
(119,-10,qs),
(102,-10,o),
(62,9,o),
(34,43,o),
(34,63,q),
(9,355,o),
(9,576,qs),
(9,684,o),
(17,788,qs),
(19,805,o),
(65,833,o),
(86,833,qs),
(108,833,o),
(108,816,qs),
(108,492,l),
(128,513,o),
(162,555,o),
(190,593,qs),
(251,673,ls),
(261,687,o),
(272,705,qs),
(303,751,o),
(336,789,o),
(355,789,qs),
(379,789,o),
(412,756,qs),
(419,749,o),
(350,656,o),
(276,566,qs),
(214,490,o),
(149,406,o),
(144,389,q),
(182,391,o),
(199,391,qs),
(342,391,o),
(503,287,o),
(568,119,o),
(578,0,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
22 1 0 1 55 42 32 3 3 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 2 1 2 133 0 0 0 4 3 0 4 105 0 1 1 26 77 5 1 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 2 1 2 133 0 1 0 1 133 0 0 0 4 3 0 4 105 5 1 3 3 27 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 39 41 42 39 50 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = K.ss02;
},
{
glyphname = L.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,-41,o),
(214,-41,qs),
(164,-41,o),
(129,28,o),
(129,108,qs),
(129,157,o),
(134,249,qs),
(143,429,o),
(143,541,qs),
(143,652,o),
(138,742,q),
(132,765,o),
(132,775,qs),
(132,794,o),
(147,794,qs),
(156,794,o),
(175,787,q),
(205,779,o),
(210,778,q),
(215,712,o),
(220,556,o),
(221,484,qs),
(223,345,o),
(232,161,o),
(247,67,q),
(264,67,o),
(295,78,o),
(324,91,qs),
(357,106,o),
(402,121,o),
(428,121,q),
(480,83,o),
(480,56,qs),
(480,27,o),
(410,12,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
23 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 2 1 2 0 1 128 0 1 0 3 1 3 101 0 2 2 26 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 2 1 2 0 1 128 0 2 2 26 77 0 1 1 3 97 0 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 2 1 2 0 1 128 0 1 0 3 1 3 101 0 2 2 26 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
43 41 20 19 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = L.ss02;
},
{
glyphname = M.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,33,o),
(33,33,qs),
(17,33,o),
(-13,54,o),
(-22,71,q),
(27,363,ls),
(34,418,o),
(39,480,qs),
(48,565,o),
(61,661,o),
(75,704,q),
(116,704,o),
(182,632,o),
(229,532,o),
(259,452,qs),
(278,400,o),
(305,336,o),
(319,315,q),
(330,350,ls),
(390,560,o),
(432,574,q),
(482,574,o),
(544,482,o),
(574,358,o),
(589,264,qs),
(594,231,o),
(605,169,o),
(611,152,qs),
(617,128,o),
(617,111,qs),
(617,87,o),
(598,63,o),
(583,63,qs),
(563,63,o),
(530,97,o),
(530,120,q),
(511,177,o),
(485,304,o),
(471,392,qs),
(465,428,l),
(451,393,o),
(423,303,qs),
(414,274,o),
(394,210,o),
(384,185,q),
(378,183,o),
(366,183,qs),
(327,183,o),
(262,262,o),
(215,368,o),
(185,450,qs),
(154,535,o),
(140,558,q),
(120,353,o),
(59,55,q),
(59,39,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
37 15 2 3 0 2 50 19 2 1 0 55 0 2 4 1 3 76 0 3 2 3 133 0 2 0 2 133 0 0 1 0 133 0 1 4 1 133 0 4 4 118 40 25 26 44 39 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = M.ss02;
},
{
glyphname = N.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,-15,o),
(106,-15,qs),
(96,-15,o),
(63,6,o),
(39,36,o),
(39,48,qs),
(39,149,o),
(29,328,o),
(17,470,qs),
(7,592,l),
(7,616,o),
(26,616,qs),
(45,616,o),
(86,581,o),
(86,563,qs),
(86,517,l),
(143,475,o),
(230,373,o),
(289,290,qs),
(327,236,o),
(385,161,o),
(418,125,q),
(440,212,o),
(453,337,o),
(456,425,qs),
(460,526,o),
(465,581,qs),
(466,595,o),
(467,625,o),
(468,641,qs),
(471,714,o),
(485,790,o),
(508,790,qs),
(531,790,o),
(569,742,qs),
(573,737,o),
(585,718,o),
(585,707,q),
(573,631,o),
(561,483,o),
(556,376,qs),
(544,186,ls),
(525,-16,o),
(450,-16,qs),
(415,-16,o),
(327,66,o),
(247,176,o),
(190,261,qs),
(135,344,o),
(117,366,q),
(117,305,o),
(121,227,qs),
(124,176,o),
(124,127,qs),
(124,69,o),
(117,-4,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
17 1 2 1 55 45 39 33 13 5 6 0 2 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 2 1 0 1 2 0 128 0 1 1 26 77 3 1 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 1 2 1 133 0 2 0 2 133 3 1 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
54 52 44 42 41 42 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = N.ss02;
},
{
glyphname = Ntilde.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,-18,o),
(106,-18,qs),
(96,-18,o),
(63,1,o),
(39,29,o),
(39,40,qs),
(39,133,o),
(28,296,o),
(17,424,qs),
(7,535,l),
(7,556,o),
(26,556,qs),
(45,556,o),
(86,524,o),
(86,508,qs),
(86,467,l),
(143,428,o),
(229,336,o),
(289,260,qs),
(327,211,o),
(385,143,o),
(418,110,q),
(439,188,o),
(453,330,o),
(456,429,qs),
(460,535,o),
(465,593,qs),
(466,605,o),
(467,633,o),
(468,647,qs),
(471,714,o),
(485,783,o),
(508,783,qs),
(532,783,o),
(569,740,qs),
(573,735,o),
(585,718,o),
(585,708,q),
(574,645,o),
(563,495,o),
(557,379,qs),
(554,327,o),
(548,221,o),
(544,166,qs),
(525,-18,o),
(450,-18,qs),
(400,-18,o),
(276,115,o),
(190,233,qs),
(140,302,o),
(117,329,q),
(117,274,o),
(121,202,qs),
(124,156,o),
(124,112,qs),
(124,59,o),
(117,-7,q)
);
},
{
closed = 1;
nodes = (
(288,633,o),
(243,637,qs),
(191,642,o),
(123,655,o),
(66,691,o),
(55,724,q),
(55,736,o),
(59,740,o),
(71,740,q),
(80,738,o),
(113,734,o),
(130,732,qs),
(184,727,o),
(256,713,o),
(309,676,o),
(309,641,qs),
(309,633,o),
(308,629,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
58 26 18 3 2 4 56 46 40 34 5 5 0 2 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 2 4 0 4 2 0 128 0 1 1 26 77 0 4 4 28 77 3 1 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 1 4 1 133 0 2 4 0 4 2 0 128 0 4 4 28 77 3 1 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
66 65 55 53 45 43 43 41 5 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ntilde.ss02;
},
{
glyphname = O.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(290,0,o),
(280,0,qs),
(186,0,o),
(64,93,o),
(8,247,o),
(8,342,qs),
(8,452,o),
(77,671,o),
(194,811,o),
(260,811,qs),
(336,811,o),
(404,716,q),
(418,723,o),
(430,723,qs),
(442,723,o),
(459,711,o),
(473,697,q),
(526,628,o),
(584,455,o),
(584,367,qs),
(584,280,o),
(526,129,o),
(406,22,o),
(316,2,q)
);
},
{
closed = 1;
nodes = (
(180,84,o),
(206,84,qs),
(291,84,o),
(413,191,o),
(474,363,o),
(474,459,qs),
(474,521,o),
(447,636,o),
(421,681,q),
(413,673,o),
(403,673,qs),
(390,673,o),
(369,689,o),
(369,697,q),
(363,703,o),
(355,718,o),
(351,724,q),
(343,742,o),
(334,750,q),
(262,750,o),
(152,616,o),
(92,411,o),
(92,309,qs),
(92,235,o),
(126,117,o),
(159,88,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
40 11 2 4 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 0 5 0 4 5 128 0 3 3 1 97 0 1 1 26 77 0 0 0 28 77 0 5 5 2 97 0 2 2 30 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 0 3 4 3 0 4 128 0 4 5 3 4 5 126 0 1 0 3 0 1 3 105 0 5 5 2 97 0 2 2 30 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
39 39 23 38 34 40 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = O.ss02;
},
{
glyphname = P.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,-19,o),
(276,-19,qs),
(253,-19,o),
(224,23,o),
(207,83,o),
(197,134,qs),
(187,186,o),
(171,240,o),
(158,253,q),
(143,261,o),
(119,289,o),
(119,300,qs),
(119,309,o),
(138,320,o),
(158,320,q),
(138,428,ls),
(116,549,o),
(108,589,q),
(83,597,o),
(49,632,o),
(49,651,qs),
(49,672,o),
(74,690,q),
(74,740,l),
(60,758,o),
(60,769,qs),
(60,779,o),
(73,779,qs),
(88,779,o),
(125,754,o),
(125,740,q),
(212,795,o),
(290,795,qs),
(352,795,o),
(444,725,o),
(492,611,o),
(492,545,qs),
(492,476,o),
(437,350,o),
(325,263,o),
(242,253,q),
(246,235,o),
(261,175,qs),
(277,118,o),
(293,31,o),
(293,-16,q)
);
},
{
closed = 1;
nodes = (
(175,556,o),
(203,416,o),
(226,337,q),
(280,355,o),
(364,437,o),
(410,547,o),
(410,603,qs),
(410,671,o),
(377,723,q),
(359,726,o),
(343,726,qs),
(307,726,o),
(241,701,o),
(196,676,qs),
(164,659,o),
(158,656,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
21 14 2 4 1 61 58 22 3 2 4 45 4 2 3 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 4 3 4 2 3 128 0 1 1 26 77 0 4 4 0 97 0 0 0 26 77 0 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 0 4 0 1 4 128 0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 26 77 0 3 3 27 3 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
38 27 28 35 43 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = P.ss02;
},
{
glyphname = Q.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(554,-54,o),
(549,-54,qs),
(520,-54,o),
(478,-9,o),
(453,31,qs),
(435,60,o),
(424,71,q),
(367,44,o),
(313,44,qs),
(232,44,o),
(113,164,o),
(51,353,o),
(51,454,qs),
(51,521,o),
(80,641,o),
(108,684,qs),
(137,732,o),
(246,778,o),
(308,778,qs),
(342,778,o),
(370,772,q),
(459,737,o),
(547,551,o),
(547,430,qs),
(547,339,o),
(499,164,o),
(458,106,q),
(476,81,o),
(501,54,qs),
(532,19,o),
(564,-29,o),
(564,-52,q)
);
},
{
closed = 1;
nodes = (
(273,106,o),
(341,133,o),
(353,159,q),
(353,173,o),
(328,223,qs),
(302,277,o),
(302,292,qs),
(302,301,o),
(310,301,q),
(318,299,l),
(341,287,o),
(369,247,o),
(388,211,q),
(447,316,o),
(447,450,qs),
(447,587,o),
(388,719,q),
(304,724,o),
(193,643,o),
(140,502,o),
(140,416,qs),
(140,331,o),
(189,165,o),
(231,106,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
52 48 46 42 4 4 3 24 1 1 4 31 1 2 1 3 76 4 1 4 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 1 2 134 0 4 0 1 2 4 1 105 0 3 3 0 97 0 0 0 26 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 1 2 134 0 0 0 3 4 0 3 105 0 4 1 1 4 89 0 4 4 1 97 0 1 4 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
55 54 24 21 40 43 5 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Q.ss02;
},
{
glyphname = R.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(80,0,o),
(70,0,qs),
(25,0,o),
(-11,70,q),
(-11,137,o),
(-15,273,qs),
(-19,407,o),
(-19,475,qs),
(-19,587,o),
(-11,678,q),
(-12,729,ls),
(-12,752,o),
(-4,778,o),
(7,778,qs),
(24,778,o),
(56,746,q),
(92,761,o),
(130,761,qs),
(177,761,o),
(265,720,o),
(330,651,o),
(343,611,qs),
(345,602,o),
(345,584,qs),
(345,523,o),
(266,417,o),
(208,374,q),
(231,382,o),
(467,261,o),
(667,108,o),
(667,59,qs),
(667,34,o),
(636,20,q),
(624,24,o),
(581,57,o),
(556,78,qs),
(489,133,o),
(374,216,o),
(198,307,o),
(90,340,q),
(90,235,o),
(96,87,o),
(107,20,q),
(107,12,o),
(99,5,o),
(91,3,o),
(90,3,q)
);
},
{
closed = 1;
nodes = (
(73,442,l),
(143,466,o),
(232,541,o),
(232,593,qs),
(232,615,o),
(225,636,qs),
(216,658,o),
(174,682,o),
(150,682,qs),
(127,682,o),
(85,662,o),
(73,644,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
30 1 3 0 58 57 42 36 19 6 6 2 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 0 0 3 2 0 3 105 0 1 1 26 77 0 2 2 30 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 1 133 0 0 0 3 2 0 3 105 0 2 2 30 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
50 48 45 43 33 31 29 27 4 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = R.ss02;
},
{
glyphname = S.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(423,-62,o),
(400,-62,qs),
(352,-62,o),
(209,-14,o),
(102,51,o),
(102,74,qs),
(102,91,o),
(135,100,q),
(167,74,o),
(247,47,o),
(289,47,qs),
(354,47,o),
(454,111,o),
(469,171,qs),
(478,209,o),
(478,235,qs),
(478,274,o),
(441,317,o),
(380,338,o),
(328,346,q),
(261,361,o),
(152,436,o),
(88,545,o),
(88,606,qs),
(88,643,o),
(100,680,qs),
(119,745,o),
(233,813,o),
(304,813,qs),
(372,813,o),
(491,753,o),
(521,697,q),
(526,680,o),
(526,669,qs),
(526,651,o),
(511,628,o),
(498,628,qs),
(477,628,o),
(451,662,qs),
(446,669,o),
(446,673,qs),
(446,678,o),
(456,703,o),
(456,712,qs),
(456,722,o),
(451,732,q),
(414,746,o),
(381,746,qs),
(329,746,o),
(241,690,o),
(189,596,o),
(189,544,qs),
(189,486,o),
(223,434,q),
(251,427,o),
(285,422,qs),
(343,411,o),
(417,389,o),
(451,364,q),
(515,339,o),
(587,216,o),
(587,146,qs),
(587,75,o),
(509,-38,o),
(434,-57,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
56 1 3 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 1 0 3 0 1 3 128 0 3 4 0 3 4 126 0 4 4 132 0 0 0 2 97 0 2 2 26 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 1 0 3 0 1 3 128 0 3 4 0 3 4 126 0 4 4 132 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
63 61 54 52 38 41 47 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = S.ss02;
},
{
glyphname = T.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(319,-61,o),
(272,-29,o),
(243,26,o),
(243,59,qs),
(243,710,l),
(106,710,l),
(106,695,o),
(93,695,qs),
(82,695,o),
(48,716,o),
(37,726,q),
(32,732,o),
(32,739,qs),
(32,763,o),
(160,777,o),
(255,778,qs),
(277,778,l),
(338,781,ls),
(386,785,o),
(414,785,qs),
(466,785,o),
(537,759,o),
(551,726,q),
(541,705,o),
(449,705,qs),
(439,705,o),
(358,708,qs),
(311,710,l),
(316,631,o),
(328,494,qs),
(339,354,o),
(350,187,o),
(350,97,qs),
(350,7,o),
(345,-61,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
21 11 2 0 1 1 76
ELSE[ ]	/* Else */
PUSHB[ ]	/* 7 values pushed */
21 11 2 0 2 1 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 5 0 3 5 128 0 5 5 132 4 1 0 0 1 97 2 1 1 1 26 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 0 5 0 3 5 128 0 5 5 132 2 1 1 0 0 1 89 2 1 1 1 0 95 4 1 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 3 0 5 0 3 5 128 0 5 5 132 0 1 2 0 1 89 0 2 0 0 2 87 0 2 2 0 95 4 1 0 2 0 79
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
20 17 38 49 35 70 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = T.ss02;
},
{
glyphname = U.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(416,-8,o),
(389,-8,qs),
(289,-8,o),
(142,171,o),
(65,439,o),
(65,565,qs),
(65,692,o),
(102,753,q),
(114,753,o),
(158,722,o),
(158,709,qs),
(158,704,o),
(154,701,q),
(152,637,o),
(152,609,qs),
(152,439,o),
(203,197,o),
(282,74,o),
(324,74,qs),
(357,74,o),
(413,149,o),
(446,298,o),
(446,403,qs),
(446,540,o),
(418,701,q),
(427,726,o),
(439,726,qs),
(460,726,o),
(510,612,o),
(545,433,o),
(545,340,qs),
(545,234,o),
(493,54,o),
(436,-3,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
22 20 8 3 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 28 77 0 0 0 28 77 0 1 1 3 97 0 3 3 30 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 133 0 0 0 28 77 0 1 1 3 97 0 3 3 30 3 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
37 25 38 37 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = U.ss02;
},
{
glyphname = V.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,-17,o),
(219,150,o),
(134,371,o),
(83,530,qs),
(69,573,o),
(41,655,o),
(32,678,qs),
(26,690,o),
(26,697,qs),
(26,704,o),
(32,704,qs),
(43,704,o),
(81,675,o),
(106,639,o),
(100,628,q),
(149,528,o),
(216,361,qs),
(245,290,o),
(308,142,o),
(337,85,q),
(363,164,o),
(394,341,o),
(409,469,qs),
(424,582,o),
(442,701,o),
(456,763,q),
(456,774,o),
(473,797,o),
(490,814,q),
(536,803,o),
(573,744,o),
(573,699,qs),
(573,656,o),
(555,574,qs),
(540,505,o),
(540,475,q),
(520,413,o),
(503,293,qs),
(487,183,o),
(448,40,o),
(405,-17,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
20 4 2 1 0 1 76 14 11 2 0 74 0 0 1 0 133 0 1 1 27 1 78 40 39 29 28 2 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = V.ss02;
},
{
glyphname = W.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(467,12,o),
(401,71,o),
(358,146,o),
(330,205,qs),
(320,224,o),
(303,260,o),
(293,277,q),
(285,167,o),
(247,66,o),
(220,66,qs),
(179,66,o),
(76,259,o),
(-3,510,o),
(-7,576,q),
(-15,588,o),
(-15,596,qs),
(-15,604,o),
(-6,604,qs),
(3,604,o),
(27,587,o),
(33,576,q),
(33,572,o),
(42,552,qs),
(48,538,o),
(59,506,o),
(59,496,q),
(82,398,o),
(148,231,o),
(198,153,q),
(205,173,o),
(210,213,o),
(212,252,qs),
(214,299,o),
(223,351,o),
(238,372,q),
(279,372,o),
(335,327,o),
(369,263,o),
(390,208,qs),
(409,161,o),
(438,104,o),
(457,83,q),
(469,146,o),
(485,273,o),
(495,369,qs),
(508,496,o),
(531,663,o),
(552,741,q),
(563,758,ls),
(577,780,o),
(596,801,o),
(607,801,qs),
(620,801,o),
(636,785,q),
(643,771,o),
(643,752,qs),
(643,744,o),
(641,726,o),
(640,717,qs),
(636,689,o),
(636,675,q),
(608,572,o),
(574,356,o),
(557,203,qs),
(548,121,o),
(541,72,q),
(541,51,o),
(524,14,o),
(512,3,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
7 1 2 0 54 42 2 1 2 61 39 26 2 4 3 1 3 76 0 2 0 1 0 2 1 128 0 1 0 3 1 3 101 0 0 0 26 0 78 59 57 51 49 31 47 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = W.ss02;
},
{
glyphname = X.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,-31,o),
(492,-31,qs),
(472,-31,o),
(427,-5,o),
(427,6,qs),
(427,12,o),
(434,15,q),
(395,74,o),
(317,176,o),
(259,248,q),
(250,241,o),
(204,194,qs),
(138,123,o),
(35,33,o),
(-2,33,qs),
(-34,33,o),
(-46,73,q),
(10,113,o),
(104,214,o),
(163,288,qs),
(201,335,l),
(189,360,o),
(132,477,o),
(83,599,o),
(83,627,qs),
(83,644,o),
(94,644,qs),
(105,644,o),
(129,626,q),
(136,626,o),
(155,604,o),
(165,582,o),
(158,582,q),
(168,531,o),
(209,439,o),
(245,379,q),
(314,467,o),
(469,648,o),
(579,771,q),
(585,774,o),
(593,774,qs),
(616,774,o),
(667,732,o),
(667,713,q),
(636,662,o),
(431,438,qs),
(319,313,o),
(303,292,q),
(306,283,o),
(352,227,o),
(381,194,qs),
(448,118,o),
(528,13,o),
(528,-12,qs),
(528,-28,o),
(507,-28,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
11 1 1 0 45 34 19 7 4 2 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 3 2 133 5 4 2 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 3 2 133 5 4 2 3 3 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 55 0 55 43 42 45 29 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = X.ss02;
},
{
glyphname = Y.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,-50,o),
(189,-50,qs),
(159,-50,o),
(103,-1,o),
(103,27,q),
(138,82,o),
(201,209,o),
(240,295,qs),
(296,413,l),
(256,464,o),
(98,702,o),
(59,768,q),
(65,778,o),
(79,778,qs),
(98,778,o),
(139,751,o),
(139,737,qs),
(139,730,o),
(133,724,q),
(144,702,o),
(303,494,o),
(326,472,q),
(369,544,o),
(475,756,qs),
(482,770,o),
(489,783,q),
(485,787,o),
(485,794,qs),
(485,803,o),
(495,821,qs),
(503,837,o),
(503,842,q),
(507,846,o),
(514,846,qs),
(528,846,o),
(563,822,o),
(563,813,q),
(551,766,o),
(512,672,o),
(479,602,qs),
(435,510,o),
(415,457,qs),
(395,412,o),
(351,300,o),
(331,246,qs),
(295,147,o),
(242,16,o),
(207,-47,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
19 10 2 1 0 42 38 25 3 2 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 1 0 133 0 2 1 2 134 0 1 1 26 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 2 118
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
46 44 34 32 28 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Y.ss02;
},
{
glyphname = Z.ss02;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,-34,o),
(148,-34,qs),
(116,-34,o),
(58,11,o),
(58,41,qs),
(58,66,o),
(81,89,q),
(328,503,o),
(388,721,q),
(369,721,o),
(233,729,qs),
(97,737,o),
(81,737,q),
(74,734,o),
(65,734,qs),
(45,734,o),
(3,762,o),
(3,776,qs),
(3,785,o),
(12,789,q),
(45,789,o),
(102,794,qs),
(188,800,o),
(240,800,qs),
(326,800,o),
(448,765,o),
(474,721,q),
(478,704,o),
(478,680,qs),
(478,620,o),
(424,470,o),
(352,331,o),
(292,225,qs),
(271,188,o),
(229,114,o),
(217,89,q),
(240,96,o),
(301,124,qs),
(374,158,o),
(480,197,o),
(525,197,qs),
(606,197,o),
(627,122,q),
(570,101,o),
(408,47,o),
(330,22,qs),
(242,-5,o),
(166,-31,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 4 2 5 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 0 3 5 3 0 5 128 4 1 3 3 1 97 2 1 1 1 26 77 0 5 5 27 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 0 3 5 3 0 5 128 0 5 5 132 4 1 3 3 1 97 2 1 1 1 26 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 0 3 5 3 0 5 128 0 5 5 132 0 2 2 26 77 4 1 3 3 1 95 0 1 1 26 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 1 3 1 2 3 128 0 0 3 5 3 0 5 128 0 5 5 132 4 1 3 3 1 95 0 1 1 26 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 2 1 3 1 2 3 128 0 3 4 1 3 4 126 0 0 4 5 4 0 5 128 0 5 5 132 0 4 4 1 95 0 1 1 26 4 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 65 36 17 63 37 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Z.ss02;
},
{
glyphname = a;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,8,o),
(424,106,o),
(386,201,o),
(386,230,q),
(336,145,o),
(246,37,o),
(184,10,qs),
(168,4,o),
(148,4,qs),
(108,4,o),
(47,54,o),
(47,101,qs),
(47,114,o),
(50,129,qs),
(67,196,o),
(161,340,o),
(288,447,o),
(352,463,qs),
(368,467,o),
(385,467,qs),
(413,467,o),
(447,442,o),
(447,419,qs),
(447,403,o),
(436,379,q),
(448,379,o),
(470,343,o),
(470,329,q),
(487,268,o),
(527,189,o),
(595,120,o),
(654,78,q),
(660,72,o),
(678,67,o),
(678,63,qs),
(678,61,o),
(670,45,qs),
(658,19,o),
(604,-26,o),
(574,-26,qs),
(565,-26,o),
(554,-23,q)
);
},
{
closed = 1;
nodes = (
(296,173,o),
(338,237,o),
(352,279,qs),
(367,320,o),
(367,349,qs),
(367,396,o),
(319,396,qs),
(280,396,o),
(209,326,o),
(160,224,o),
(151,179,qs),
(148,166,o),
(148,153,qs),
(148,125,o),
(174,89,o),
(194,89,qs),
(231,89,o),
(268,144,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
37 13 2 4 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 5 2 1 2 5 1 128 0 1 4 2 1 4 126 0 4 3 2 4 3 126 0 2 2 29 77 0 3 3 30 77 0 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 2 5 2 133 0 5 1 5 133 0 1 4 1 133 0 4 3 4 133 0 3 3 30 77 0 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
39 41 41 36 29 32 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = a;
unicode = 97;
},
{
glyphname = aacute;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,8,o),
(424,106,o),
(386,201,o),
(386,230,q),
(336,145,o),
(246,37,o),
(184,10,qs),
(168,4,o),
(148,4,qs),
(108,4,o),
(47,54,o),
(47,101,qs),
(47,114,o),
(50,129,qs),
(67,196,o),
(161,340,o),
(288,447,o),
(352,463,qs),
(368,467,o),
(385,467,qs),
(413,467,o),
(447,442,o),
(447,419,qs),
(447,403,o),
(436,379,q),
(448,379,o),
(470,343,o),
(470,329,q),
(487,268,o),
(527,189,o),
(595,120,o),
(654,78,q),
(660,72,o),
(678,67,o),
(678,63,qs),
(678,61,o),
(670,45,qs),
(658,19,o),
(604,-26,o),
(574,-26,qs),
(565,-26,o),
(554,-23,q)
);
},
{
closed = 1;
nodes = (
(296,173,o),
(338,237,o),
(352,279,qs),
(367,320,o),
(367,349,qs),
(367,396,o),
(319,396,qs),
(280,396,o),
(209,326,o),
(160,224,o),
(151,179,qs),
(148,166,o),
(148,153,qs),
(148,125,o),
(174,89,o),
(194,89,qs),
(231,89,o),
(268,144,q)
);
},
{
closed = 1;
nodes = (
(521,625,ls),
(508,626,o),
(470,593,o),
(439,551,o),
(439,545,qs),
(439,538,o),
(453,522,o),
(461,521,q),
(464,520,o),
(470,520,qs),
(489,520,o),
(531,547,o),
(561,580,o),
(561,586,qs),
(561,599,o),
(540,623,o),
(528,625,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
37 13 2 4 1 1 76 62 1 6 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 6 2 6 133 0 5 2 1 2 5 1 128 0 1 4 2 1 4 126 0 4 3 2 4 3 126 0 2 2 29 77 0 3 3 30 77 0 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 6 2 6 133 0 2 5 2 133 0 5 1 5 133 0 1 4 1 133 0 4 3 4 133 0 3 3 30 77 0 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
28 39 41 41 36 29 32 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = acircumflex;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,8,o),
(424,106,o),
(386,201,o),
(386,230,q),
(336,145,o),
(246,37,o),
(184,10,qs),
(168,4,o),
(148,4,qs),
(108,4,o),
(47,54,o),
(47,101,qs),
(47,114,o),
(50,129,qs),
(67,196,o),
(161,340,o),
(288,447,o),
(352,463,qs),
(368,467,o),
(385,467,qs),
(413,467,o),
(447,442,o),
(447,419,qs),
(447,403,o),
(436,379,q),
(448,379,o),
(470,343,o),
(470,329,q),
(487,268,o),
(527,189,o),
(595,120,o),
(654,78,q),
(660,72,o),
(678,67,o),
(678,63,qs),
(678,61,o),
(670,45,qs),
(658,19,o),
(604,-26,o),
(574,-26,qs),
(565,-26,o),
(554,-23,q)
);
},
{
closed = 1;
nodes = (
(296,173,o),
(338,237,o),
(352,279,qs),
(367,320,o),
(367,349,qs),
(367,396,o),
(319,396,qs),
(280,396,o),
(209,326,o),
(160,224,o),
(151,179,qs),
(148,166,o),
(148,153,qs),
(148,125,o),
(174,89,o),
(194,89,qs),
(231,89,o),
(268,144,q)
);
},
{
closed = 1;
nodes = (
(133,590,o),
(172,620,qs),
(191,637,ls),
(210,656,o),
(297,725,o),
(314,725,q),
(318,724,l),
(357,708,o),
(434,647,o),
(464,610,qs),
(487,580,o),
(487,564,qs),
(487,551,o),
(474,547,qs),
(462,542,o),
(447,542,qs),
(436,542,o),
(379,590,o),
(338,627,qs),
(318,647,o),
(306,656,qs),
(305,657,l),
(299,653,o),
(280,628,o),
(278,626,qs),
(246,587,o),
(202,547,o),
(176,547,qs),
(166,547,o),
(148,561,o),
(132,578,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
90 68 2 6 8 37 13 2 4 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
7 1 6 8 2 8 6 2 128 0 1 5 4 5 1 4 128 0 4 3 5 4 3 126 0 2 2 29 77 0 5 5 8 97 0 8 8 28 77 0 3 3 30 77 0 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
7 1 6 8 2 8 6 2 128 0 2 5 8 2 5 126 0 1 5 4 5 1 4 128 0 4 3 5 4 3 126 0 5 5 8 97 0 8 8 28 77 0 3 3 30 77 0 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 6 8 7 8 6 7 128 0 7 2 8 7 2 126 0 2 5 8 2 5 126 0 1 5 4 5 1 4 128 0 4 3 5 4 3 126 0 5 5 8 97 0 8 8 28 77 0 3 3 30 77 0 0 0 27 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
40 42 40 39 41 41 36 29 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,8,o),
(424,106,o),
(386,201,o),
(386,230,q),
(336,145,o),
(246,37,o),
(184,10,qs),
(168,4,o),
(148,4,qs),
(108,4,o),
(47,54,o),
(47,101,qs),
(47,114,o),
(50,129,qs),
(67,196,o),
(161,340,o),
(288,447,o),
(352,463,qs),
(368,467,o),
(385,467,qs),
(413,467,o),
(447,442,o),
(447,419,qs),
(447,403,o),
(436,379,q),
(448,379,o),
(470,343,o),
(470,329,q),
(487,268,o),
(527,189,o),
(595,120,o),
(654,78,q),
(660,72,o),
(678,67,o),
(678,63,qs),
(678,61,o),
(670,45,qs),
(658,19,o),
(604,-26,o),
(574,-26,qs),
(565,-26,o),
(554,-23,q)
);
},
{
closed = 1;
nodes = (
(296,173,o),
(338,237,o),
(352,279,qs),
(367,320,o),
(367,349,qs),
(367,396,o),
(319,396,qs),
(280,396,o),
(209,326,o),
(160,224,o),
(151,179,qs),
(148,166,o),
(148,153,qs),
(148,125,o),
(174,89,o),
(194,89,qs),
(231,89,o),
(268,144,q)
);
},
{
closed = 1;
nodes = (
(223,624,o),
(206,639,o),
(187,639,qs),
(164,639,o),
(128,607,o),
(128,589,qs),
(128,573,o),
(145,563,qs),
(157,555,o),
(171,555,qs),
(192,555,o),
(223,586,o),
(223,606,qs)
);
},
{
closed = 1;
nodes = (
(413,644,o),
(376,622,o),
(376,593,qs),
(376,576,o),
(402,553,o),
(428,553,qs),
(438,553,ls),
(458,553,o),
(467,559,qs),
(489,573,o),
(489,592,qs),
(489,611,o),
(449,644,o),
(432,644,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
37 13 2 4 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
10 9 2 7 6 7 133 0 5 2 1 2 5 1 128 0 1 4 2 1 4 126 0 4 3 2 4 3 126 0 2 2 29 77 8 1 6 6 3 97 0 3 3 30 77 0 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
10 9 2 7 6 7 133 0 2 6 5 6 2 5 128 0 5 1 6 5 1 126 0 1 4 6 1 4 126 0 4 3 6 4 3 126 8 1 6 6 3 97 0 3 3 30 77 0 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
10 1 9 7 9 133 0 7 6 7 133 0 2 6 5 6 2 5 128 0 5 1 6 5 1 126 0 1 4 6 1 4 126 0 4 3 6 4 3 126 8 1 6 6 3 97 0 3 3 30 77 0 0 0 27 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
73 73 73 86 73 85 56 37 40 39 41 41 36 29 32 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = agrave;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,8,o),
(424,106,o),
(386,201,o),
(386,230,q),
(336,145,o),
(246,37,o),
(184,10,qs),
(168,4,o),
(148,4,qs),
(108,4,o),
(47,54,o),
(47,101,qs),
(47,114,o),
(50,129,qs),
(67,196,o),
(161,340,o),
(288,447,o),
(352,463,qs),
(368,467,o),
(385,467,qs),
(413,467,o),
(447,442,o),
(447,419,qs),
(447,403,o),
(436,379,q),
(448,379,o),
(470,343,o),
(470,329,q),
(487,268,o),
(527,189,o),
(595,120,o),
(654,78,q),
(660,72,o),
(678,67,o),
(678,63,qs),
(678,61,o),
(670,45,qs),
(658,19,o),
(604,-26,o),
(574,-26,qs),
(565,-26,o),
(554,-23,q)
);
},
{
closed = 1;
nodes = (
(296,173,o),
(338,237,o),
(352,279,qs),
(367,320,o),
(367,349,qs),
(367,396,o),
(319,396,qs),
(280,396,o),
(209,326,o),
(160,224,o),
(151,179,qs),
(148,166,o),
(148,153,qs),
(148,125,o),
(174,89,o),
(194,89,qs),
(231,89,o),
(268,144,q)
);
},
{
closed = 1;
nodes = (
(140,620,l),
(136,608,o),
(160,563,o),
(194,523,o),
(200,522,qs),
(207,520,o),
(225,530,o),
(228,538,qs),
(232,546,o),
(232,559,qs),
(232,577,o),
(214,618,o),
(192,649,o),
(187,650,qs),
(173,653,o),
(146,637,o),
(141,626,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
37 13 2 4 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 5 2 1 2 5 1 128 0 1 4 2 1 4 126 0 4 3 2 4 3 126 0 2 2 29 77 0 3 3 30 77 0 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 2 5 2 133 0 5 1 5 133 0 1 4 1 133 0 4 3 4 133 0 3 3 30 77 0 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
39 41 41 36 29 32 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = amacron;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,8,o),
(424,106,o),
(386,201,o),
(386,230,q),
(336,145,o),
(246,37,o),
(184,10,qs),
(168,4,o),
(148,4,qs),
(108,4,o),
(47,54,o),
(47,101,qs),
(47,114,o),
(50,129,qs),
(67,196,o),
(161,340,o),
(288,447,o),
(352,463,qs),
(368,467,o),
(385,467,qs),
(413,467,o),
(447,442,o),
(447,419,qs),
(447,403,o),
(436,379,q),
(448,379,o),
(470,343,o),
(470,329,q),
(487,268,o),
(527,189,o),
(595,120,o),
(654,78,q),
(660,72,o),
(678,67,o),
(678,63,qs),
(678,61,o),
(670,45,qs),
(658,19,o),
(604,-26,o),
(574,-26,qs),
(565,-26,o),
(554,-23,q)
);
},
{
closed = 1;
nodes = (
(296,173,o),
(338,237,o),
(352,279,qs),
(367,320,o),
(367,349,qs),
(367,396,o),
(319,396,qs),
(280,396,o),
(209,326,o),
(160,224,o),
(151,179,qs),
(148,166,o),
(148,153,qs),
(148,125,o),
(174,89,o),
(194,89,qs),
(231,89,o),
(268,144,q)
);
},
{
closed = 1;
nodes = (
(408,657,l),
(342,659,l),
(265,660,ls),
(137,660,o),
(114,643,qs),
(110,640,o),
(110,629,qs),
(110,622,o),
(111,620,q),
(116,592,o),
(175,592,qs),
(199,593,ls),
(229,595,o),
(243,595,qs),
(272,595,o),
(330,592,o),
(359,590,qs),
(404,587,ls),
(415,586,o),
(438,583,o),
(449,583,qs),
(461,583,o),
(471,586,qs),
(484,590,o),
(503,625,o),
(503,641,qs),
(503,659,o),
(491,659,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
80 1 6 8 37 13 2 4 1 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
80 1 7 8 37 13 2 4 1 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
9 1 8 6 8 133 0 1 5 4 5 1 4 128 0 4 3 5 4 3 126 7 1 6 0 5 1 6 5 105 0 2 2 29 77 0 3 3 30 77 0 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
9 1 8 7 8 133 0 6 7 2 7 6 2 128 0 2 5 7 2 5 126 0 1 5 4 5 1 4 128 0 4 3 5 4 3 126 0 7 0 5 1 7 5 105 0 3 3 30 77 0 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
60 60 60 87 60 83 130 44 39 41 41 36 29 32 10 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = aring;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,8,o),
(424,106,o),
(386,201,o),
(386,230,q),
(336,145,o),
(246,37,o),
(184,10,qs),
(168,4,o),
(148,4,qs),
(108,4,o),
(47,54,o),
(47,101,qs),
(47,114,o),
(50,129,qs),
(67,196,o),
(161,340,o),
(288,447,o),
(352,463,qs),
(368,467,o),
(385,467,qs),
(413,467,o),
(447,442,o),
(447,419,qs),
(447,403,o),
(436,379,q),
(448,379,o),
(470,343,o),
(470,329,q),
(487,268,o),
(527,189,o),
(595,120,o),
(654,78,q),
(660,72,o),
(678,67,o),
(678,63,qs),
(678,61,o),
(670,45,qs),
(658,19,o),
(604,-26,o),
(574,-26,qs),
(565,-26,o),
(554,-23,q)
);
},
{
closed = 1;
nodes = (
(296,173,o),
(338,237,o),
(352,279,qs),
(367,320,o),
(367,349,qs),
(367,396,o),
(319,396,qs),
(280,396,o),
(209,326,o),
(160,224,o),
(151,179,qs),
(148,166,o),
(148,153,qs),
(148,125,o),
(174,89,o),
(194,89,qs),
(231,89,o),
(268,144,q)
);
},
{
closed = 1;
nodes = (
(385,654,o),
(339,665,o),
(318,665,qs),
(299,665,o),
(277,647,o),
(277,624,qs),
(277,619,ls),
(277,608,o),
(284,601,q),
(299,582,o),
(331,582,qs),
(356,582,o),
(396,606,o),
(396,625,qs),
(396,633,o),
(392,641,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
37 13 2 4 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 7 6 7 133 0 1 5 4 5 1 4 128 0 4 3 5 4 3 126 0 6 0 5 1 6 5 105 0 2 2 29 77 0 3 3 30 77 0 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 7 6 7 133 0 2 6 5 6 2 5 128 0 1 5 4 5 1 4 128 0 4 3 5 4 3 126 0 6 0 5 1 6 5 105 0 3 3 30 77 0 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
38 42 39 41 41 36 29 32 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = aring;
unicode = 229;
},
{
glyphname = atilde;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,8,o),
(424,106,o),
(386,201,o),
(386,230,q),
(336,145,o),
(246,37,o),
(184,10,qs),
(168,4,o),
(148,4,qs),
(108,4,o),
(47,54,o),
(47,101,qs),
(47,114,o),
(50,129,qs),
(67,196,o),
(161,340,o),
(288,447,o),
(352,463,qs),
(368,467,o),
(385,467,qs),
(413,467,o),
(447,442,o),
(447,419,qs),
(447,403,o),
(436,379,q),
(448,379,o),
(470,343,o),
(470,329,q),
(487,268,o),
(527,189,o),
(595,120,o),
(654,78,q),
(660,72,o),
(678,67,o),
(678,63,qs),
(678,61,o),
(670,45,qs),
(658,19,o),
(604,-26,o),
(574,-26,qs),
(565,-26,o),
(554,-23,q)
);
},
{
closed = 1;
nodes = (
(296,173,o),
(338,237,o),
(352,279,qs),
(367,320,o),
(367,349,qs),
(367,396,o),
(319,396,qs),
(280,396,o),
(209,326,o),
(160,224,o),
(151,179,qs),
(148,166,o),
(148,153,qs),
(148,125,o),
(174,89,o),
(194,89,qs),
(231,89,o),
(268,144,q)
);
},
{
closed = 1;
nodes = (
(93,622,o),
(162,673,o),
(215,673,qs),
(229,673,o),
(257,669,qs),
(276,666,o),
(320,652,o),
(341,645,qs),
(400,623,o),
(434,619,qs),
(460,616,o),
(482,616,qs),
(528,616,o),
(566,627,qs),
(569,628,o),
(579,631,o),
(582,631,q),
(583,630,o),
(583,617,qs),
(583,605,ls),
(583,583,o),
(569,564,o),
(556,560,o),
(518,553,qs),
(508,551,o),
(488,551,qs),
(460,551,o),
(405,566,o),
(367,580,qs),
(328,594,o),
(287,606,o),
(264,608,qs),
(255,608,ls),
(238,608,o),
(216,603,q),
(198,594,ls),
(176,583,o),
(119,559,o),
(105,559,qs),
(101,559,o),
(94,564,o),
(93,568,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
101 1 6 7 37 13 2 4 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 7 9 6 9 7 6 128 0 5 2 1 2 5 1 128 0 1 4 2 1 4 126 0 4 3 2 4 3 126 0 9 8 1 6 2 9 6 105 0 2 2 29 77 0 10 10 3 97 0 3 3 30 77 0 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 68 values pushed */
0 7 9 6 9 7 6 128 0 6 8 9 6 8 126 0 2 8 5 8 2 5 128 0 5 1 8 5 1 126 0 1 4 8 1 4 126 0 4 3 8 4 3 126 0 9 0 8 2 9 8 105 0 10 10 3 97 0 3 3 30 77 0 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
99 97 90 88 37 36 40 39 41 41 36 29 32 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = ae;
layers = (
{
layerId = m01;
width = 600;
}
);
note = ae;
unicode = 230;
},
{
glyphname = b;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(362,28,o),
(389,142,q),
(400,172,o),
(400,218,qs),
(400,249,o),
(386,289,o),
(371,289,qs),
(365,289,o),
(354,283,q),
(279,208,o),
(279,110,qs),
(279,87,o),
(283,53,q),
(283,36,o),
(254,4,o),
(213,-17,o),
(195,-17,qs),
(182,-17,o),
(177,-13,o),
(177,0,qs),
(174,71,o),
(158,207,o),
(145,300,qs),
(126,439,o),
(124,460,qs),
(124,471,o),
(117,529,qs),
(106,635,o),
(106,655,qs),
(106,662,o),
(141,701,o),
(185,733,o),
(199,733,qs),
(209,733,o),
(213,725,q),
(213,637,ls),
(213,574,o),
(219,526,qs),
(223,493,o),
(239,404,qs),
(266,252,o),
(266,230,q),
(277,254,o),
(300,282,o),
(319,301,qs),
(344,327,o),
(398,356,o),
(422,356,qs),
(450,356,o),
(490,312,o),
(496,266,q),
(496,146,o),
(348,-64,o),
(219,-129,q),
(200,-134,o),
(200,-116,qs),
(200,-102,o),
(221,-57,o),
(250,-22,o),
(262,-21,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
34 24 2 0 1 46 17 8 3 2 3 2 76 0 0 1 3 1 0 3 128 0 3 2 1 3 2 126 0 1 1 28 77 0 2 2 27 2 78 40 46 45 42 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,36,o),
(148,120,o),
(148,203,qs),
(148,248,o),
(196,392,o),
(290,502,o),
(356,502,qs),
(402,502,o),
(453,472,qs),
(468,464,o),
(468,444,qs),
(468,431,o),
(456,406,o),
(441,394,o),
(435,400,qs),
(423,412,o),
(385,427,o),
(363,427,qs),
(327,427,o),
(260,380,o),
(238,328,q),
(221,303,o),
(196,220,o),
(196,180,qs),
(196,147,o),
(216,93,o),
(238,77,q),
(255,70,o),
(274,70,qs),
(312,70,o),
(381,123,o),
(423,171,qs),
(453,203,l),
(456,203,o),
(473,201,o),
(489,193,o),
(489,185,q),
(476,127,o),
(415,44,o),
(335,3,o),
(294,3,qs),
(254,3,o),
(220,23,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 1 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 97 0 3 3 29 77 0 1 1 0 97 0 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 1 3 2 105 0 1 1 0 97 0 0 0 30 0 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
41 41 42 32 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = c;
unicode = 99;
},
{
glyphname = ccedilla;
layers = (
{
layerId = m01;
width = 600;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = d;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(437,-93,o),
(406,10,o),
(385,151,o),
(384,178,q),
(347,106,o),
(237,-3,o),
(168,-3,qs),
(119,-3,o),
(67,64,o),
(67,110,qs),
(67,129,o),
(71,144,q),
(79,202,o),
(160,334,o),
(275,422,o),
(331,422,qs),
(343,422,o),
(349,421,q),
(349,486,o),
(332,642,qs),
(330,666,ls),
(329,678,o),
(354,703,o),
(390,727,o),
(402,735,qs),
(408,738,o),
(412,738,qs),
(424,738,o),
(424,717,q),
(432,653,o),
(480,315,o),
(531,-1,o),
(540,-13,qs),
(546,-20,o),
(507,-49,o),
(472,-70,qs),
(453,-82,ls)
);
},
{
closed = 1;
nodes = (
(218,87,o),
(227,87,qs),
(258,87,o),
(315,171,o),
(351,277,o),
(349,300,qs),
(340,361,o),
(301,361,qs),
(274,361,o),
(210,310,o),
(191,281,qs),
(167,241,o),
(167,191,qs),
(167,157,o),
(190,101,o),
(210,91,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 1 0 32 1 4 3 2 76 0 1 0 3 4 1 3 105 0 0 0 28 77 0 4 4 2 97 0 2 2 30 2 78 36 45 39 57 24 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = d;
unicode = 100;
},
{
glyphname = eth;
layers = (
{
layerId = m01;
width = 600;
}
);
note = eth;
unicode = 240;
},
{
glyphname = e;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,119,o),
(127,214,o),
(127,274,q),
(111,268,o),
(98,268,qs),
(80,268,o),
(73,281,q),
(65,305,o),
(65,317,qs),
(65,324,o),
(69,329,o),
(72,329,o),
(73,329,q),
(81,325,o),
(89,325,qs),
(97,325,o),
(127,335,q),
(127,389,o),
(152,439,qs),
(172,480,o),
(240,538,o),
(315,567,o),
(346,567,qs),
(370,567,o),
(399,549,o),
(399,532,qs),
(399,522,o),
(395,513,q),
(382,450,o),
(271,327,o),
(212,297,q),
(215,263,o),
(249,170,o),
(302,102,o),
(333,102,qs),
(357,102,o),
(377,121,qs),
(404,147,o),
(486,242,o),
(519,299,q),
(525,303,o),
(527,303,qs),
(534,303,o),
(542,282,o),
(542,269,qs),
(542,259,o),
(538,245,q),
(517,190,o),
(440,75,o),
(342,-3,o),
(292,-3,qs),
(221,-3,o),
(162,84,qs)
);
},
{
closed = 1;
nodes = (
(216,453,o),
(199,408,o),
(199,383,qs),
(199,367,o),
(202,352,q),
(219,360,o),
(273,400,o),
(288,415,qs),
(302,428,o),
(319,463,o),
(319,478,qs),
(319,489,o),
(308,502,o),
(298,502,qs),
(275,502,o),
(234,469,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
63 39 35 3 4 6 49 21 2 5 1 2 76 0 3 6 3 133 0 6 4 6 133 0 1 4 5 4 1 5 128 0 4 0 5 2 4 5 105 0 2 2 0 98 0 0 0 30 0 78 37 40 38 42 37 39 32 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = e;
unicode = 101;
},
{
glyphname = eacute;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,119,o),
(127,214,o),
(127,274,q),
(111,268,o),
(98,268,qs),
(80,268,o),
(73,281,q),
(65,305,o),
(65,317,qs),
(65,324,o),
(69,329,o),
(72,329,o),
(73,329,q),
(81,325,o),
(89,325,qs),
(97,325,o),
(127,335,q),
(127,389,o),
(152,439,qs),
(172,480,o),
(240,538,o),
(315,567,o),
(346,567,qs),
(370,567,o),
(399,549,o),
(399,532,qs),
(399,522,o),
(395,513,q),
(382,450,o),
(271,327,o),
(212,297,q),
(215,263,o),
(249,170,o),
(302,102,o),
(333,102,qs),
(357,102,o),
(377,121,qs),
(404,147,o),
(486,242,o),
(519,299,q),
(525,303,o),
(527,303,qs),
(534,303,o),
(542,282,o),
(542,269,qs),
(542,259,o),
(538,245,q),
(517,190,o),
(440,75,o),
(342,-3,o),
(292,-3,qs),
(221,-3,o),
(162,84,qs)
);
},
{
closed = 1;
nodes = (
(216,453,o),
(199,408,o),
(199,383,qs),
(199,367,o),
(202,352,q),
(219,360,o),
(273,400,o),
(288,415,qs),
(302,428,o),
(319,463,o),
(319,478,qs),
(319,489,o),
(308,502,o),
(298,502,qs),
(275,502,o),
(234,469,qs)
);
},
{
closed = 1;
nodes = (
(444,743,o),
(392,712,o),
(356,670,o),
(356,656,qs),
(356,641,o),
(379,640,q),
(380,639,o),
(382,639,qs),
(400,639,o),
(448,668,o),
(483,709,o),
(483,724,qs),
(483,734,o),
(475,739,q),
(471,743,o),
(465,743,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
63 39 35 3 4 6 49 21 2 5 1 2 76 0 8 7 8 133 0 7 3 7 133 0 3 6 3 133 0 6 4 6 133 0 1 4 5 4 1 5 128 0 4 0 5 2 4 5 105 0 2 2 0 98 0 0 0 30 0 78 84 83 76 75 37 40 38 42 37 39 32 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ecircumflex;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,119,o),
(127,214,o),
(127,274,q),
(111,268,o),
(98,268,qs),
(80,268,o),
(73,281,q),
(65,305,o),
(65,317,qs),
(65,324,o),
(69,329,o),
(72,329,o),
(73,329,q),
(81,325,o),
(89,325,qs),
(97,325,o),
(127,335,q),
(127,389,o),
(152,439,qs),
(172,480,o),
(240,538,o),
(315,567,o),
(346,567,qs),
(370,567,o),
(399,549,o),
(399,532,qs),
(399,522,o),
(395,513,q),
(382,450,o),
(271,327,o),
(212,297,q),
(215,263,o),
(249,170,o),
(302,102,o),
(333,102,qs),
(357,102,o),
(377,121,qs),
(404,147,o),
(486,242,o),
(519,299,q),
(525,303,o),
(527,303,qs),
(534,303,o),
(542,282,o),
(542,269,qs),
(542,259,o),
(538,245,q),
(517,190,o),
(440,75,o),
(342,-3,o),
(292,-3,qs),
(221,-3,o),
(162,84,qs)
);
},
{
closed = 1;
nodes = (
(216,453,o),
(199,408,o),
(199,383,qs),
(199,367,o),
(202,352,q),
(219,360,o),
(273,400,o),
(288,415,qs),
(302,428,o),
(319,463,o),
(319,478,qs),
(319,489,o),
(308,502,o),
(298,502,qs),
(275,502,o),
(234,469,qs)
);
},
{
closed = 1;
nodes = (
(140,646,o),
(159,663,o),
(178,677,qs),
(197,689,o),
(201,693,qs),
(221,711,ls),
(255,742,o),
(295,776,o),
(304,776,q),
(305,775,l),
(319,772,o),
(343,750,o),
(364,727,qs),
(380,708,l),
(398,694,ls),
(421,676,o),
(445,653,o),
(445,644,qs),
(445,631,o),
(415,628,q),
(413,627,o),
(408,627,qs),
(389,627,o),
(358,646,o),
(338,665,qs),
(321,681,o),
(297,697,o),
(282,697,qs),
(276,697,o),
(273,696,qs),
(262,694,o),
(233,671,o),
(213,651,qs),
(192,630,o),
(167,610,o),
(158,610,qs),
(155,610,o),
(154,611,q),
(151,612,o),
(140,629,o),
(136,634,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
109 1 9 8 63 39 35 3 4 6 49 21 2 5 1 3 76 0 8 9 8 133 0 9 7 9 133 0 7 3 7 133 0 3 6 3 133 0 6 4 6 133 0 1 4 5 4 1 5 128 0 4 0 5 2 4 5 105 0 2 2 0 98 0 0 0 30 0 78 87 86 82 81 74 73 37 40 38 42 37 39 32 10 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,119,o),
(127,214,o),
(127,274,q),
(111,268,o),
(98,268,qs),
(80,268,o),
(73,281,q),
(65,305,o),
(65,317,qs),
(65,324,o),
(69,329,o),
(72,329,o),
(73,329,q),
(81,325,o),
(89,325,qs),
(97,325,o),
(127,335,q),
(127,389,o),
(152,439,qs),
(172,480,o),
(240,538,o),
(315,567,o),
(346,567,qs),
(370,567,o),
(399,549,o),
(399,532,qs),
(399,522,o),
(395,513,q),
(382,450,o),
(271,327,o),
(212,297,q),
(215,263,o),
(249,170,o),
(302,102,o),
(333,102,qs),
(357,102,o),
(377,121,qs),
(404,147,o),
(486,242,o),
(519,299,q),
(525,303,o),
(527,303,qs),
(534,303,o),
(542,282,o),
(542,269,qs),
(542,259,o),
(538,245,q),
(517,190,o),
(440,75,o),
(342,-3,o),
(292,-3,qs),
(221,-3,o),
(162,84,qs)
);
},
{
closed = 1;
nodes = (
(216,453,o),
(199,408,o),
(199,383,qs),
(199,367,o),
(202,352,q),
(219,360,o),
(273,400,o),
(288,415,qs),
(302,428,o),
(319,463,o),
(319,478,qs),
(319,489,o),
(308,502,o),
(298,502,qs),
(275,502,o),
(234,469,qs)
);
},
{
closed = 1;
nodes = (
(231,704,o),
(212,712,o),
(197,712,qs),
(180,712,o),
(159,684,o),
(159,667,qs),
(159,655,o),
(164,650,q),
(171,639,o),
(184,639,qs),
(200,639,o),
(231,670,o),
(231,687,qs)
);
},
{
closed = 1;
nodes = (
(421,744,o),
(392,731,o),
(367,709,o),
(367,695,qs),
(367,675,o),
(394,642,o),
(413,642,qs),
(421,642,o),
(426,644,qs),
(463,656,o),
(463,694,qs),
(463,713,o),
(440,744,o),
(425,744,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
63 39 35 3 4 6 49 21 2 5 1 2 76 11 1 10 8 10 133 0 8 7 8 133 9 1 7 3 7 133 0 3 6 3 133 0 6 4 6 133 0 1 4 5 4 1 5 128 0 4 0 5 2 4 5 105 0 2 2 0 98 0 0 0 30 0 78 82 82 82 95 82 94 89 88 37 47 37 40 38 42 37 39 32 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = egrave;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,119,o),
(127,214,o),
(127,274,q),
(111,268,o),
(98,268,qs),
(80,268,o),
(73,281,q),
(65,305,o),
(65,317,qs),
(65,324,o),
(69,329,o),
(72,329,o),
(73,329,q),
(81,325,o),
(89,325,qs),
(97,325,o),
(127,335,q),
(127,389,o),
(152,439,qs),
(172,480,o),
(240,538,o),
(315,567,o),
(346,567,qs),
(370,567,o),
(399,549,o),
(399,532,qs),
(399,522,o),
(395,513,q),
(382,450,o),
(271,327,o),
(212,297,q),
(215,263,o),
(249,170,o),
(302,102,o),
(333,102,qs),
(357,102,o),
(377,121,qs),
(404,147,o),
(486,242,o),
(519,299,q),
(525,303,o),
(527,303,qs),
(534,303,o),
(542,282,o),
(542,269,qs),
(542,259,o),
(538,245,q),
(517,190,o),
(440,75,o),
(342,-3,o),
(292,-3,qs),
(221,-3,o),
(162,84,qs)
);
},
{
closed = 1;
nodes = (
(216,453,o),
(199,408,o),
(199,383,qs),
(199,367,o),
(202,352,q),
(219,360,o),
(273,400,o),
(288,415,qs),
(302,428,o),
(319,463,o),
(319,478,qs),
(319,489,o),
(308,502,o),
(298,502,qs),
(275,502,o),
(234,469,qs)
);
},
{
closed = 1;
nodes = (
(173,756,o),
(211,731,o),
(241,698,o),
(241,687,qs),
(241,677,o),
(227,674,q),
(225,673,o),
(220,673,qs),
(205,673,o),
(165,696,o),
(137,728,o),
(137,740,qs),
(137,749,o),
(146,756,o),
(164,756,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
63 39 35 3 4 6 49 21 2 5 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 7 8 3 8 7 3 128 0 3 6 8 3 6 126 0 6 4 8 6 4 126 0 1 4 5 4 1 5 128 0 4 0 5 2 4 5 105 9 1 8 8 28 77 0 2 2 0 98 0 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
9 1 8 7 8 133 0 7 3 7 133 0 3 6 3 133 0 6 4 6 133 0 1 4 5 4 1 5 128 0 4 0 5 2 4 5 105 0 2 2 0 98 0 0 0 30 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
69 69 69 83 69 82 75 74 37 40 38 42 37 39 32 10 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = f;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,-134,l),
(222,35,o),
(200,204,q),
(194,204,o),
(142,194,qs),
(93,183,o),
(80,183,qs),
(70,183,o),
(41,224,o),
(41,238,qs),
(41,248,o),
(51,248,qs),
(62,248,o),
(116,263,qs),
(172,277,o),
(180,277,q),
(167,375,o),
(167,435,qs),
(167,722,o),
(376,740,qs),
(417,744,o),
(484,719,o),
(517,692,o),
(526,684,q),
(530,678,o),
(517,658,o),
(493,635,o),
(484,626,q),
(469,626,l),
(438,651,o),
(389,679,o),
(354,679,qs),
(293,679,o),
(241,560,o),
(241,470,qs),
(241,420,o),
(254,322,o),
(261,293,q),
(317,307,o),
(351,318,o),
(398,336,q),
(406,338,l),
(417,338,o),
(430,313,o),
(430,297,qs),
(430,271,o),
(416,264,qs),
(367,238,o),
(272,220,q),
(282,148,o),
(315,50,o),
(353,-16,o),
(386,-62,qs),
(403,-86,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
37 15 2 3 0 4 1 4 3 2 76 53 52 2 4 73 0 1 2 1 133 0 2 0 2 133 0 0 3 0 133 0 3 4 3 133 0 4 4 118 35 47 18 41 26 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(639,-385,o),
(520,-385,qs),
(461,-385,o),
(315,-334,o),
(208,-288,qs),
(150,-262,o),
(84,-237,o),
(66,-237,qs),
(52,-237,o),
(52,-225,qs),
(52,-207,o),
(101,-147,o),
(122,-140,q),
(132,-138,o),
(137,-138,qs),
(162,-138,o),
(229,-165,o),
(284,-192,qs),
(343,-222,o),
(420,-252,o),
(450,-252,qs),
(483,-252,o),
(518,-204,o),
(517,-150,qs),
(510,-50,o),
(456,162,o),
(412,228,q),
(403,191,o),
(324,104,o),
(223,45,o),
(182,45,qs),
(162,45,o),
(148,52,q),
(83,96,o),
(83,182,qs),
(83,252,o),
(170,405,o),
(307,507,o),
(377,508,q),
(408,511,o),
(438,488,o),
(445,464,o),
(446,456,q),
(481,456,l),
(495,395,o),
(533,268,o),
(551,212,qs),
(582,115,o),
(616,-10,o),
(639,-164,o),
(639,-255,qs)
);
},
{
closed = 1;
nodes = (
(184,168,o),
(213,134,o),
(237,134,qs),
(259,134,o),
(284,148,q),
(327,178,o),
(378,287,o),
(378,336,qs),
(378,375,o),
(362,394,q),
(347,407,o),
(328,407,qs),
(297,407,o),
(230,356,o),
(184,258,o),
(184,192,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
23 1 8 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 0 1 7 1 0 7 128 0 4 2 5 2 4 5 128 0 5 3 2 5 3 126 0 1 0 7 8 1 7 105 0 8 0 2 4 8 2 105 0 3 6 6 3 89 0 3 3 6 97 0 6 3 6 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 0 1 7 1 0 7 128 0 4 2 5 2 4 5 128 0 5 3 2 5 3 126 0 8 0 2 4 8 2 105 0 3 0 6 3 6 101 0 7 7 1 97 0 1 1 29 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 0 1 7 1 0 7 128 0 4 2 5 2 4 5 128 0 5 3 2 5 3 126 0 1 0 7 8 1 7 105 0 8 0 2 4 8 2 105 0 3 6 6 3 89 0 3 3 6 97 0 6 3 6 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
39 36 36 38 20 40 38 20 22 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = g;
unicode = 103;
},
{
glyphname = h;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(575,-13,o),
(535,-42,o),
(493,-62,o),
(486,-65,q),
(478,-61,o),
(463,10,o),
(452,84,qs),
(428,235,o),
(382,401,o),
(345,390,q),
(320,341,o),
(293,251,o),
(280,192,qs),
(265,124,o),
(236,49,o),
(204,19,qs),
(182,-3,o),
(163,-3,qs),
(145,-3,o),
(134,19,qs),
(120,51,o),
(90,348,o),
(68,674,o),
(69,707,qs),
(69,720,o),
(99,752,o),
(139,775,o),
(153,775,qs),
(160,775,o),
(169,767,o),
(169,760,qs),
(169,707,o),
(181,512,o),
(204,229,q),
(223,337,o),
(260,432,o),
(336,474,o),
(416,478,q),
(455,477,o),
(527,288,o),
(575,50,o),
(575,1,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
10 1 0 1 7 1 2 0 2 76 37 1 2 73 0 1 0 1 133 0 0 0 29 77 0 2 2 30 2 78 40 40 34 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = h;
unicode = 104;
},
{
glyphname = i;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,531,o),
(252,516,o),
(244,516,qs),
(230,516,o),
(216,539,qs),
(211,547,o),
(221,560,o),
(239,574,qs),
(252,584,o),
(263,593,qs),
(264,594,o),
(274,601,o),
(280,601,qs),
(289,601,o),
(296,593,qs),
(302,587,o),
(315,573,o),
(315,566,qs),
(315,553,o),
(296,542,qs)
);
},
{
closed = 1;
nodes = (
(500,126,o),
(447,26,o),
(366,-27,o),
(329,-27,qs),
(298,-27,o),
(280,-9,q),
(249,31,o),
(220,137,o),
(212,266,o),
(212,372,qs),
(212,386,o),
(243,403,o),
(275,410,o),
(280,411,qs),
(289,413,o),
(293,368,o),
(293,314,qs),
(294,234,o),
(304,123,o),
(344,39,o),
(386,39,qs),
(393,39,o),
(397,40,q),
(409,64,o),
(415,95,o),
(415,124,qs),
(415,135,o),
(427,154,o),
(431,159,qs),
(445,173,o),
(499,205,o),
(499,192,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 2 3 97 0 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 89 0 2 2 3 97 0 3 2 3 81
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
47 30 25 21 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = i;
unicode = 105;
},
{
glyphname = iacute;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,126,o),
(447,26,o),
(366,-27,o),
(329,-27,qs),
(298,-27,o),
(280,-9,q),
(249,31,o),
(220,137,o),
(212,266,o),
(212,372,qs),
(212,386,o),
(243,403,o),
(275,410,o),
(280,411,qs),
(289,413,o),
(293,368,o),
(293,314,qs),
(294,234,o),
(304,123,o),
(344,39,o),
(386,39,qs),
(393,39,o),
(397,40,q),
(409,64,o),
(415,95,o),
(415,124,qs),
(415,135,o),
(427,154,o),
(431,159,qs),
(445,173,o),
(499,205,o),
(499,192,qs)
);
},
{
closed = 1;
nodes = (
(417,639,o),
(429,656,o),
(429,662,qs),
(429,680,o),
(365,680,qs),
(348,680,o),
(346,678,qs),
(336,671,o),
(253,524,o),
(253,511,qs),
(253,505,o),
(275,490,o),
(280,490,qs),
(283,490,ls),
(290,491,o),
(388,605,o),
(409,630,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
45 35 2 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 2 0 2 133 0 0 0 1 97 0 1 1 27 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 133 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
31 47 26 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = icircumflex;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,126,o),
(447,26,o),
(366,-27,o),
(329,-27,qs),
(298,-27,o),
(280,-9,q),
(249,31,o),
(220,137,o),
(212,266,o),
(212,372,qs),
(212,386,o),
(243,403,o),
(275,410,o),
(280,411,qs),
(289,413,o),
(293,368,o),
(293,314,qs),
(294,234,o),
(304,123,o),
(344,39,o),
(386,39,qs),
(393,39,o),
(397,40,q),
(409,64,o),
(415,95,o),
(415,124,qs),
(415,135,o),
(427,154,o),
(431,159,qs),
(445,173,o),
(499,205,o),
(499,192,qs)
);
},
{
closed = 1;
nodes = (
(195,630,l),
(208,646,ls),
(238,682,o),
(266,706,o),
(282,706,qs),
(296,706,o),
(335,686,o),
(380,659,qs),
(405,646,o),
(469,595,o),
(469,576,q),
(468,569,l),
(461,553,o),
(446,553,qs),
(433,553,o),
(403,569,o),
(383,583,qs),
(366,595,o),
(362,596,qs),
(352,599,o),
(327,603,o),
(314,604,qs),
(304,605,o),
(294,606,qs),
(283,607,ls),
(261,607,o),
(238,584,o),
(226,560,qs),
(215,539,o),
(197,518,o),
(181,514,qs),
(180,514,ls),
(170,514,o),
(121,545,o),
(122,551,qs),
(123,554,o),
(131,562,o),
(134,565,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
57 1 4 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 3 2 3 4 2 128 0 2 0 3 2 0 126 0 5 0 3 4 5 3 105 0 0 0 1 97 0 1 1 27 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 2 3 4 2 128 0 2 0 3 2 0 126 0 5 0 3 4 5 3 105 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
39 42 22 24 47 26 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,126,o),
(447,26,o),
(366,-27,o),
(329,-27,qs),
(298,-27,o),
(280,-9,q),
(249,31,o),
(220,137,o),
(212,266,o),
(212,372,qs),
(212,386,o),
(243,403,o),
(275,410,o),
(280,411,qs),
(289,413,o),
(293,368,o),
(293,314,qs),
(294,234,o),
(304,123,o),
(344,39,o),
(386,39,qs),
(393,39,o),
(397,40,q),
(409,64,o),
(415,95,o),
(415,124,qs),
(415,135,o),
(427,154,o),
(431,159,qs),
(445,173,o),
(499,205,o),
(499,192,qs)
);
},
{
closed = 1;
nodes = (
(223,598,o),
(205,625,o),
(189,625,qs),
(178,625,o),
(160,617,qs),
(153,613,o),
(142,586,o),
(142,570,qs),
(142,553,o),
(157,529,o),
(172,526,qs),
(186,524,ls),
(189,524,o),
(193,526,qs),
(204,531,o),
(215,549,qs),
(223,560,o),
(223,574,qs)
);
},
{
closed = 1;
nodes = (
(364,657,o),
(353,642,o),
(353,625,qs),
(353,600,o),
(371,557,o),
(389,557,qs),
(399,557,o),
(408,562,qs),
(430,574,o),
(430,599,qs),
(430,620,o),
(398,657,o),
(379,657,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
37 1 0 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 2 4 133 0 2 3 2 133 0 3 0 3 133 0 0 0 1 97 0 1 1 27 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
5 1 4 2 4 133 0 2 3 2 133 0 3 0 3 133 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
50 50 50 62 50 61 57 55 47 45 47 26 6 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = i.loclTRK;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,126,o),
(447,26,o),
(366,-27,o),
(329,-27,qs),
(298,-27,o),
(280,-9,q),
(249,31,o),
(220,137,o),
(212,266,o),
(212,372,qs),
(212,386,o),
(243,403,o),
(275,410,o),
(280,411,qs),
(289,413,o),
(293,368,o),
(293,314,qs),
(294,234,o),
(304,123,o),
(344,39,o),
(386,39,qs),
(393,39,o),
(397,40,q),
(409,64,o),
(415,95,o),
(415,124,qs),
(415,135,o),
(427,154,o),
(431,159,qs),
(445,173,o),
(499,205,o),
(499,192,qs)
);
},
{
closed = 1;
nodes = (
(380,645,o),
(321,673,o),
(288,673,qs),
(259,673,o),
(222,648,o),
(222,621,qs),
(222,614,o),
(223,610,qs),
(226,586,o),
(277,549,o),
(302,549,qs),
(317,549,o),
(342,565,o),
(354,574,qs),
(358,577,ls),
(365,581,o),
(387,607,o),
(387,616,qs),
(387,622,o),
(382,625,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
45 33 2 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 2 3 133 0 2 0 2 133 0 0 0 1 98 0 1 1 27 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 2 3 133 0 2 0 2 133 0 0 1 1 0 89 0 0 0 1 98 0 1 0 1 82
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 43 47 26 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = i.loclTRK;
},
{
glyphname = igrave;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,126,o),
(447,26,o),
(366,-27,o),
(329,-27,qs),
(298,-27,o),
(280,-9,q),
(249,31,o),
(220,137,o),
(212,266,o),
(212,372,qs),
(212,386,o),
(243,403,o),
(275,410,o),
(280,411,qs),
(289,413,o),
(293,368,o),
(293,314,qs),
(294,234,o),
(304,123,o),
(344,39,o),
(386,39,qs),
(393,39,o),
(397,40,q),
(409,64,o),
(415,95,o),
(415,124,qs),
(415,135,o),
(427,154,o),
(431,159,qs),
(445,173,o),
(499,205,o),
(499,192,qs)
);
},
{
closed = 1;
nodes = (
(168,708,o),
(192,708,qs),
(223,708,o),
(285,641,o),
(293,599,q),
(294,598,o),
(294,596,qs),
(294,590,o),
(285,576,o),
(281,571,qs),
(275,565,o),
(261,552,o),
(253,552,qs),
(249,552,o),
(248,553,q),
(240,555,o),
(220,570,o),
(201,588,o),
(197,591,qs),
(188,597,o),
(164,609,qs),
(146,619,o),
(131,631,o),
(131,641,qs),
(131,657,o),
(152,685,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 2 0 2 133 0 0 0 1 97 0 1 1 27 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 133 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
56 54 47 26 3 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = j;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(319,575,o),
(319,566,qs),
(319,557,o),
(281,527,o),
(229,505,o),
(211,505,qs),
(204,505,o),
(201,506,qs),
(190,508,o),
(190,517,qs),
(190,527,o),
(214,555,o),
(251,576,o),
(270,576,qs),
(301,576,ls)
);
},
{
closed = 1;
nodes = (
(379,-321,o),
(322,-321,qs),
(277,-321,o),
(196,-247,o),
(147,-123,o),
(147,-51,qs),
(147,-44,o),
(187,-60,o),
(225,-90,o),
(225,-104,qs),
(228,-142,o),
(259,-205,o),
(301,-241,o),
(320,-241,qs),
(335,-241,o),
(355,-217,o),
(358,-193,qs),
(363,-169,o),
(363,-131,qs),
(363,-59,o),
(326,114,o),
(295,225,qs),
(282,273,o),
(262,355,o),
(262,372,qs),
(262,378,o),
(264,384,q),
(277,408,o),
(311,437,o),
(339,451,qs),
(354,458,o),
(359,458,qs),
(363,458,o),
(363,455,qs),
(363,452,o),
(350,431,o),
(339,407,o),
(339,399,qs),
(339,367,o),
(376,228,qs),
(411,89,o),
(448,-93,o),
(448,-164,qs),
(448,-230,o),
(427,-259,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
49 34 27 21 4 2 1 1 76 4 1 0 1 0 133 0 1 2 1 133 0 2 2 3 97 0 3 3 31 3 78 1 0 58 56 46 44 9 8 0 14 1 13 5 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = j;
unicode = 106;
},
{
glyphname = k;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,-37,o),
(186,-37,qs),
(166,-37,o),
(142,-19,o),
(142,0,qs),
(142,13,o),
(120,163,o),
(107,250,qs),
(89,369,o),
(57,597,o),
(57,622,qs),
(57,631,o),
(75,670,o),
(103,701,o),
(118,701,qs),
(128,701,o),
(137,651,o),
(144,582,qs),
(155,487,o),
(175,345,o),
(194,256,q),
(205,297,ls),
(240,425,o),
(297,611,o),
(312,622,q),
(318,628,o),
(331,628,qs),
(347,628,o),
(375,612,o),
(375,599,qs),
(375,596,o),
(373,590,qs),
(363,559,o),
(328,459,o),
(308,402,qs),
(288,345,o),
(268,287,q),
(282,315,o),
(351,359,o),
(384,359,qs),
(401,359,o),
(417,351,qs),
(461,325,o),
(493,168,o),
(493,81,qs),
(493,34,l),
(470,10,o),
(438,-20,o),
(417,-30,q),
(417,49,ls),
(417,133,o),
(380,298,o),
(338,298,qs),
(327,298,o),
(314,291,qs),
(293,281,o),
(208,188,o),
(208,176,q),
(212,137,ls),
(228,6,o),
(228,-20,qs),
(228,-30,o),
(226,-30,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
32 1 1 2 41 25 16 13 4 1 6 4 0 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 3 2 3 133 0 2 1 2 133 0 1 0 0 4 1 0 106 0 4 4 27 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 3 2 3 133 0 2 1 2 133 0 4 0 4 134 0 1 0 0 1 89 0 1 1 0 98 0 0 1 0 82
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
43 42 43 43 40 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = k;
unicode = 107;
},
{
glyphname = l;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,86,o),
(373,30,o),
(293,-28,o),
(263,-28,qs),
(246,-28,o),
(234,-16,qs),
(194,24,o),
(194,289,qs),
(194,390,o),
(201,560,qs),
(204,623,o),
(204,652,q),
(206,665,o),
(257,711,o),
(271,711,qs),
(279,711,o),
(279,701,qs),
(279,686,l),
(277,617,ls),
(269,433,o),
(269,338,qs),
(269,42,o),
(320,42,qs),
(325,42,o),
(331,45,qs),
(356,58,o),
(387,81,o),
(407,99,qs),
(428,117,l),
(429,117,o),
(436,115,o),
(442,109,o),
(442,103,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
32 20 2 0 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 1 28 77 0 0 0 2 97 0 2 2 27 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 0 0 0 2 97 0 2 2 27 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 1 133 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
41 38 40 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = l;
unicode = 108;
},
{
glyphname = m;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(607,-5,o),
(569,-60,o),
(521,-101,o),
(509,-101,qs),
(505,-101,o),
(502,-94,o),
(503,-87,q),
(510,-73,o),
(510,-8,qs),
(510,62,o),
(495,255,o),
(486,312,q),
(480,334,o),
(473,334,qs),
(468,334,o),
(457,313,o),
(443,282,qs),
(417,219,o),
(359,115,o),
(312,69,q),
(300,60,o),
(284,123,o),
(274,189,qs),
(263,263,o),
(245,335,o),
(230,335,qs),
(225,335,o),
(220,330,q),
(212,314,o),
(198,261,o),
(189,216,qs),
(173,145,o),
(145,51,o),
(100,-17,o),
(69,-17,qs),
(61,-17,o),
(61,0,qs),
(61,15,o),
(64,37,qs),
(71,100,o),
(71,144,qs),
(71,256,o),
(36,356,q),
(33,361,o),
(55,397,o),
(87,429,o),
(96,429,qs),
(104,429,o),
(104,416,qs),
(104,401,o),
(113,347,qs),
(121,287,o),
(121,278,q),
(135,308,ls),
(150,340,o),
(174,382,o),
(191,399,qs),
(231,438,o),
(262,438,qs),
(303,438,o),
(347,318,o),
(347,225,q),
(397,326,o),
(454,420,o),
(494,451,o),
(520,451,qs),
(546,451,o),
(587,316,o),
(611,131,o),
(611,66,qs),
(611,28,o),
(607,17,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
71 18 9 3 3 4 64 1 6 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
5 1 4 3 1 4 89 0 0 0 6 0 6 101 2 1 1 1 3 97 0 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 1 5 1 4 3 1 4 105 0 0 0 6 0 6 101 0 2 2 3 97 0 3 3 27 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
40 42 39 42 42 37 36 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(536,-7,o),
(522,-7,qs),
(510,-7,o),
(468,11,o),
(433,39,o),
(429,53,q),
(425,61,o),
(419,103,o),
(416,128,qs),
(406,216,o),
(375,325,o),
(337,334,qs),
(311,340,o),
(263,211,o),
(233,98,qs),
(211,19,o),
(204,0,qs),
(201,-8,o),
(193,-8,qs),
(182,-8,o),
(146,23,o),
(119,65,o),
(119,81,qs),
(119,141,o),
(106,310,qs),
(96,438,o),
(96,469,qs),
(96,504,o),
(102,508,qs),
(107,512,o),
(115,512,qs),
(126,512,o),
(146,493,o),
(161,475,qs),
(176,458,l),
(183,453,o),
(186,433,o),
(188,401,qs),
(191,324,o),
(197,267,q),
(203,299,o),
(261,422,o),
(279,431,qs),
(287,435,o),
(300,435,qs),
(330,435,o),
(414,394,o),
(429,379,qs),
(454,354,o),
(480,247,o),
(492,160,qs),
(503,89,o),
(516,24,o),
(528,5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
13 1 2 0 1 76 0 1 0 1 133 0 0 2 0 133 3 1 2 2 30 2 78 52 50 27 28 39 4 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = n;
unicode = 110;
},
{
glyphname = ntilde;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,525,ls),
(65,525,o),
(65,539,qs),
(65,550,o),
(92,581,o),
(129,604,o),
(142,604,qs),
(451,616,ls),
(457,616,o),
(457,610,qs),
(457,600,o),
(423,558,o),
(377,525,o),
(360,525,qs)
);
},
{
closed = 1;
nodes = (
(446,-17,o),
(419,56,o),
(401,137,qs),
(384,212,o),
(356,304,o),
(337,331,q),
(316,352,o),
(296,352,qs),
(283,352,o),
(269,343,q),
(236,314,o),
(212,196,o),
(207,106,qs),
(203,35,o),
(197,12,q),
(197,5,o),
(174,-21,o),
(139,-41,o),
(121,-41,qs),
(111,-41,o),
(106,-39,qs),
(100,-36,o),
(100,30,qs),
(102,144,l),
(104,259,ls),
(104,306,o),
(101,321,qs),
(98,333,o),
(123,374,o),
(158,407,o),
(169,407,qs),
(177,407,o),
(178,398,qs),
(180,388,o),
(180,358,qs),
(178,288,l),
(186,323,o),
(237,389,o),
(312,430,o),
(352,430,qs),
(376,430,o),
(397,423,qs),
(423,415,o),
(458,318,o),
(479,226,qs),
(498,148,o),
(521,74,o),
(538,59,q),
(538,50,o),
(508,18,o),
(472,-9,o),
(463,-9,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
29 17 2 6 5 1 76 3 1 0 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 2 5 2 3 5 128 0 4 6 4 134 0 0 7 1 1 2 0 1 103 0 2 0 5 6 2 5 105 8 1 6 6 30 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 2 5 2 3 5 128 0 0 7 1 1 2 0 1 103 0 2 0 5 6 2 5 105 8 1 6 6 30 77 0 4 4 27 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 3 2 5 2 3 5 128 0 4 6 4 134 0 0 7 1 1 2 0 1 103 0 2 0 5 6 2 5 105 8 1 6 6 30 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
14 14 0 0 14 65 14 65 58 56 47 46 35 33 26 24 0 13 0 11 37 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = o;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,419,o),
(289,483,o),
(358,483,qs),
(401,483,o),
(443,471,q),
(473,456,o),
(501,399,o),
(501,362,qs),
(501,330,o),
(491,293,q),
(518,266,o),
(518,224,qs),
(518,184,o),
(472,95,o),
(443,66,qs),
(373,0,o),
(296,0,qs),
(243,0,o),
(154,65,o),
(103,171,o),
(103,232,qs),
(103,298,o),
(135,358,qs)
);
},
{
closed = 1;
nodes = (
(405,87,o),
(419,103,o),
(426,115,q),
(436,138,o),
(436,159,qs),
(436,215,o),
(326,294,o),
(248,325,q),
(235,332,o),
(235,339,qs),
(235,346,o),
(253,362,o),
(273,376,qs),
(301,394,o),
(313,406,q),
(316,411,o),
(367,384,o),
(390,370,qs),
(410,358,l),
(369,427,o),
(303,427,qs),
(268,427,o),
(216,406,q),
(198,366,o),
(198,301,qs),
(198,244,o),
(229,137,o),
(291,68,o),
(336,68,qs),
(365,68,o),
(394,82,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
34 12 2 2 3 1 76 0 3 3 1 97 0 1 1 29 77 0 2 2 0 97 0 0 0 30 0 78 38 35 44 36 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = o;
unicode = 111;
},
{
glyphname = oacute;
layers = (
{
layerId = m01;
width = 600;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
layers = (
{
layerId = m01;
width = 600;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = odieresis;
layers = (
{
layerId = m01;
width = 600;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ograve;
layers = (
{
layerId = m01;
width = 600;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oslash;
layers = (
{
layerId = m01;
width = 600;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = otilde;
layers = (
{
layerId = m01;
width = 600;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = p;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(269,-177,o),
(225,-218,o),
(169,-247,o),
(155,-247,qs),
(146,-247,o),
(146,-241,qs),
(109,167,o),
(84,465,o),
(83,479,qs),
(83,495,o),
(115,542,o),
(156,578,o),
(169,578,qs),
(181,578,o),
(181,562,qs),
(184,520,ls),
(187,498,o),
(187,479,q),
(229,522,o),
(314,563,o),
(353,563,qs),
(406,563,o),
(492,495,o),
(516,438,qs),
(529,412,o),
(529,364,qs),
(529,291,o),
(467,113,o),
(349,-31,o),
(269,-55,q),
(269,-159,ls)
);
},
{
closed = 1;
nodes = (
(271,91,o),
(287,91,qs),
(298,91,o),
(311,71,o),
(311,58,qs),
(311,51,o),
(310,47,q),
(436,184,o),
(436,309,qs),
(436,356,o),
(418,397,qs),
(400,432,o),
(351,465,o),
(323,465,qs),
(294,465,o),
(239,435,o),
(206,393,o),
(209,377,q),
(209,365,o),
(243,95,o),
(248,68,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
21 15 12 3 3 0 33 1 4 3 51 46 44 0 4 2 4 3 76 0 1 0 1 133 0 4 3 2 3 4 2 128 0 2 2 132 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 42 41 24 38 40 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = p;
unicode = 112;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
width = 600;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = q;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(583,-206,o),
(583,-209,qs),
(583,-226,o),
(557,-277,o),
(521,-315,o),
(505,-315,qs),
(497,-315,o),
(491,-309,q),
(467,-260,o),
(440,-36,o),
(428,136,qs),
(420,250,o),
(417,274,q),
(394,228,o),
(304,130,o),
(197,65,o),
(150,65,qs),
(108,65,o),
(78,92,q),
(21,150,o),
(21,237,qs),
(21,293,o),
(64,397,o),
(90,420,qs),
(134,463,o),
(268,519,o),
(319,519,qs),
(368,519,o),
(381,493,q),
(416,493,o),
(416,457,qs),
(416,438,o),
(397,393,o),
(371,362,o),
(360,362,qs),
(349,362,o),
(345,384,q),
(293,433,o),
(229,433,qs),
(177,433,o),
(127,401,q),
(102,371,o),
(102,301,qs),
(102,261,o),
(110,215,qs),
(117,176,o),
(156,138,o),
(185,138,qs),
(219,138,o),
(301,185,o),
(376,264,o),
(400,311,q),
(400,329,o),
(426,399,o),
(483,456,o),
(527,456,q),
(523,383,o),
(523,302,qs),
(523,131,o),
(553,-83,o),
(574,-167,qs),
(581,-197,o),
(581,-200,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
49 10 2 1 3 60 1 7 6 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 0 4 2 4 0 2 128 0 3 2 1 2 3 114 0 5 0 2 3 5 2 105 0 1 0 6 7 1 6 105 0 4 4 29 77 0 7 7 31 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 0 4 2 4 0 2 128 0 3 2 1 2 3 1 128 0 5 0 2 3 5 2 105 0 1 0 6 7 1 6 105 0 4 4 29 77 0 7 7 31 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 4 5 0 5 4 0 128 0 0 2 5 0 2 126 0 3 2 1 2 3 1 128 0 5 0 2 3 5 2 105 0 1 0 6 7 1 6 105 0 7 7 31 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
41 40 33 20 34 39 38 22 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(227,53,o),
(195,16,o),
(152,-13,o),
(137,-13,q),
(135,-11,o),
(95,103,o),
(61,219,o),
(61,247,qs),
(61,254,o),
(62,257,qs),
(65,270,o),
(114,314,o),
(128,314,qs),
(137,314,o),
(137,302,qs),
(137,287,l),
(171,361,o),
(314,465,o),
(401,465,qs),
(473,465,o),
(542,427,qs),
(550,422,o),
(520,385,o),
(478,357,o),
(467,362,qs),
(409,391,o),
(352,391,qs),
(300,391,o),
(215,344,o),
(167,264,o),
(167,216,qs),
(167,181,o),
(182,145,qs),
(190,123,o),
(217,72,o),
(227,62,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
35 27 19 3 2 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 2 0 2 134 0 0 0 1 97 0 1 1 29 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
36 38 39 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = r;
unicode = 114;
},
{
glyphname = s;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(519,204,o),
(519,175,qs),
(519,138,o),
(457,54,o),
(357,-2,o),
(303,-3,qs),
(290,-3,o),
(211,36,o),
(135,80,o),
(124,86,qs),
(114,93,o),
(161,163,o),
(176,177,qs),
(183,183,o),
(212,166,o),
(237,144,qs),
(253,131,o),
(290,103,o),
(305,96,qs),
(337,80,o),
(377,80,qs),
(413,80,o),
(433,96,qs),
(440,102,o),
(440,110,qs),
(440,128,o),
(358,169,o),
(281,197,qs),
(187,234,o),
(95,281,o),
(95,306,qs),
(95,337,o),
(159,405,o),
(244,458,o),
(272,467,qs),
(299,477,o),
(326,477,qs),
(378,477,o),
(417,435,qs),
(433,419,l),
(409,369,o),
(360,369,q),
(356,380,o),
(305,403,o),
(275,403,qs),
(225,403,o),
(192,370,qs),
(187,365,o),
(187,359,qs),
(187,341,o),
(271,307,o),
(356,281,qs),
(420,261,o),
(487,236,o),
(498,225,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
14 1 0 2 29 5 2 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 0 2 1 1 0 114 0 1 1 2 98 0 2 2 29 77 0 3 3 4 97 0 4 4 30 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 0 2 1 2 0 1 128 0 1 1 2 98 0 2 2 29 77 0 3 3 4 97 0 4 4 30 4 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
45 46 35 18 40 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = s;
unicode = 115;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
width = 600;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = t;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(502,235,o),
(502,223,qs),
(502,170,o),
(438,58,o),
(346,-15,o),
(311,-15,qs),
(299,-15,o),
(291,-11,q),
(258,-11,o),
(200,112,o),
(163,261,o),
(158,299,q),
(144,294,o),
(112,283,o),
(104,283,qs),
(97,283,o),
(97,288,q),
(111,319,l),
(125,333,o),
(138,342,o),
(158,349,q),
(146,409,o),
(140,528,o),
(140,618,qs),
(140,642,o),
(189,696,o),
(217,708,q),
(236,708,o),
(236,689,qs),
(236,683,o),
(231,655,o),
(231,648,q),
(230,644,o),
(226,629,o),
(217,618,q),
(217,559,o),
(229,429,o),
(240,374,q),
(328,389,o),
(428,425,q),
(434,425,o),
(440,418,o),
(441,410,o),
(441,409,q),
(402,379,o),
(355,351,o),
(311,337,o),
(248,319,q),
(255,270,o),
(298,122,o),
(321,95,q),
(350,66,o),
(367,66,qs),
(382,66,o),
(406,98,o),
(428,139,q),
(431,151,o),
(431,163,qs),
(431,177,o),
(424,207,qs),
(420,227,o),
(420,233,qs),
(420,239,o),
(423,242,qs),
(441,260,ls),
(452,272,o),
(472,288,o),
(478,288,qs),
(493,288,o),
(501,241,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
57 48 34 31 21 5 0 2 54 7 2 1 0 2 76 52 1 0 1 75 0 2 0 2 133 0 0 1 0 133 0 1 3 1 133 4 1 3 3 27 3 78 64 62 61 60 42 41 46 16 5 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = t;
unicode = 116;
},
{
glyphname = u;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,-16,l),
(166,-2,o),
(132,160,o),
(115,339,o),
(115,369,qs),
(115,380,o),
(120,388,o),
(134,401,qs),
(159,421,o),
(183,431,o),
(213,431,q),
(223,424,o),
(223,414,qs),
(223,409,o),
(213,389,o),
(213,384,qs),
(209,330,o),
(209,292,qs),
(209,196,o),
(239,54,o),
(270,54,qs),
(280,54,o),
(290,61,qs),
(307,75,o),
(350,179,o),
(380,311,o),
(380,365,qs),
(380,380,o),
(379,388,qs),
(379,404,o),
(418,435,o),
(471,455,o),
(486,455,qs),
(496,455,o),
(496,450,qs),
(496,391,o),
(460,234,o),
(400,92,o),
(368,55,q),
(299,-16,o),
(232,-16,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 2 0 11 1 1 2 2 76 0 0 2 0 133 0 2 1 2 133 0 1 1 3 98 4 1 3 3 27 3 78 0 0 0 40 0 39 25 42 23 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = u;
unicode = 117;
},
{
glyphname = uacute;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
layers = (
{
layerId = m01;
width = 600;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
layers = (
{
layerId = m01;
width = 600;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = ugrave;
layers = (
{
layerId = m01;
width = 600;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = v;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,-46,o),
(152,136,o),
(103,261,qs),
(95,281,ls),
(92,290,o),
(118,334,o),
(155,370,o),
(166,370,qs),
(171,370,o),
(174,364,qs),
(299,87,l),
(334,165,o),
(371,267,o),
(395,342,qs),
(434,460,l),
(443,479,o),
(494,506,o),
(514,506,qs),
(531,506,o),
(528,495,qs),
(489,353,o),
(346,-46,o),
(294,-46,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
11 1 2 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 2 0 1 2 128 3 1 2 2 132 0 0 0 29 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
0 0 1 0 133 0 1 2 1 133 3 1 2 2 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 22 0 21 40 35 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
layers = (
{
.lastUpdate = 753955765.466;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(234,114,o),
(136,-23,o),
(74,-23,q),
(15,29,o),
(-47,170,o),
(-65,273,o),
(-65,287,qs),
(-65,295,o),
(-33,328,o),
(4,352,o),
(12,349,q),
(12,313,o),
(49,197,o),
(100,90,o),
(120,70,q),
(143,72,o),
(176,136,o),
(194,191,qs),
(205,225,o),
(221,259,o),
(228,256,q),
(236,278,o),
(289,311,o),
(307,311,qs),
(323,311,o),
(401,212,o),
(455,136,qs),
(488,90,o),
(493,85,q),
(521,141,o),
(564,283,o),
(595,400,qs),
(613,473,o),
(637,551,o),
(647,565,q),
(684,604,o),
(717,635,o),
(730,635,qs),
(737,635,o),
(740,626,qs),
(742,618,o),
(742,612,qs),
(742,600,o),
(733,576,o),
(725,568,qs),
(696,537,o),
(653,409,o),
(625,297,qs),
(599,193,o),
(560,69,o),
(502,-17,o),
(464,-17,qs),
(446,-17,o),
(430,-9,q),
(423,-4,o),
(385,52,qs),
(337,121,o),
(275,198,o),
(260,193,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
47 16 2 2 1 43 29 2 0 2 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 1 2 1 133 0 2 0 2 133 3 1 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 2 1 133 0 2 0 2 133 0 0 0 27 77 0 3 3 27 3 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
56 55 44 44 37 4 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(28,-157,o),
(-4,-134,o),
(-4,-123,qs),
(-4,-118,o),
(-1,-115,qs),
(38,-66,ls),
(93,2,o),
(156,88,o),
(181,138,q),
(139,166,o),
(68,242,o),
(53,282,q),
(51,291,o),
(83,341,o),
(126,382,o),
(138,382,qs),
(142,382,o),
(145,378,q),
(164,336,o),
(215,278,o),
(250,253,o),
(260,247,q),
(269,256,o),
(302,296,o),
(319,317,qs),
(361,371,o),
(423,440,o),
(445,451,q),
(457,463,o),
(493,469,o),
(528,469,qs),
(542,469,o),
(515,433,o),
(467,397,o),
(455,397,qs),
(437,397,l),
(412,360,o),
(374,310,qs),
(329,250,o),
(305,214,q),
(418,130,o),
(546,105,q),
(553,118,o),
(570,118,qs),
(578,118,o),
(589,110,o),
(589,103,qs),
(589,99,o),
(586,93,qs),
(564,49,o),
(514,2,o),
(467,2,qs),
(441,2,o),
(400,13,qs),
(363,25,o),
(288,69,o),
(236,105,q),
(194,32,o),
(114,-73,o),
(35,-151,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
50 37 19 3 1 4 17 2 2 0 1 2 76 56 1 0 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 4 3 2 4 128 0 4 1 3 4 1 126 0 1 0 3 1 0 126 0 3 3 29 77 0 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 4 3 2 4 128 0 4 1 3 4 1 126 0 1 0 3 1 0 126 0 3 3 0 97 0 0 0 30 0 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
30 34 39 38 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(505,-152,o),
(420,-376,o),
(300,-376,qs),
(258,-376,o),
(174,-325,o),
(106,-250,o),
(88,-213,q),
(83,-205,o),
(83,-192,qs),
(83,-163,o),
(113,-87,o),
(125,-87,qs),
(130,-87,o),
(133,-94,qs),
(156,-148,o),
(231,-234,o),
(305,-282,o),
(329,-282,qs),
(341,-282,o),
(347,-275,q),
(389,-192,o),
(389,2,qs),
(389,98,o),
(381,154,q),
(325,99,o),
(250,44,o),
(213,44,qs),
(182,44,o),
(153,69,q),
(101,122,o),
(66,230,o),
(64,320,q),
(62,333,o),
(110,380,o),
(170,422,o),
(174,422,qs),
(183,422,o),
(192,413,o),
(194,403,o),
(194,402,q),
(133,340,l),
(128,336,o),
(128,315,qs),
(128,284,o),
(153,197,o),
(201,133,o),
(233,133,q),
(247,135,l),
(297,147,o),
(354,215,o),
(360,247,q),
(360,382,o),
(339,443,q),
(339,452,o),
(377,506,o),
(422,552,o),
(434,552,qs),
(440,552,o),
(442,547,q),
(478,392,o),
(505,145,o),
(505,29,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
8 1 2 0 37 29 21 10 4 1 2 2 76 0 0 2 0 133 0 2 1 2 133 0 5 3 4 3 5 4 128 0 1 0 3 5 1 3 105 0 4 6 6 4 89 0 4 4 6 97 0 6 4 6 81 39 36 39 40 25 25 20 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = y;
unicode = 121;
},
{
glyphname = yacute;
layers = (
{
layerId = m01;
width = 600;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ydieresis;
layers = (
{
layerId = m01;
width = 600;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = z;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(431,28,o),
(341,-17,o),
(302,-17,qs),
(258,-17,o),
(205,38,o),
(205,86,qs),
(205,135,o),
(236,200,q),
(221,198,o),
(180,189,qs),
(156,184,o),
(105,175,o),
(83,175,qs),
(75,175,o),
(75,184,qs),
(75,194,o),
(94,230,o),
(101,237,qs),
(108,244,o),
(144,252,o),
(175,257,qs),
(238,265,o),
(262,277,q),
(276,291,o),
(322,372,o),
(328,393,qs),
(331,403,o),
(309,403,qs),
(274,403,o),
(114,357,o),
(90,344,qs),
(79,339,o),
(79,349,qs),
(79,360,o),
(95,398,o),
(101,404,qs),
(118,420,o),
(226,456,o),
(353,480,o),
(395,480,qs),
(441,480,o),
(441,464,qs),
(441,438,o),
(375,320,o),
(349,294,q),
(393,300,o),
(461,315,o),
(510,330,o),
(525,334,q),
(533,335,o),
(533,331,qs),
(533,323,o),
(501,283,o),
(464,248,o),
(457,248,q),
(435,240,o),
(390,231,o),
(369,227,qs),
(346,224,o),
(320,218,q),
(287,142,o),
(287,100,qs),
(287,49,o),
(332,49,qs),
(363,49,o),
(409,73,q),
(450,105,o),
(466,173,q),
(466,184,o),
(487,205,o),
(499,216,q),
(504,219,o),
(507,219,qs),
(515,219,o),
(526,193,o),
(526,177,qs),
(526,170,o),
(525,166,qs),
(520,138,o),
(499,98,o),
(474,73,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
35 1 0 3 72 4 2 4 0 12 1 1 4 3 76 0 3 2 0 2 3 0 128 0 0 4 2 0 4 126 0 4 1 2 4 1 126 0 2 2 29 77 0 1 1 5 97 0 5 5 27 5 78 78 76 68 66 53 51 41 39 39 38 6 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = z;
unicode = 122;
},
{
glyphname = a.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(529,-23,o),
(521,-21,o),
(514,-14,o),
(514,-7,q),
(494,-7,o),
(463,26,o),
(450,41,q),
(442,65,o),
(434,105,qs),
(426,145,o),
(418,169,q),
(403,111,o),
(327,4,o),
(273,-7,qs),
(266,-8,o),
(251,-8,qs),
(200,-8,o),
(124,45,o),
(82,139,o),
(82,199,qs),
(82,245,o),
(96,298,q),
(124,372,o),
(224,466,o),
(287,466,qs),
(343,466,o),
(402,427,qs),
(426,411,o),
(446,386,o),
(450,359,o),
(450,330,q),
(459,273,o),
(493,156,o),
(519,76,qs),
(530,41,l),
(530,25,o),
(535,4,o),
(546,-7,q),
(530,-23,l)
);
},
{
closed = 1;
nodes = (
(221,69,o),
(233,69,qs),
(247,69,o),
(266,81,o),
(282,99,o),
(289,106,q),
(303,126,o),
(348,219,o),
(383,324,o),
(383,362,qs),
(383,420,o),
(337,427,qs),
(289,432,o),
(211,351,o),
(167,225,o),
(167,168,qs),
(167,131,o),
(188,80,o),
(209,73,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
27 7 2 3 0 3 1 1 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 29 77 0 3 3 1 98 2 1 1 1 30 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 3 0 133 0 3 3 1 98 2 1 1 1 30 1 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
56 54 26 39 44 4 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = a.ss01;
},
{
glyphname = aacute.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(512,664,o),
(506,663,o),
(504,662,q),
(488,660,o),
(452,610,o),
(425,549,o),
(425,539,qs),
(425,531,o),
(446,512,o),
(458,512,qs),
(485,512,o),
(536,559,o),
(569,616,o),
(567,624,qs),
(563,642,o),
(530,665,o),
(514,665,q)
);
},
{
closed = 1;
nodes = (
(529,-23,o),
(521,-21,o),
(514,-14,o),
(514,-7,q),
(494,-7,o),
(463,26,o),
(450,41,q),
(442,65,o),
(434,105,qs),
(426,145,o),
(418,169,q),
(403,111,o),
(327,4,o),
(273,-7,qs),
(266,-8,o),
(251,-8,qs),
(200,-8,o),
(124,45,o),
(82,139,o),
(82,199,qs),
(82,245,o),
(96,298,q),
(124,372,o),
(224,466,o),
(287,466,qs),
(343,466,o),
(402,427,qs),
(426,411,o),
(446,386,o),
(450,359,o),
(450,330,q),
(459,273,o),
(493,156,o),
(519,76,qs),
(530,41,l),
(530,25,o),
(535,4,o),
(546,-7,q),
(530,-23,l)
);
},
{
closed = 1;
nodes = (
(221,69,o),
(233,69,qs),
(247,69,o),
(266,81,o),
(282,99,o),
(289,106,q),
(303,126,o),
(348,219,o),
(383,324,o),
(383,362,qs),
(383,420,o),
(337,427,qs),
(289,432,o),
(211,351,o),
(167,225,o),
(167,168,qs),
(167,131,o),
(188,80,o),
(209,73,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
44 24 2 5 2 20 1 3 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 1 0 1 133 0 0 2 0 133 0 2 2 29 77 0 5 5 3 98 4 1 3 3 30 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 1 0 1 133 0 0 2 0 133 0 2 5 2 133 0 5 5 3 98 4 1 3 3 30 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 73 71 51 50 40 38 31 29 0 16 0 15 37 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = aacute.ss01;
},
{
glyphname = acircumflex.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(529,-23,o),
(521,-21,o),
(514,-14,o),
(514,-7,q),
(494,-7,o),
(463,26,o),
(450,41,q),
(442,65,o),
(434,105,qs),
(426,145,o),
(418,169,q),
(403,111,o),
(327,4,o),
(273,-7,qs),
(266,-8,o),
(251,-8,qs),
(200,-8,o),
(124,45,o),
(82,139,o),
(82,199,qs),
(82,245,o),
(96,298,q),
(124,372,o),
(224,466,o),
(287,466,qs),
(343,466,o),
(402,427,qs),
(426,411,o),
(446,386,o),
(450,359,o),
(450,330,q),
(459,273,o),
(493,156,o),
(519,76,qs),
(530,41,l),
(530,25,o),
(535,4,o),
(546,-7,q),
(530,-23,l)
);
},
{
closed = 1;
nodes = (
(221,69,o),
(233,69,qs),
(247,69,o),
(266,81,o),
(282,99,o),
(289,106,q),
(303,126,o),
(348,219,o),
(383,324,o),
(383,362,qs),
(383,420,o),
(337,427,qs),
(289,432,o),
(211,351,o),
(167,225,o),
(167,168,qs),
(167,131,o),
(188,80,o),
(209,73,qs)
);
},
{
closed = 1;
nodes = (
(176,591,o),
(197,615,o),
(215,629,qs),
(231,642,ls),
(241,651,o),
(271,682,o),
(302,704,o),
(315,704,q),
(321,703,ls),
(338,698,o),
(367,671,o),
(385,650,qs),
(399,635,l),
(418,616,ls),
(434,602,o),
(450,582,o),
(450,571,qs),
(450,561,o),
(439,548,qs),
(433,542,o),
(420,530,o),
(411,530,qs),
(409,530,ls),
(398,531,o),
(370,557,o),
(346,583,qs),
(324,611,o),
(311,619,q),
(310,619,ls),
(307,618,o),
(294,602,o),
(292,601,qs),
(271,586,o),
(218,553,o),
(206,553,q),
(202,555,l),
(176,577,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
94 1 4 5 27 7 2 3 0 3 1 1 3 3 76 0 5 4 5 133 0 4 0 4 133 0 0 3 0 133 0 3 1 1 3 89 0 3 3 1 97 2 1 1 3 1 81 87 85 73 71 56 54 26 39 44 6 6 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = acircumflex.ss01;
},
{
glyphname = b.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,335,l),
(292,439,o),
(367,439,qs),
(397,439,o),
(452,404,o),
(475,371,qs),
(504,329,o),
(504,263,qs),
(504,200,o),
(451,75,o),
(354,-7,o),
(294,-7,qs),
(267,-7,o),
(237,2,q),
(237,-5,o),
(219,-5,qs),
(200,-5,o),
(156,10,o),
(156,18,qs),
(140,794,l),
(141,798,o),
(147,798,qs),
(157,798,o),
(192,775,o),
(221,748,o),
(221,743,qs),
(221,711,l),
(221,683,l)
);
},
{
closed = 1;
nodes = (
(333,73,o),
(415,207,o),
(415,277,qs),
(415,303,o),
(405,346,o),
(398,356,qs),
(390,370,o),
(373,370,qs),
(352,370,o),
(296,328,o),
(247,266,o),
(237,238,q),
(237,34,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
7 1 2 2 0 40 28 26 8 4 1 3 2 76 0 2 0 3 1 2 3 105 0 0 0 26 77 0 1 1 30 1 78 38 39 101 20 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = b.ss01;
},
{
glyphname = c.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,191,o),
(95,264,qs),
(95,346,o),
(187,455,o),
(281,473,q),
(287,479,o),
(304,467,o),
(316,441,o),
(316,428,qs),
(316,407,o),
(300,399,qs),
(235,367,o),
(147,273,o),
(147,219,qs),
(147,159,o),
(206,100,q),
(233,66,o),
(271,66,qs),
(306,66,o),
(382,124,o),
(448,224,o),
(469,286,q),
(478,295,o),
(488,295,qs),
(508,295,o),
(547,238,o),
(547,211,qs),
(547,200,o),
(543,193,q),
(525,145,o),
(438,55,o),
(328,-1,o),
(276,-1,qs),
(230,-1,o),
(156,48,o),
(132,100,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 1 2 1 133 0 2 2 0 97 0 0 0 30 0 78 36 39 33 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = c.ss01;
},
{
glyphname = d.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(459,-110,o),
(447,-110,qs),
(435,-110,o),
(399,-89,o),
(372,-60,o),
(372,-47,qs),
(372,5,l),
(329,-12,o),
(284,-12,qs),
(239,-12,o),
(165,24,o),
(148,57,q),
(107,126,o),
(107,186,qs),
(107,231,o),
(131,281,qs),
(159,334,o),
(254,423,o),
(304,436,q),
(355,436,l),
(355,712,l),
(366,712,o),
(372,742,o),
(372,763,q),
(384,763,o),
(407,746,o),
(424,729,q),
(425,724,o),
(432,688,o),
(432,672,qs),
(432,650,o),
(424,642,q),
(424,525,o),
(441,298,qs),
(450,172,o),
(459,-9,o),
(459,-99,qs)
);
},
{
closed = 1;
nodes = (
(234,57,o),
(270,57,qs),
(295,57,o),
(353,89,o),
(372,108,q),
(372,170,o),
(363,255,qs),
(355,349,o),
(355,401,q),
(333,390,o),
(292,354,o),
(252,315,q),
(245,303,o),
(234,291,qs),
(211,261,o),
(188,216,o),
(188,186,qs),
(188,143,o),
(218,91,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
4 1 2 1 50 46 2 5 2 29 1 3 5 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 0 1 0 133 0 2 1 5 1 2 5 128 0 4 3 4 134 0 1 1 28 77 0 5 5 3 98 0 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 5 2 133 0 4 3 4 134 0 5 5 3 98 0 3 3 27 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
54 52 37 41 17 18 27 6 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = d.ss01;
},
{
glyphname = e.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,51,o),
(72,155,qs),
(72,227,o),
(139,394,o),
(252,508,o),
(319,508,qs),
(350,508,o),
(413,480,o),
(426,455,qs),
(437,433,o),
(437,412,qs),
(437,378,o),
(408,349,q),
(399,332,o),
(373,296,qs),
(346,262,o),
(337,243,q),
(316,221,ls),
(278,183,o),
(227,146,o),
(198,146,qs),
(181,146,o),
(161,155,q),
(156,130,o),
(156,115,qs),
(156,61,o),
(207,61,qs),
(225,61,o),
(249,67,q),
(299,67,o),
(397,105,o),
(467,140,qs),
(496,155,l),
(508,163,o),
(517,163,qs),
(535,163,o),
(535,126,qs),
(532,84,l),
(494,37,o),
(347,-17,o),
(271,-17,qs),
(217,-17,o),
(178,-4,q)
);
},
{
closed = 1;
nodes = (
(235,250,o),
(324,374,o),
(337,437,q),
(285,411,o),
(192,275,o),
(178,208,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
48 45 2 1 5 19 1 4 1 5 1 2 4 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 5 1 5 133 0 1 4 1 133 0 4 2 4 133 3 1 2 2 0 98 0 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 5 1 5 133 0 1 4 1 133 0 4 2 4 133 0 3 2 0 2 3 114 0 2 2 0 98 0 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
45 36 33 20 36 32 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = e.ss01;
},
{
glyphname = f.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,-213,o),
(303,-206,o),
(278,-192,o),
(274,-189,qs),
(268,-183,o),
(259,-146,o),
(256,-127,qs),
(248,-75,o),
(238,-65,q),
(228,0,o),
(221,80,qs),
(214,168,o),
(203,235,q),
(175,220,ls),
(143,202,o),
(98,182,o),
(80,182,qs),
(61,182,o),
(30,204,o),
(30,216,qs),
(30,228,o),
(44,235,q),
(203,287,l),
(202,394,ls),
(202,540,o),
(251,751,o),
(326,798,q),
(376,822,o),
(415,822,qs),
(435,822,o),
(450,815,q),
(446,810,o),
(432,791,o),
(432,780,q),
(420,780,o),
(406,771,q),
(399,768,o),
(385,762,o),
(379,762,q),
(315,717,o),
(273,538,o),
(273,419,qs),
(274,322,l),
(294,322,o),
(320,333,qs),
(336,340,o),
(344,340,q),
(351,347,o),
(363,347,qs),
(375,347,o),
(405,332,o),
(414,322,q),
(428,310,o),
(428,298,qs),
(428,293,o),
(421,287,o),
(414,287,q),
(396,281,o),
(362,274,o),
(346,270,qs),
(306,263,o),
(274,252,q),
(297,66,o),
(326,-135,qs),
(329,-155,l),
(334,-172,o),
(334,-184,qs),
(334,-198,o),
(326,-205,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
37 1 2 3 55 45 6 3 4 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 2 1 2 0 1 128 0 1 4 2 1 4 126 0 4 4 132 0 2 2 3 97 0 3 3 26 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 1 4 2 1 4 126 0 4 4 132 0 3 2 2 3 89 0 3 3 2 97 0 2 3 2 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
52 50 40 38 34 33 25 24 20 18 5 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = f.ss01;
},
{
glyphname = g.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(405,-392,o),
(356,-392,qs),
(285,-392,o),
(126,-298,o),
(18,-160,o),
(18,-101,qs),
(18,-59,o),
(46,-31,q),
(129,-155,o),
(272,-283,o),
(323,-283,qs),
(373,-283,o),
(426,-165,o),
(426,-48,qs),
(426,-6,o),
(421,61,q),
(340,1,o),
(270,1,qs),
(213,1,o),
(130,74,o),
(86,192,o),
(86,258,qs),
(86,324,o),
(133,440,o),
(228,511,o),
(298,511,qs),
(318,511,o),
(350,506,qs),
(366,502,o),
(398,498,qs),
(439,493,o),
(476,477,o),
(476,454,qs),
(475,443,o),
(475,419,qs),
(475,375,o),
(486,278,o),
(499,192,qs),
(513,98,o),
(528,-26,o),
(528,-86,qs),
(528,-173,o),
(487,-315,o),
(439,-369,q)
);
},
{
closed = 1;
nodes = (
(269,75,o),
(297,75,qs),
(357,75,o),
(409,216,o),
(409,317,qs),
(409,385,o),
(401,436,q),
(377,440,o),
(364,440,qs),
(309,440,o),
(213,379,o),
(157,282,o),
(157,230,qs),
(157,191,o),
(195,120,o),
(233,93,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
10 1 4 0 27 1 1 5 35 1 2 1 3 76 0 0 0 4 5 0 4 105 0 2 0 3 2 3 101 0 5 5 1 97 0 1 1 30 1 78 58 56 51 49 42 40 33 31 26 24 18 16 6 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = g.ss01;
},
{
glyphname = h.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(425,-41,o),
(398,12,o),
(398,62,qs),
(398,105,o),
(405,164,qs),
(411,230,o),
(411,255,qs),
(411,289,o),
(395,326,o),
(376,326,qs),
(365,326,o),
(356,322,q),
(298,313,o),
(238,245,o),
(219,161,o),
(213,96,qs),
(210,49,o),
(200,-5,o),
(171,-40,o),
(143,-40,qs),
(138,-40,o),
(122,-38,q),
(122,73,o),
(117,226,qs),
(115,301,o),
(112,451,o),
(112,526,qs),
(112,679,o),
(122,799,q),
(166,799,ls),
(205,799,o),
(230,784,o),
(230,756,qs),
(230,739,o),
(225,691,qs),
(218,618,o),
(209,487,o),
(209,393,qs),
(209,338,l),
(314,414,o),
(381,414,qs),
(445,414,o),
(502,296,o),
(502,204,qs),
(502,140,o),
(478,7,o),
(460,-38,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
7 1 3 0 30 24 2 2 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 0 0 3 2 0 3 105 0 1 1 26 77 0 2 2 27 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 2 3 2 134 0 0 0 3 2 0 3 105 0 1 1 26 1 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
40 40 41 36 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = h.ss01;
},
{
glyphname = i.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,559,o),
(251,552,qs),
(251,542,o),
(241,542,qs),
(224,542,o),
(175,579,o),
(175,594,qs),
(175,605,o),
(188,609,q),
(204,609,o),
(245,584,o),
(245,571,q)
);
},
{
closed = 1;
nodes = (
(363,-59,o),
(329,-59,qs),
(282,-59,o),
(209,-5,o),
(168,81,o),
(168,129,qs),
(167,166,ls),
(163,232,o),
(163,292,qs),
(163,430,o),
(188,417,q),
(219,417,o),
(264,387,o),
(264,360,qs),
(264,72,o),
(283,14,q),
(360,91,l),
(404,91,o),
(456,39,o),
(456,-5,qs),
(456,-14,o),
(431,-31,o),
(403,-42,o),
(399,-43,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
11 9 2 1 0 19 1 4 2 2 76 0 0 1 0 133 0 1 3 1 133 0 3 2 3 133 0 2 4 4 2 89 0 2 2 4 97 0 4 2 4 81 40 21 25 36 17 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = i.ss01;
},
{
glyphname = j.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,493,o),
(218,547,o),
(218,579,q),
(230,591,o),
(246,591,qs),
(271,591,o),
(316,546,o),
(316,521,qs),
(316,505,o),
(304,493,q)
);
},
{
closed = 1;
nodes = (
(260,-282,o),
(231,-282,qs),
(196,-282,o),
(129,-239,o),
(129,-213,qs),
(129,-204,o),
(133,-197,qs),
(144,-176,o),
(170,-176,qs),
(197,-176,o),
(218,-197,q),
(291,-99,o),
(291,50,qs),
(291,104,o),
(277,209,o),
(262,295,qs),
(246,394,l),
(246,408,o),
(251,422,o),
(260,422,q),
(281,412,o),
(306,387,o),
(316,366,q),
(320,339,o),
(331,282,o),
(336,252,qs),
(352,173,o),
(370,52,o),
(370,-5,qs),
(370,-84,o),
(326,-215,o),
(274,-267,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
6 1 1 0 24 1 3 2 30 1 4 3 3 76 0 0 1 0 133 0 1 2 1 133 0 3 2 4 2 3 4 128 0 2 3 4 2 89 0 2 2 4 97 0 4 2 4 81 37 41 28 19 35 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = j.ss01;
},
{
glyphname = k.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(481,-26,o),
(444,-15,o),
(432,6,o),
(432,25,qs),
(432,40,o),
(433,48,qs),
(434,85,ls),
(434,202,o),
(358,337,q),
(334,373,o),
(302,373,qs),
(273,373,o),
(213,324,o),
(170,264,o),
(171,254,qs),
(171,232,o),
(181,175,qs),
(196,76,o),
(196,31,qs),
(196,5,o),
(192,-11,q),
(146,-11,o),
(119,-2,o),
(111,43,o),
(108,116,qs),
(106,165,o),
(98,302,o),
(91,380,qs),
(80,498,o),
(70,582,qs),
(59,676,o),
(59,706,qs),
(59,730,o),
(70,747,o),
(85,747,qs),
(94,747,o),
(126,742,o),
(144,739,q),
(149,701,o),
(152,622,o),
(152,560,qs),
(152,435,o),
(159,369,q),
(222,445,o),
(281,595,o),
(306,721,q),
(376,729,o),
(376,659,qs),
(376,617,o),
(325,497,o),
(289,446,q),
(378,446,o),
(480,278,o),
(518,61,o),
(518,-27,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
48 39 11 3 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 3 2 0 3 105 0 1 1 28 77 0 2 2 27 77 0 4 4 27 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 1 133 0 0 0 3 2 0 3 105 0 2 2 27 77 0 4 4 27 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 1 133 0 4 2 4 134 0 0 0 3 2 0 3 105 0 2 2 27 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
25 41 28 47 18 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = k.ss01;
},
{
glyphname = l.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,-67,ls),
(327,-67,o),
(304,-50,o),
(287,-33,qs),
(275,-21,o),
(269,2,o),
(269,19,qs),
(269,255,o),
(268,313,qs),
(268,390,l),
(268,468,ls),
(269,526,o),
(269,762,qs),
(269,779,l),
(304,779,l),
(320,763,o),
(338,738,o),
(338,727,qs),
(338,699,o),
(362,178,qs),
(373,-50,l),
(356,-67,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 0 1 134 0 0 0 26 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 0 1 0 133 0 1 1 118
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
44 22 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = l.ss01;
},
{
glyphname = m.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,-63,o),
(471,30,o),
(471,85,qs),
(471,158,o),
(452,304,o),
(433,416,q),
(420,424,o),
(412,424,qs),
(379,424,o),
(359,271,o),
(359,159,q),
(338,148,l),
(323,138,o),
(315,138,qs),
(309,138,o),
(299,147,o),
(293,159,q),
(280,223,o),
(225,374,o),
(194,435,q),
(160,367,o),
(122,242,o),
(122,179,qs),
(122,121,o),
(139,66,q),
(139,47,o),
(133,29,o),
(121,29,q),
(78,37,o),
(37,102,o),
(28,179,o),
(28,232,q),
(33,279,o),
(8,374,o),
(-16,436,qs),
(-24,457,o),
(-36,493,o),
(-36,502,q),
(-38,513,l),
(-38,528,o),
(-22,528,qs),
(-9,528,o),
(28,508,o),
(57,482,o),
(57,473,qs),
(57,464,o),
(38,464,q),
(38,440,o),
(50,409,o),
(66,379,q),
(128,505,o),
(184,505,qs),
(215,505,o),
(274,434,o),
(305,361,q),
(328,442,o),
(385,522,o),
(415,522,qs),
(448,522,o),
(507,427,o),
(526,342,qs),
(527,335,o),
(541,280,qs),
(561,196,o),
(584,76,o),
(584,25,qs),
(584,-35,o),
(563,-63,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */
28 1 1 0 29 1 2 1 47 1 6 2 56 35 17 12 4 5 6 42 1 4 5 5 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 6 1 2 6 128 0 5 6 4 6 5 4 128 0 7 4 7 134 3 1 0 0 6 5 0 6 105 0 4 4 1 97 0 1 1 29 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 2 1 6 1 2 6 128 0 5 6 4 6 5 4 128 0 7 4 7 134 0 1 2 4 1 89 3 1 0 0 6 5 0 6 105 0 1 1 4 97 0 4 1 4 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 3 0 3 133 0 2 1 6 1 2 6 128 0 5 6 4 6 5 4 128 0 7 4 7 134 0 1 2 4 1 89 0 0 0 6 5 0 6 105 0 1 1 4 97 0 4 1 4 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
23 20 44 28 36 20 36 40 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = m.ss01;
},
{
glyphname = n.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(459,-4,o),
(427,37,o),
(418,92,o),
(416,141,qs),
(413,208,o),
(393,289,o),
(358,316,q),
(353,318,o),
(345,318,qs),
(314,318,o),
(283,219,o),
(267,126,qs),
(258,70,o),
(245,13,o),
(236,0,q),
(232,-1,o),
(224,-1,qs),
(186,-1,o),
(144,97,o),
(129,216,o),
(129,259,qs),
(127,300,ls),
(123,346,o),
(123,378,qs),
(123,462,o),
(154,462,qs),
(174,462,o),
(206,431,q),
(213,412,o),
(216,374,o),
(216,345,qs),
(216,316,o),
(219,278,o),
(225,259,q),
(286,421,o),
(347,421,qs),
(388,421,o),
(457,294,o),
(504,118,o),
(512,48,q),
(512,24,o),
(505,-9,o),
(492,-9,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
20 8 2 3 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 3 2 0 3 105 0 1 1 29 77 5 4 2 2 2 30 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 1 133 0 0 0 3 2 0 3 105 5 4 2 2 2 30 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 1 0 1 133 0 0 0 3 2 0 3 105 0 2 2 30 77 5 1 4 4 30 4 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 42 0 42 23 23 40 37 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = n.ss01;
},
{
glyphname = ntilde.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(437,425,o),
(418,425,qs),
(378,425,o),
(318,468,o),
(277,510,qs),
(248,542,o),
(205,575,o),
(182,575,qs),
(144,575,o),
(100,520,q),
(85,520,o),
(47,543,o),
(47,556,q),
(41,556,o),
(34,562,o),
(34,565,qs),
(34,574,o),
(47,574,q),
(80,632,o),
(137,632,qs),
(183,632,o),
(288,565,o),
(333,520,q),
(342,517,o),
(350,517,qs),
(366,517,o),
(396,535,o),
(419,554,qs),
(439,571,o),
(462,587,o),
(476,592,q),
(512,574,l),
(534,551,o),
(534,524,qs),
(534,495,o),
(488,441,o),
(458,431,qs)
);
},
{
closed = 1;
nodes = (
(454,-24,o),
(411,32,o),
(395,106,o),
(389,165,qs),
(383,211,o),
(376,256,o),
(368,274,q),
(348,248,o),
(326,196,o),
(313,158,qs),
(304,130,o),
(290,93,o),
(279,78,q),
(265,76,o),
(260,76,qs),
(225,76,o),
(177,124,o),
(154,192,o),
(154,220,qs),
(152,257,ls),
(148,301,o),
(148,330,qs),
(148,411,o),
(178,411,qs),
(196,411,o),
(226,381,q),
(232,364,o),
(235,328,o),
(235,301,qs),
(235,274,o),
(238,238,o),
(244,220,q),
(287,366,o),
(344,366,qs),
(381,366,o),
(453,248,o),
(505,85,o),
(512,23,q),
(512,1,o),
(506,-30,o),
(494,-30,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
5 1 4 1 20 1 3 2 70 57 45 3 8 6 39 1 9 8 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 2 4 3 4 2 3 128 0 3 0 4 3 112 0 0 5 4 0 5 126 0 5 7 4 5 7 126 0 7 6 4 7 6 126 0 6 8 4 6 8 126 0 8 9 4 8 9 126 0 1 0 4 2 1 4 105 10 1 9 9 27 9 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
0 2 4 3 4 2 3 128 0 3 0 4 3 0 126 0 0 5 4 0 5 126 0 5 7 4 5 7 126 0 7 6 4 7 6 126 0 6 8 4 6 8 126 0 8 9 4 8 9 126 0 1 0 4 2 1 4 105 10 1 9 9 27 9 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
0 2 4 3 4 2 3 128 0 3 0 4 3 0 126 0 0 5 4 0 5 126 0 5 7 4 5 7 126 0 7 6 4 7 6 126 0 6 8 4 6 8 126 0 8 9 4 8 9 126 10 1 9 9 132 0 1 4 4 1 89 0 1 1 4 97 0 4 1 4 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
37 37 37 77 37 77 23 40 39 36 33 22 17 36 26 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ntilde.ss01;
},
{
glyphname = o.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(345,2,o),
(333,2,qs),
(263,2,o),
(160,67,o),
(107,172,o),
(107,231,qs),
(107,312,o),
(205,438,o),
(297,455,qs),
(308,457,o),
(330,457,qs),
(387,457,o),
(470,397,o),
(512,298,o),
(512,241,qs),
(512,165,o),
(438,33,o),
(369,4,q)
);
},
{
closed = 1;
nodes = (
(250,82,o),
(273,82,qs),
(315,82,o),
(383,154,o),
(421,261,o),
(421,311,qs),
(421,357,o),
(405,383,q),
(392,397,o),
(383,402,o),
(369,402,qs),
(319,402,o),
(237,338,o),
(189,240,o),
(189,191,qs),
(189,131,o),
(225,95,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 0 0 2 3 0 2 105 0 3 3 1 97 0 1 1 30 1 78 39 38 39 37 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = o.ss01;
},
{
glyphname = p.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(207,-353,l),
(170,-346,o),
(133,-331,o),
(119,-308,o),
(119,-288,qs),
(119,-272,o),
(122,-249,qs),
(126,-205,o),
(126,-165,qs),
(126,-97,o),
(116,41,o),
(106,142,qs),
(96,238,o),
(85,380,o),
(85,449,qs),
(85,464,o),
(99,479,o),
(111,479,qs),
(123,479,o),
(152,464,o),
(167,449,q),
(212,480,o),
(271,480,qs),
(336,480,o),
(463,404,o),
(544,282,o),
(544,219,qs),
(544,166,o),
(514,122,q),
(481,66,o),
(361,-5,o),
(298,-5,qs),
(249,-5,o),
(207,19,q),
(207,-13,o),
(215,-92,o),
(220,-129,qs),
(234,-229,o),
(234,-279,qs),
(234,-317,o),
(228,-353,q)
);
},
{
closed = 1;
nodes = (
(195,261,l),
(207,102,l),
(259,102,o),
(367,131,o),
(440,192,o),
(440,237,qs),
(440,284,o),
(397,343,qs),
(364,385,o),
(291,385,qs),
(240,385,o),
(186,367,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
19 1 4 1 52 1 5 4 6 1 0 5 3 76 0 3 0 3 134 0 4 4 1 97 2 1 1 1 29 77 0 5 5 0 97 0 0 0 30 0 78 50 49 43 41 40 39 35 39 39 6 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = p.ss01;
},
{
glyphname = q.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,-263,o),
(412,-199,o),
(399,-112,o),
(396,-44,qs),
(394,17,o),
(389,38,q),
(362,34,o),
(333,34,qs),
(253,34,o),
(146,97,o),
(94,197,o),
(94,254,qs),
(94,304,o),
(132,393,o),
(204,448,o),
(251,448,qs),
(326,448,o),
(408,380,q),
(406,422,ls),
(406,487,o),
(430,487,qs),
(445,487,o),
(483,445,o),
(510,392,o),
(509,380,q),
(509,-22,ls),
(509,-102,o),
(522,-180,qs),
(527,-213,o),
(527,-228,qs),
(527,-242,o),
(519,-258,o),
(509,-263,q)
);
},
{
closed = 1;
nodes = (
(234,118,o),
(247,118,qs),
(289,118,o),
(361,164,o),
(403,236,o),
(403,272,qs),
(403,300,o),
(376,345,o),
(348,359,qs),
(317,375,o),
(289,375,qs),
(240,375,o),
(180,288,o),
(180,231,qs),
(180,197,o),
(204,138,o),
(227,119,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
14 7 2 4 1 26 1 2 5 2 76 0 3 2 3 134 0 1 0 4 5 1 4 105 0 5 0 2 3 5 2 105 0 0 0 29 0 78 39 37 22 38 35 42 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = q.ss01;
},
{
glyphname = r.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,34,o),
(186,34,qs),
(161,34,o),
(155,45,q),
(155,55,o),
(143,132,qs),
(127,236,o),
(108,391,o),
(108,441,qs),
(108,494,o),
(122,494,qs),
(157,494,o),
(213,481,o),
(213,456,qs),
(213,380,l),
(243,442,o),
(348,498,o),
(411,498,qs),
(475,498,o),
(539,471,q),
(546,467,o),
(553,449,o),
(553,439,qs),
(553,423,o),
(538,401,o),
(526,403,q),
(472,420,o),
(423,420,qs),
(334,420,o),
(227,295,o),
(227,158,qs),
(227,106,o),
(236,40,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
32 28 17 3 3 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 3 0 3 134 0 0 0 1 97 2 1 1 1 29 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 3 0 3 134 2 1 1 0 0 1 89 2 1 1 1 0 97 0 0 1 0 81
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
39 37 40 35 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = r.ss01;
},
{
glyphname = s.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(409,-1,o),
(363,-1,qs),
(305,-1,o),
(177,32,o),
(90,92,o),
(90,131,q),
(108,149,o),
(127,149,qs),
(140,149,o),
(164,135,o),
(180,122,qs),
(190,114,o),
(213,99,o),
(223,96,q),
(245,81,o),
(314,64,o),
(348,64,qs),
(385,64,o),
(433,84,o),
(433,104,qs),
(433,123,o),
(411,145,q),
(295,213,o),
(188,332,o),
(188,377,qs),
(188,414,o),
(252,457,o),
(300,457,qs),
(340,457,o),
(423,424,o),
(455,392,q),
(458,388,o),
(458,384,qs),
(458,373,o),
(431,354,o),
(420,354,q),
(371,375,o),
(321,393,o),
(303,393,qs),
(267,393,o),
(267,346,q),
(272,330,o),
(319,294,o),
(369,262,qs),
(443,216,o),
(524,145,o),
(524,107,qs),
(524,56,o),
(437,10,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
15 1 1 0 7 1 4 1 42 1 3 4 3 76 0 1 0 4 0 1 4 128 0 4 3 0 4 3 126 0 2 0 0 1 2 0 105 0 3 3 5 97 0 5 5 30 5 78 36 39 41 38 18 40 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = s.ss01;
},
{
glyphname = t.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,-25,o),
(339,-25,qs),
(285,-25,o),
(205,48,o),
(157,159,o),
(148,218,q),
(134,218,o),
(99,239,o),
(99,251,qs),
(99,264,o),
(120,299,o),
(132,299,q),
(121,385,o),
(108,522,o),
(108,588,qs),
(108,652,o),
(115,705,q),
(122,725,o),
(138,725,qs),
(160,725,o),
(197,688,q),
(197,683,o),
(206,665,qs),
(210,655,o),
(218,635,o),
(218,629,qs),
(218,620,o),
(209,620,qs),
(205,620,o),
(197,623,q),
(197,526,o),
(202,396,o),
(213,332,q),
(253,350,ls),
(299,369,o),
(311,381,q),
(350,381,o),
(412,350,o),
(423,316,q),
(423,309,o),
(415,301,o),
(407,296,qs),
(398,290,o),
(390,284,q),
(374,284,o),
(251,262,o),
(230,251,q),
(229,251,o),
(229,200,o),
(249,113,o),
(278,56,q),
(297,56,o),
(341,74,o),
(375,92,qs),
(392,100,o),
(427,117,o),
(440,121,q),
(435,131,o),
(435,135,qs),
(435,142,o),
(444,142,q),
(471,138,l),
(518,109,o),
(518,79,qs),
(518,45,o),
(414,-9,o),
(358,-24,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
40 36 2 4 5 33 1 6 3 2 76 0 4 5 3 5 4 3 128 0 3 6 5 3 6 126 0 6 2 5 6 2 126 0 2 7 5 2 7 126 0 0 7 1 7 0 1 128 0 7 7 5 97 0 5 5 28 77 0 1 1 8 98 0 8 8 27 8 78 35 20 22 39 39 23 22 24 21 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = t.ss01;
},
{
glyphname = u.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(276,-19,o),
(170,90,o),
(124,243,o),
(124,313,qs),
(123,376,ls),
(123,429,o),
(142,497,o),
(170,497,qs),
(190,497,o),
(215,479,q),
(224,464,o),
(243,426,o),
(243,418,qs),
(243,410,o),
(236,410,qs),
(231,410,o),
(215,418,q),
(205,356,o),
(205,299,qs),
(205,138,o),
(288,41,q),
(333,79,o),
(370,184,o),
(370,249,qs),
(370,314,o),
(350,428,qs),
(342,479,l),
(339,487,o),
(339,491,qs),
(339,503,o),
(354,503,qs),
(367,503,o),
(406,487,o),
(415,479,q),
(442,434,o),
(477,295,o),
(477,225,qs),
(477,140,o),
(421,9,o),
(361,-19,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
22 10 2 1 0 18 1 3 1 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
22 10 2 1 2 18 1 3 1 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 1 0 3 0 1 3 128 2 1 0 0 29 77 0 3 3 27 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 1 0 3 0 1 3 128 2 1 0 0 3 97 0 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 128 0 1 3 0 1 3 126 0 0 0 3 97 0 3 3 27 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
22 37 46 39 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = u.ss01;
},
{
glyphname = v.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,-12,o),
(233,33,o),
(204,100,o),
(187,158,qs),
(178,194,o),
(166,226,qs),
(151,260,o),
(104,394,o),
(90,442,q),
(90,452,o),
(108,452,qs),
(129,452,o),
(196,429,o),
(196,424,q),
(204,415,o),
(216,365,o),
(223,320,o),
(224,313,q),
(224,279,o),
(281,164,o),
(300,140,q),
(303,152,o),
(313,209,qs),
(326,290,o),
(352,404,o),
(400,498,o),
(436,506,q),
(462,506,o),
(485,480,o),
(502,442,q),
(483,398,l),
(445,341,o),
(407,227,o),
(387,138,q),
(380,122,o),
(372,82,qs),
(363,42,o),
(346,-2,o),
(329,-12,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
29 20 17 8 4 2 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 2 0 1 2 128 0 0 0 29 77 0 2 2 27 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 2 27 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
25 47 26 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = v.ss01;
},
{
glyphname = w.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,-10,o),
(190,-10,qs),
(104,-10,o),
(31,179,qs),
(23,202,ls),
(0,264,o),
(0,286,qs),
(0,301,o),
(10,301,qs),
(24,301,o),
(61,270,q),
(66,263,o),
(99,218,o),
(108,209,q),
(108,194,l),
(93,194,l),
(105,171,o),
(129,117,o),
(139,87,q),
(152,106,o),
(165,150,o),
(172,185,qs),
(177,218,o),
(185,240,q),
(195,242,o),
(201,242,qs),
(225,242,o),
(266,213,o),
(296,184,qs),
(321,159,o),
(337,148,q),
(369,166,o),
(409,243,o),
(433,310,qs),
(452,365,o),
(483,432,o),
(533,481,o),
(568,485,q),
(588,485,o),
(632,459,o),
(632,446,qs),
(632,442,o),
(629,439,q),
(633,435,o),
(633,429,qs),
(633,419,o),
(617,398,o),
(598,378,qs),
(577,353,o),
(544,286,o),
(522,231,qs),
(500,175,o),
(466,108,o),
(419,63,o),
(388,63,qs),
(335,63,o),
(261,133,q),
(257,121,o),
(252,97,o),
(249,84,qs),
(243,51,o),
(229,8,o),
(215,-6,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
21 19 17 3 4 1 48 1 3 2 43 31 5 3 0 3 3 76 0 4 1 2 1 4 2 128 0 2 3 1 2 3 126 0 3 0 1 3 0 126 0 0 5 1 0 5 126 0 1 1 29 77 0 5 5 27 5 78 37 37 26 27 31 38 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = w.ss01;
},
{
glyphname = x.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(199,-80,o),
(153,-47,o),
(128,-22,q),
(125,-9,o),
(125,5,qs),
(125,40,o),
(153,107,o),
(181,156,qs),
(216,217,o),
(224,248,q),
(224,257,o),
(195,283,o),
(166,295,o),
(166,286,q),
(159,282,o),
(150,282,qs),
(136,282,o),
(106,303,o),
(79,334,o),
(70,344,q),
(61,361,o),
(61,369,qs),
(61,382,o),
(80,382,qs),
(102,382,o),
(181,351,o),
(254,313,o),
(262,305,q),
(274,331,ls),
(305,398,o),
(358,481,o),
(387,481,q),
(392,480,o),
(397,479,q),
(415,479,o),
(459,444,o),
(490,397,o),
(490,383,qs),
(490,369,o),
(475,369,qs),
(462,369,o),
(436,382,q),
(414,338,o),
(378,228,q),
(463,169,o),
(561,65,o),
(561,43,qs),
(561,33,o),
(549,33,qs),
(527,33,o),
(419,101,o),
(339,171,q),
(329,156,o),
(308,100,o),
(299,70,qs),
(280,9,o),
(247,-64,o),
(224,-80,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
43 29 2 5 1 47 13 5 3 0 5 2 76 15 1 4 35 1 1 2 75 0 4 2 1 2 4 1 128 0 1 5 2 1 5 126 0 5 0 2 5 0 126 0 0 6 2 0 6 126 0 6 6 132 3 1 2 2 29 2 78 30 38 38 18 20 39 39 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = x.ss01;
},
{
glyphname = y.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,-370,o),
(200,-334,o),
(200,-305,qs),
(200,-277,o),
(223,-207,o),
(245,-153,qs),
(264,-106,o),
(287,-42,o),
(292,-14,q),
(249,-14,o),
(96,126,o),
(-24,303,o),
(-24,354,qs),
(-24,398,o),
(26,398,qs),
(36,398,o),
(41,397,q),
(44,394,o),
(63,374,o),
(80,348,o),
(80,340,qs),
(80,329,o),
(64,329,q),
(167,111,o),
(250,111,qs),
(313,111,o),
(394,342,o),
(406,511,q),
(477,511,o),
(477,367,qs),
(477,259,o),
(404,-58,o),
(304,-333,o),
(270,-375,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
12 1 2 3 1 76 33 1 4 73 0 0 3 0 133 0 3 2 3 133 0 2 1 2 133 0 1 1 4 97 0 4 4 27 4 78 20 38 17 34 20 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = y.ss01;
},
{
glyphname = z.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(453,6,o),
(433,6,qs),
(366,6,o),
(208,57,o),
(97,151,o),
(97,214,q),
(117,263,o),
(201,337,o),
(268,381,qs),
(310,410,o),
(321,418,q),
(190,418,o),
(154,400,q),
(154,386,o),
(149,381,o),
(135,381,qs),
(118,381,o),
(79,412,o),
(79,437,q),
(71,452,o),
(174,468,o),
(246,468,qs),
(291,468,o),
(365,461,o),
(376,456,qs),
(433,427,o),
(433,400,qs),
(433,383,o),
(397,348,o),
(361,322,qs),
(340,307,ls),
(264,258,o),
(194,178,o),
(194,149,qs),
(194,118,o),
(261,85,o),
(311,85,qs),
(367,85,o),
(468,124,o),
(488,159,q),
(481,170,o),
(481,177,qs),
(481,185,o),
(491,185,qs),
(504,185,o),
(551,156,o),
(586,111,o),
(586,89,qs),
(586,64,o),
(531,22,o),
(469,9,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
31 1 4 2 37 1 3 4 44 1 0 3 10 1 1 0 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 1 5 4 1 5 126 0 4 4 2 97 0 2 2 29 77 0 5 5 30 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 1 5 4 1 5 126 0 2 0 4 3 2 4 105 0 5 5 30 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
40 19 36 45 37 37 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = z.ss01;
},
{
glyphname = a.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,7,o),
(252,0,o),
(214,0,q),
(146,21,o),
(83,113,o),
(83,176,qs),
(83,245,o),
(146,401,o),
(193,468,q),
(212,488,o),
(243,510,o),
(257,510,qs),
(268,510,o),
(299,489,qs),
(311,481,o),
(335,468,o),
(342,468,q),
(342,446,l),
(310,431,o),
(252,373,o),
(236,340,q),
(227,332,o),
(190,247,o),
(160,147,o),
(160,113,qs),
(160,64,o),
(193,64,q),
(262,78,o),
(337,235,o),
(363,340,q),
(374,372,o),
(374,417,qs),
(374,434,o),
(377,446,o),
(384,446,q),
(394,436,o),
(414,426,qs),
(436,417,o),
(448,404,q),
(455,355,o),
(480,266,o),
(501,202,qs),
(524,131,o),
(547,49,o),
(554,0,q),
(547,0,o),
(524,14,o),
(512,22,qs),
(500,30,o),
(476,43,o),
(469,43,q),
(460,61,o),
(436,98,qs),
(419,123,o),
(405,149,q),
(393,123,ls),
(374,81,o),
(343,33,o),
(320,22,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
41 40 3 3 0 1 1 76 0 0 1 2 1 0 2 128 0 1 1 2 97 0 2 2 30 2 78 56 55 47 45 32 31 3 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = a.ss02;
},
{
glyphname = aacute.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(474,628,ls),
(461,630,o),
(419,594,o),
(384,549,o),
(384,543,qs),
(385,534,o),
(398,516,o),
(408,515,qs),
(412,514,o),
(419,514,qs),
(440,514,o),
(486,543,o),
(519,578,o),
(519,585,qs),
(519,601,o),
(491,628,o),
(478,628,qs)
);
},
{
closed = 1;
nodes = (
(291,7,o),
(252,0,o),
(214,0,q),
(146,21,o),
(83,113,o),
(83,176,qs),
(83,245,o),
(146,401,o),
(193,468,q),
(212,488,o),
(243,510,o),
(257,510,qs),
(268,510,o),
(299,489,qs),
(311,481,o),
(335,468,o),
(342,468,q),
(342,446,l),
(310,431,o),
(252,373,o),
(236,340,q),
(227,332,o),
(190,247,o),
(160,147,o),
(160,113,qs),
(160,64,o),
(193,64,q),
(262,78,o),
(337,235,o),
(363,340,q),
(374,372,o),
(374,417,qs),
(374,434,o),
(377,446,o),
(384,446,q),
(394,436,o),
(414,426,qs),
(436,417,o),
(448,404,q),
(455,355,o),
(480,266,o),
(501,202,qs),
(524,131,o),
(547,49,o),
(554,0,q),
(547,0,o),
(524,14,o),
(512,22,qs),
(500,30,o),
(476,43,o),
(469,43,q),
(460,61,o),
(436,98,qs),
(419,123,o),
(405,149,q),
(393,123,ls),
(374,81,o),
(343,33,o),
(320,22,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
11 2 2 0 1 58 57 20 3 2 0 2 76 5 1 1 0 1 133 0 2 0 4 0 2 4 128 3 1 0 0 4 97 0 4 4 30 4 78 0 0 73 72 64 62 49 48 0 16 0 15 21 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = aacute.ss02;
},
{
glyphname = acircumflex.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,7,o),
(252,0,o),
(214,0,q),
(146,21,o),
(83,113,o),
(83,176,qs),
(83,245,o),
(146,401,o),
(193,468,q),
(212,488,o),
(243,510,o),
(257,510,qs),
(268,510,o),
(299,489,qs),
(311,481,o),
(335,468,o),
(342,468,q),
(342,446,l),
(310,431,o),
(252,373,o),
(236,340,q),
(227,332,o),
(190,247,o),
(160,147,o),
(160,113,qs),
(160,64,o),
(193,64,q),
(262,78,o),
(337,235,o),
(363,340,q),
(374,372,o),
(374,417,qs),
(374,434,o),
(377,446,o),
(384,446,q),
(394,436,o),
(414,426,qs),
(436,417,o),
(448,404,q),
(455,355,o),
(480,266,o),
(501,202,qs),
(524,131,o),
(547,49,o),
(554,0,q),
(547,0,o),
(524,14,o),
(512,22,qs),
(500,30,o),
(476,43,o),
(469,43,q),
(460,61,o),
(436,98,qs),
(419,123,o),
(405,149,q),
(393,123,ls),
(374,81,o),
(343,33,o),
(320,22,qs)
);
},
{
closed = 1;
nodes = (
(305,753,l),
(319,764,o),
(337,764,qs),
(354,764,o),
(392,742,o),
(414,724,qs),
(436,708,ls),
(463,690,o),
(544,621,o),
(544,603,q),
(543,600,ls),
(540,591,o),
(479,575,o),
(466,575,qs),
(458,576,l),
(449,579,o),
(426,606,o),
(408,631,qs),
(389,658,o),
(364,687,o),
(353,689,q),
(337,689,o),
(308,665,o),
(290,643,qs),
(271,622,o),
(250,604,o),
(238,604,q),
(217,624,l),
(196,645,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
87 1 3 4 76 1 5 3 41 40 3 3 0 1 3 76 0 3 4 5 4 3 5 128 0 5 1 4 5 1 126 0 1 0 4 1 0 126 0 0 2 4 0 2 126 0 2 2 132 0 6 4 4 6 89 0 6 6 4 97 0 4 6 4 81 85 83 74 73 66 65 61 60 56 55 47 45 32 31 7 6 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = acircumflex.ss02;
},
{
glyphname = b.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(245,-22,o),
(241,-22,qs),
(235,-22,o),
(210,-3,o),
(205,-3,q),
(196,5,o),
(190,27,qs),
(187,35,o),
(181,51,o),
(176,56,q),
(161,272,o),
(147,552,o),
(147,698,qs),
(147,737,o),
(158,737,qs),
(166,737,o),
(186,707,o),
(203,674,o),
(205,669,q),
(205,660,o),
(215,575,o),
(220,528,qs),
(235,412,o),
(235,391,q),
(247,403,o),
(263,413,qs),
(282,425,o),
(293,436,q),
(341,455,o),
(374,455,qs),
(417,455,o),
(457,404,o),
(475,354,qs),
(483,334,l),
(487,315,o),
(487,291,qs),
(487,227,o),
(424,96,o),
(320,11,o),
(264,11,q),
(264,-3,o),
(259,-18,o),
(249,-18,q)
);
},
{
closed = 1;
nodes = (
(239,282,o),
(246,229,o),
(249,205,qs),
(254,145,o),
(264,99,q),
(327,151,o),
(411,251,o),
(411,305,qs),
(411,334,o),
(395,363,q),
(386,376,o),
(368,376,qs),
(347,376,o),
(293,345,o),
(255,318,qs),
(235,304,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
23 1 1 2 18 1 4 1 58 53 32 3 0 4 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 4 0 1 4 105 0 2 2 28 77 0 0 0 30 77 0 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 0 4 3 4 0 3 128 0 1 0 4 0 1 4 105 0 2 2 28 77 0 3 3 27 3 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 43 45 40 18 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = b.ss02;
},
{
glyphname = c.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,24,o),
(134,126,o),
(134,194,qs),
(134,254,o),
(177,376,o),
(252,464,o),
(298,477,q),
(304,480,o),
(314,480,qs),
(336,480,o),
(390,456,o),
(390,445,qs),
(390,438,o),
(372,433,q),
(322,426,o),
(247,337,o),
(208,213,o),
(208,157,qs),
(208,145,o),
(210,125,q),
(210,93,o),
(231,48,o),
(253,48,qs),
(260,48,o),
(269,51,q),
(305,58,o),
(362,105,o),
(398,147,qs),
(420,173,o),
(430,183,qs),
(433,186,o),
(439,186,qs),
(450,186,o),
(483,167,o),
(506,137,o),
(506,121,q),
(504,110,l),
(492,81,o),
(428,29,o),
(344,-1,o),
(304,-1,qs),
(280,-1,o),
(254,7,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
22 6 2 2 1 1 76 0 1 3 2 3 1 2 128 0 2 0 3 2 0 126 0 3 3 29 77 0 0 0 30 0 78 44 40 23 32 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = c.ss02;
},
{
glyphname = d.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(447,-178,o),
(433,-178,qs),
(416,-178,o),
(379,-155,o),
(352,-124,o),
(352,-117,qs),
(352,56,l),
(335,21,o),
(284,-31,o),
(249,-31,q),
(227,-36,o),
(211,-36,qs),
(158,-36,o),
(81,39,o),
(42,153,o),
(42,211,q),
(50,283,o),
(119,423,o),
(235,513,o),
(307,513,qs),
(337,513,o),
(370,504,q),
(370,780,l),
(370,797,l),
(393,797,o),
(421,780,o),
(439,763,q),
(450,605,o),
(456,133,o),
(456,-169,q)
);
},
{
closed = 1;
nodes = (
(280,91,o),
(340,188,o),
(370,263,q),
(370,452,l),
(335,452,o),
(289,446,o),
(266,435,q),
(223,406,o),
(159,304,o),
(125,185,o),
(125,132,qs),
(125,110,o),
(128,90,qs),
(135,61,o),
(165,33,o),
(183,33,qs),
(209,33,o),
(232,56,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
2 1 1 0 7 1 6 1 44 22 13 3 5 6 29 23 2 4 2 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 1 5 1 6 5 128 0 4 2 4 134 0 0 0 26 77 0 1 1 2 97 3 1 2 2 27 77 0 5 5 2 97 3 1 2 2 27 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 6 1 5 1 6 5 128 0 4 2 4 134 0 1 6 2 1 89 0 5 3 1 2 4 5 2 105 0 0 0 26 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 6 1 5 1 6 5 128 0 4 2 4 134 0 1 0 3 2 1 3 105 0 5 0 2 4 5 2 105 0 0 0 26 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
26 34 38 17 38 35 20 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = d.ss02;
},
{
glyphname = e.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(454,18,o),
(362,-16,o),
(314,-16,qs),
(236,-16,o),
(109,70,o),
(83,149,q),
(72,176,o),
(59,250,o),
(59,290,qs),
(59,366,o),
(109,483,o),
(161,500,q),
(181,510,o),
(210,510,qs),
(248,510,o),
(327,475,o),
(378,415,o),
(378,380,q),
(376,364,l),
(376,286,o),
(256,187,o),
(161,149,q),
(161,124,o),
(182,88,o),
(201,70,q),
(218,65,o),
(234,65,qs),
(277,65,o),
(378,112,o),
(415,149,qs),
(473,207,ls),
(479,213,o),
(488,213,qs),
(506,213,o),
(553,180,o),
(553,168,qs),
(553,106,o),
(492,51,qs)
);
},
{
closed = 1;
nodes = (
(161,360,o),
(161,247,q),
(207,270,o),
(263,306,o),
(275,332,q),
(290,357,o),
(290,391,qs),
(290,419,o),
(279,442,q),
(262,442,o),
(249,440,o),
(226,427,o),
(212,410,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
48 19 18 3 0 4 15 1 1 0 2 76 0 2 4 2 133 0 4 0 4 133 0 0 1 0 133 0 1 1 3 98 0 3 3 27 3 78 21 41 43 36 35 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = e.ss02;
},
{
glyphname = f.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,-176,o),
(277,-116,o),
(277,-81,q),
(256,-20,ls),
(226,67,o),
(193,178,o),
(183,239,q),
(175,239,o),
(158,236,qs),
(118,231,o),
(104,231,qs),
(78,231,o),
(70,239,q),
(59,239,o),
(12,275,o),
(12,286,qs),
(12,296,o),
(32,296,qs),
(53,296,o),
(171,321,o),
(183,334,q),
(168,396,o),
(168,468,qs),
(168,593,o),
(258,773,o),
(357,773,qs),
(381,773,o),
(409,767,q),
(450,754,o),
(508,703,o),
(522,672,q),
(522,662,o),
(520,646,o),
(516,646,qs),
(511,646,o),
(504,654,q),
(493,654,o),
(479,664,o),
(468,675,qs),
(453,692,o),
(420,711,o),
(391,711,q),
(265,679,o),
(265,487,qs),
(265,428,o),
(277,352,q),
(287,352,o),
(345,362,qs),
(366,365,o),
(399,370,o),
(409,371,qs),
(423,371,o),
(478,355,o),
(522,321,o),
(522,296,q),
(510,283,o),
(485,277,o),
(466,277,qs),
(449,277,o),
(381,268,qs),
(353,265,o),
(308,260,o),
(296,259,q),
(309,156,o),
(355,-35,o),
(391,-156,q),
(391,-169,o),
(372,-176,o),
(352,-176,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
37 1 4 3 47 1 7 2 5 1 8 0 65 2 2 10 8 4 76 13 1 7 1 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
37 1 4 3 47 1 7 2 5 1 8 0 65 2 2 10 9 4 76 13 1 7 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 6 3 6 133 0 3 4 3 133 5 1 4 1 4 133 0 1 2 1 133 0 2 7 2 133 0 7 0 7 133 0 0 8 0 133 9 1 8 10 8 133 11 1 10 10 118
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 6 3 6 133 0 3 4 3 133 0 4 5 4 133 0 5 1 5 133 0 1 2 1 133 0 2 7 2 133 0 7 0 7 133 0 0 8 0 133 0 8 9 8 133 0 9 10 9 133 11 1 10 10 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 68 0 67 58 56 19 38 38 33 20 20 20 21 41 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = f.ss02;
},
{
glyphname = g.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,-323,o),
(337,-323,qs),
(266,-323,o),
(145,-269,o),
(72,-199,o),
(72,-181,qs),
(72,-172,o),
(82,-172,q),
(92,-174,l),
(225,-223,o),
(313,-223,qs),
(393,-223,o),
(468,-147,o),
(468,-82,qs),
(468,-9,o),
(425,83,q),
(399,45,o),
(334,9,o),
(299,9,qs),
(247,9,o),
(149,78,o),
(88,189,o),
(88,248,qs),
(88,270,o),
(92,287,q),
(92,352,o),
(166,473,o),
(280,548,o),
(336,548,qs),
(383,548,o),
(458,492,o),
(480,434,q),
(480,426,o),
(475,426,qs),
(472,426,o),
(463,433,o),
(462,434,q),
(468,392,o),
(493,301,o),
(517,222,qs),
(550,116,o),
(584,-22,o),
(584,-84,qs),
(584,-172,o),
(494,-292,o),
(388,-319,q)
);
},
{
closed = 1;
nodes = (
(321,83,o),
(386,208,o),
(386,309,qs),
(385,391,ls),
(385,425,o),
(394,458,o),
(408,458,qs),
(413,458,o),
(425,453,q),
(395,480,o),
(360,480,qs),
(316,480,o),
(235,394,o),
(185,263,o),
(185,200,qs),
(185,126,o),
(221,83,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
53 20 13 8 4 7 6 1 76 29 1 7 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 6 5 7 5 6 7 128 0 3 1 2 1 3 2 128 0 0 0 5 6 0 5 105 0 7 7 1 97 0 1 1 30 77 0 2 2 4 97 0 4 4 31 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 6 5 7 5 6 7 128 0 3 1 2 1 3 2 128 0 0 0 5 6 0 5 105 0 7 0 1 3 7 1 105 0 2 2 4 97 0 4 4 31 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
21 34 38 36 18 38 40 47 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = g.ss02;
},
{
glyphname = h.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,-1,ls),
(158,-2,o),
(145,-2,qs),
(116,-2,o),
(94,43,o),
(86,176,o),
(82,364,qs),
(78,591,o),
(71,804,qs),
(71,826,o),
(86,826,qs),
(99,826,o),
(140,796,o),
(170,756,o),
(170,743,qs),
(170,734,o),
(161,731,q),
(167,653,o),
(173,530,qs),
(180,396,o),
(189,279,q),
(221,328,o),
(292,377,o),
(328,377,qs),
(378,377,o),
(463,292,o),
(514,140,o),
(514,43,qs),
(514,-7,o),
(509,-44,q),
(479,-37,o),
(444,8,o),
(428,67,o),
(421,114,qs),
(414,161,o),
(399,217,o),
(364,259,o),
(334,263,q),
(297,263,o),
(226,216,o),
(182,134,o),
(182,83,qs),
(182,42,o),
(198,0,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
26 1 1 2 22 1 0 1 2 76 13 1 3 73 0 2 1 2 133 0 1 0 0 3 1 0 105 4 1 3 3 30 3 78 17 38 43 45 20 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = h.ss02;
},
{
glyphname = i.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,576,o),
(325,567,o),
(315,565,o),
(314,565,q),
(287,579,o),
(256,625,o),
(256,642,q),
(262,653,o),
(273,653,qs),
(285,653,o),
(315,632,o),
(336,603,o),
(336,593,qs),
(336,588,o),
(333,585,q)
);
},
{
closed = 1;
nodes = (
(331,-33,o),
(324,-33,qs),
(280,-33,o),
(248,25,o),
(248,56,qs),
(248,62,o),
(249,68,o),
(249,64,qs),
(249,95,o),
(243,172,o),
(240,209,qs),
(230,305,o),
(230,353,qs),
(230,469,l),
(235,474,o),
(245,474,qs),
(260,474,o),
(299,455,o),
(326,426,o),
(326,411,q),
(307,411,l),
(307,356,o),
(321,268,o),
(334,211,qs),
(345,166,o),
(356,100,o),
(356,64,qs),
(356,17,o),
(345,-31,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
14 10 7 1 4 2 0 29 1 1 2 38 35 2 3 1 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 2 3 2 1 3 128 0 2 2 29 77 0 0 0 3 97 0 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 2 3 2 1 3 128 0 0 0 3 0 3 101 0 2 2 29 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
41 40 28 26 23 22 36 4 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = i.ss02;
},
{
glyphname = j.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(380,497,o),
(362,497,qs),
(345,497,o),
(301,534,o),
(268,581,o),
(268,590,q),
(275,604,o),
(289,604,qs),
(306,604,o),
(352,571,o),
(387,529,o),
(387,520,q)
);
},
{
closed = 1;
nodes = (
(278,-303,o),
(265,-303,qs),
(230,-303,o),
(128,-238,o),
(56,-166,o),
(71,-166,qs),
(82,-166,o),
(122,-191,q),
(177,-217,o),
(216,-217,qs),
(270,-217,o),
(314,-127,o),
(314,-46,qs),
(314,26,o),
(294,178,qs),
(287,230,o),
(276,332,o),
(276,366,qs),
(276,392,o),
(279,413,q),
(289,418,o),
(331,385,o),
(366,337,o),
(366,325,qs),
(366,317,o),
(357,317,qs),
(352,317,o),
(339,322,q),
(339,275,o),
(354,182,o),
(369,116,qs),
(383,51,o),
(397,-28,o),
(397,-67,qs),
(397,-132,o),
(347,-246,o),
(287,-297,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
11 5 2 1 0 20 1 2 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 4 2 133 0 4 3 4 133 0 3 3 5 97 0 5 5 31 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 4 2 133 0 4 3 4 133 0 3 5 5 3 89 0 3 3 5 97 0 5 3 5 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 34 46 43 36 34 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = j.ss02;
},
{
glyphname = k.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(478,-15,o),
(431,37,o),
(408,111,o),
(397,171,qs),
(387,222,o),
(370,280,o),
(339,320,o),
(313,320,qs),
(291,320,o),
(260,304,q),
(238,288,ls),
(191,257,o),
(177,238,q),
(177,222,o),
(182,179,qs),
(191,96,o),
(191,56,qs),
(191,-23,o),
(162,-23,qs),
(144,-23,o),
(117,3,q),
(98,108,o),
(88,505,o),
(88,727,q),
(103,736,o),
(114,736,qs),
(143,736,o),
(165,636,o),
(165,551,qs),
(165,491,o),
(162,437,qs),
(160,356,ls),
(160,326,o),
(163,311,q),
(217,352,o),
(275,437,o),
(297,513,o),
(307,571,qs),
(310,591,l),
(345,598,o),
(360,598,qs),
(396,598,o),
(396,570,qs),
(396,550,o),
(365,476,o),
(330,409,q),
(385,403,o),
(471,255,o),
(518,57,o),
(518,-15,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
25 1 0 1 3 1 3 0 36 15 2 2 3 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
25 1 0 1 3 1 3 0 36 15 2 4 3 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 3 1 0 3 128 0 3 2 1 3 2 126 0 1 1 28 77 4 1 2 2 27 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 1 1 28 77 0 4 4 27 77 0 2 2 27 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
22 41 37 45 39 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = k.ss02;
},
{
glyphname = l.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(322,-27,ls),
(267,-27,o),
(216,24,o),
(200,118,o),
(194,223,qs),
(189,307,ls),
(184,376,o),
(178,445,qs),
(163,614,o),
(163,687,qs),
(163,788,o),
(189,788,qs),
(210,788,o),
(244,759,o),
(244,740,qs),
(244,730,o),
(240,722,q),
(252,566,ls),
(270,346,o),
(290,138,o),
(306,41,q),
(318,49,o),
(343,72,qs),
(367,94,o),
(399,116,o),
(415,116,qs),
(437,116,o),
(455,91,qs),
(462,81,o),
(462,70,qs),
(462,43,o),
(399,-2,o),
(355,-25,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
26 1 0 1 11 1 2 0 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 0 1 2 1 0 2 128 0 1 1 26 77 0 2 2 27 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 0 0 2 0 133 0 2 2 27 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
41 44 37 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = l.ss02;
},
{
glyphname = m.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,-47,o),
(547,10,o),
(524,97,o),
(511,169,qs),
(498,241,o),
(478,319,o),
(461,340,q),
(455,325,o),
(442,283,o),
(436,264,qs),
(419,208,o),
(394,156,o),
(373,156,q),
(361,160,o),
(334,214,o),
(315,263,qs),
(293,320,o),
(261,385,o),
(244,390,qs),
(241,391,o),
(235,391,qs),
(204,391,o),
(182,297,o),
(174,198,qs),
(169,130,o),
(157,39,o),
(144,5,q),
(136,5,o),
(122,3,qs),
(102,2,ls),
(75,2,o),
(75,25,q),
(64,59,o),
(15,412,o),
(15,451,q),
(13,461,o),
(60,506,o),
(72,506,qs),
(77,506,o),
(78,500,q),
(79,504,o),
(92,411,o),
(98,361,qs),
(110,281,l),
(123,370,o),
(186,466,o),
(226,466,qs),
(264,466,o),
(337,377,o),
(365,292,q),
(379,365,o),
(418,433,o),
(441,433,qs),
(479,433,o),
(564,273,o),
(623,60,o),
(623,-7,qs),
(623,-24,o),
(619,-42,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
23 1 0 1 51 14 8 3 5 4 26 1 3 5 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 0 1 4 1 0 4 128 0 5 4 3 4 5 3 128 0 2 2 29 77 0 4 4 1 97 0 1 1 29 77 0 3 3 30 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 2 1 2 133 0 0 1 4 1 0 4 128 0 5 4 3 4 5 3 128 0 4 4 1 97 0 1 1 29 77 0 3 3 30 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 1 2 133 0 0 1 4 1 0 4 128 0 5 4 3 4 5 3 128 0 1 0 4 5 1 4 105 0 3 3 30 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
24 23 38 24 36 36 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = m.ss02;
},
{
glyphname = n.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(477,-8,l),
(447,-8,o),
(418,86,o),
(406,173,qs),
(394,253,o),
(372,329,o),
(349,329,qs),
(323,329,o),
(282,268,qs),
(248,215,o),
(222,134,o),
(222,95,qs),
(222,75,o),
(228,25,o),
(232,0,q),
(223,-5,o),
(207,-5,qs),
(179,-5,o),
(127,25,o),
(127,45,qs),
(127,131,ls),
(127,150,o),
(120,215,qs),
(116,259,o),
(108,361,o),
(108,399,qs),
(108,510,o),
(143,510,qs),
(162,510,o),
(211,458,q),
(215,420,l),
(215,404,o),
(205,404,qs),
(202,404,o),
(194,407,q),
(192,382,ls),
(187,320,o),
(187,286,qs),
(187,242,o),
(195,234,q),
(226,334,o),
(301,430,o),
(340,430,qs),
(380,430,o),
(450,338,o),
(492,181,o),
(492,87,qs),
(492,34,o),
(487,-6,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
17 13 2 1 0 33 1 3 4 2 76 0 2 0 2 133 0 1 0 4 0 1 4 128 0 0 0 4 3 0 4 105 5 1 3 3 30 3 78 20 40 41 35 40 36 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = n.ss02;
},
{
glyphname = ntilde.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(477,-8,l),
(447,-8,o),
(418,86,o),
(406,173,qs),
(394,253,o),
(372,329,o),
(349,329,qs),
(323,329,o),
(282,268,qs),
(248,215,o),
(222,134,o),
(222,95,qs),
(222,75,o),
(228,25,o),
(232,0,q),
(223,-5,o),
(207,-5,qs),
(179,-5,o),
(127,25,o),
(127,45,qs),
(127,131,ls),
(127,152,o),
(120,213,qs),
(108,307,o),
(108,363,qs),
(108,455,o),
(143,455,qs),
(162,455,o),
(211,403,q),
(215,365,l),
(215,349,o),
(205,349,qs),
(202,349,o),
(194,352,q),
(192,330,ls),
(187,285,o),
(187,270,qs),
(187,242,o),
(195,234,q),
(231,322,o),
(311,408,o),
(350,408,qs),
(389,408,o),
(455,327,o),
(493,183,o),
(493,93,qs),
(493,45,o),
(487,-6,q)
);
},
{
closed = 1;
nodes = (
(131,612,o),
(184,631,o),
(221,631,qs),
(244,631,o),
(272,627,qs),
(307,622,o),
(348,610,o),
(384,597,qs),
(416,585,ls),
(451,572,o),
(514,563,q),
(514,539,o),
(512,497,o),
(502,477,o),
(488,477,qs),
(469,477,o),
(440,494,o),
(417,513,qs),
(392,533,o),
(358,554,o),
(334,560,qs),
(322,563,o),
(307,563,qs),
(293,563,o),
(262,560,o),
(246,558,qs),
(202,552,o),
(184,552,qs),
(135,552,o),
(129,579,q),
(128,590,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */
78 1 7 9 17 13 2 1 0 32 1 3 4 3 76 67 1 7 1 75 0 7 9 6 9 7 6 128 0 8 6 2 6 8 2 128 0 2 0 6 2 0 126 0 1 0 4 0 1 4 128 0 9 0 6 8 9 6 105 0 0 0 4 3 0 4 105 5 1 3 3 30 3 78 76 74 38 35 35 20 40 40 35 40 36 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ntilde.ss02;
},
{
glyphname = o.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,-17,o),
(154,51,o),
(106,156,o),
(106,215,qs),
(106,272,o),
(150,378,o),
(193,416,qs),
(222,445,o),
(293,484,o),
(328,484,q),
(361,473,o),
(400,434,o),
(400,407,qs),
(400,395,o),
(396,383,q),
(396,371,o),
(388,371,qs),
(383,371,o),
(365,381,o),
(356,386,qs),
(334,400,o),
(328,400,q),
(318,403,o),
(307,403,qs),
(272,403,o),
(214,331,o),
(181,221,o),
(181,169,qs),
(181,117,o),
(217,51,o),
(253,51,qs),
(284,51,o),
(328,79,q),
(359,104,o),
(381,175,o),
(381,217,qs),
(381,236,o),
(379,262,qs),
(378,290,ls),
(378,306,o),
(385,319,o),
(396,315,q),
(446,306,o),
(495,236,o),
(495,187,qs),
(495,138,o),
(450,40,o),
(371,-23,o),
(324,-23,qs),
(311,-22,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
34 1 3 2 11 1 1 3 2 76 0 3 2 1 2 3 1 128 0 1 0 2 1 0 126 0 2 2 4 97 0 4 4 29 77 0 0 0 27 0 78 40 39 33 31 26 24 19 17 16 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = o.ss02;
},
{
glyphname = p.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(288,-377,o),
(276,-392,o),
(269,-392,qs),
(262,-392,o),
(255,-385,q),
(216,-375,o),
(141,22,o),
(87,496,o),
(89,511,q),
(89,525,o),
(103,525,qs),
(118,525,o),
(155,494,o),
(155,477,q),
(206,507,o),
(262,507,qs),
(325,507,o),
(436,433,o),
(502,312,o),
(502,247,qs),
(502,202,o),
(486,163,qs),
(471,125,o),
(408,39,o),
(324,-20,o),
(280,-20,qs),
(250,-20,o),
(221,-4,q),
(229,-61,o),
(255,-193,qs),
(278,-296,o),
(288,-368,q)
);
},
{
closed = 1;
nodes = (
(185,283,o),
(197,213,qs),
(221,47,l),
(273,47,o),
(354,118,o),
(398,226,o),
(398,281,qs),
(398,341,o),
(344,419,o),
(292,419,qs),
(240,419,o),
(172,378,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
22 1 1 2 17 1 4 1 43 1 5 4 3 1 0 5 31 1 3 0 5 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 1 2 133 0 3 0 3 134 0 1 0 4 5 1 4 105 0 5 5 0 97 0 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 1 2 133 0 3 0 3 134 0 4 4 1 97 0 1 1 29 77 0 5 5 0 97 0 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 1 2 133 0 3 0 3 134 0 1 0 4 5 1 4 105 0 5 5 0 97 0 0 0 27 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
21 35 38 35 40 36 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = p.ss02;
},
{
glyphname = q.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,-376,o),
(504,-376,qs),
(466,-376,o),
(423,-268,o),
(407,-127,o),
(401,-25,qs),
(395,65,o),
(392,83,q),
(346,23,o),
(277,23,qs),
(226,23,o),
(126,87,o),
(62,191,o),
(62,248,q),
(61,256,o),
(61,273,qs),
(61,338,o),
(128,476,o),
(240,567,o),
(303,567,qs),
(328,567,o),
(355,558,q),
(353,572,l),
(353,591,o),
(368,591,qs),
(380,591,o),
(415,569,o),
(441,539,o),
(441,530,qs),
(441,522,o),
(429,522,q),
(429,442,o),
(452,236,o),
(476,57,qs),
(498,-108,o),
(520,-303,o),
(520,-374,q)
);
},
{
closed = 1;
nodes = (
(208,111,o),
(226,111,qs),
(266,111,o),
(326,173,o),
(360,227,qs),
(374,248,l),
(374,272,o),
(368,336,o),
(365,367,qs),
(355,449,o),
(355,485,q),
(347,485,o),
(339,493,o),
(337,502,o),
(337,503,q),
(285,484,o),
(193,401,o),
(138,295,o),
(138,243,qs),
(138,172,o),
(191,118,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
13 1 2 1 14 1 0 2 51 42 22 3 5 0 28 1 3 5 4 76 0 1 2 1 133 0 2 0 2 133 0 0 5 0 133 0 4 3 4 134 0 5 3 3 5 89 0 5 5 3 98 0 3 5 3 82 56 54 38 40 35 36 21 6 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = q.ss02;
},
{
glyphname = r.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(305,3,o),
(295,3,qs),
(282,3,o),
(245,30,o),
(233,44,q),
(201,119,o),
(171,339,o),
(171,446,q),
(178,459,o),
(189,459,qs),
(207,459,o),
(233,430,q),
(233,423,o),
(240,407,qs),
(245,394,o),
(248,381,o),
(243,381,qs),
(240,381,o),
(233,385,q),
(233,354,o),
(241,292,qs),
(243,269,o),
(248,218,o),
(248,198,q),
(255,243,o),
(314,347,o),
(398,418,o),
(440,418,qs),
(478,418,o),
(511,385,q),
(511,368,l),
(439,347,o),
(356,237,o),
(320,101,o),
(311,13,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
26 1 0 1 15 10 4 3 4 2 0 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 0 0 2 0 133 0 2 2 30 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 0 1 2 1 0 2 128 0 1 1 29 77 0 2 2 30 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 0 0 2 0 133 0 2 2 30 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
33 31 25 23 37 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = r.ss02;
},
{
glyphname = s.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(357,-1,o),
(324,-1,qs),
(282,-1,o),
(197,41,o),
(170,77,q),
(170,91,o),
(188,91,qs),
(200,91,o),
(231,82,qs),
(246,77,o),
(252,77,qs),
(276,77,o),
(340,96,o),
(365,109,q),
(394,138,o),
(394,161,qs),
(394,193,o),
(333,222,q),
(314,236,o),
(280,256,qs),
(215,294,o),
(140,360,o),
(140,403,qs),
(140,425,o),
(154,451,q),
(173,478,o),
(233,506,o),
(269,506,qs),
(291,506,o),
(315,500,qs),
(361,486,o),
(427,431,o),
(427,387,qs),
(427,378,o),
(414,378,qs),
(397,378,o),
(352,401,o),
(352,410,q),
(344,429,o),
(296,450,o),
(269,450,qs),
(243,450,o),
(208,429,o),
(208,410,qs),
(208,387,o),
(237,354,qs),
(257,334,o),
(294,308,o),
(328,286,qs),
(363,265,o),
(399,239,qs),
(435,215,o),
(475,156,o),
(475,126,qs),
(475,59,o),
(382,12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
17 1 1 0 1 76 50 1 3 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 0 4 0 1 4 128 0 4 3 0 4 3 126 0 3 5 0 3 5 126 0 0 0 2 97 0 2 2 29 77 0 5 5 30 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 0 4 0 1 4 128 0 4 3 0 4 3 126 0 3 5 0 3 5 126 0 2 0 0 1 2 0 105 0 5 5 30 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
35 35 31 37 36 45 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = s.ss02;
},
{
glyphname = t.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,-26,o),
(300,-26,qs),
(230,-26,o),
(153,90,o),
(123,240,o),
(113,347,q),
(113,357,o),
(111,373,q),
(101,373,o),
(84,361,o),
(79,357,q),
(68,357,o),
(45,374,o),
(30,390,qs),
(24,396,o),
(24,402,qs),
(24,410,o),
(47,419,o),
(71,424,qs),
(104,431,o),
(111,438,q),
(111,463,o),
(109,511,qs),
(107,559,o),
(107,583,qs),
(107,668,o),
(127,728,q),
(131,732,o),
(138,732,qs),
(155,732,o),
(191,696,qs),
(200,687,o),
(217,660,o),
(217,652,qs),
(217,644,o),
(207,644,qs),
(202,644,o),
(191,647,q),
(184,618,o),
(184,583,qs),
(184,561,o),
(188,519,qs),
(189,503,o),
(191,470,o),
(191,454,q),
(199,454,o),
(211,457,qs),
(233,461,o),
(247,461,qs),
(265,461,o),
(272,454,q),
(296,454,o),
(336,414,o),
(336,390,q),
(340,390,o),
(313,383,o),
(304,373,q),
(191,373,l),
(195,342,o),
(201,290,qs),
(210,205,o),
(231,92,o),
(256,35,q),
(395,105,o),
(433,180,q),
(448,180,o),
(478,163,o),
(497,140,o),
(497,132,q),
(499,126,o),
(499,115,qs),
(499,77,o),
(426,16,o),
(369,-13,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
35 1 4 5 31 1 2 4 52 1 1 2 67 1 0 6 10 1 8 0 5 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
35 1 4 5 31 1 3 4 52 1 1 2 67 1 0 6 10 1 8 0 5 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 4 5 2 5 4 2 128 0 6 1 0 1 6 0 128 0 0 8 1 0 8 126 3 1 2 7 1 1 6 2 1 105 0 5 5 28 77 0 8 8 27 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 4 5 3 5 4 3 128 0 2 3 1 3 2 114 0 6 1 0 1 6 0 128 0 0 8 1 0 8 126 0 3 7 1 1 6 3 1 105 0 5 5 28 77 0 8 8 27 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
72 70 65 64 62 61 21 43 33 21 23 23 9 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = t.ss02;
},
{
glyphname = u.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(357,-1,o),
(331,-1,qs),
(266,-1,o),
(159,82,o),
(89,209,o),
(77,273,q),
(76,291,o),
(74,308,qs),
(67,387,o),
(67,434,qs),
(67,488,o),
(77,497,q),
(100,497,o),
(143,474,o),
(171,441,o),
(171,429,q),
(179,395,o),
(179,331,qs),
(181,270,o),
(194,191,o),
(242,115,o),
(292,88,q),
(386,154,o),
(386,261,qs),
(386,304,o),
(362,395,o),
(338,462,qs),
(312,542,l),
(312,551,o),
(325,551,qs),
(337,551,o),
(354,546,qs),
(376,542,o),
(382,542,q),
(439,503,o),
(497,365,o),
(497,285,qs),
(497,201,o),
(436,49,o),
(382,6,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
11 1 1 0 33 23 17 3 2 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 1 29 77 0 0 0 2 97 0 2 2 30 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 2 0 1 2 128 0 0 0 2 97 0 2 2 30 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
38 36 27 26 40 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = u.ss02;
},
{
glyphname = v.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,8,o),
(353,8,qs),
(304,8,o),
(159,181,o),
(44,392,o),
(44,429,qs),
(44,445,o),
(58,440,q),
(65,440,o),
(101,416,o),
(130,387,o),
(130,377,qs),
(130,370,o),
(123,367,q),
(152,303,o),
(224,192,o),
(286,105,qs),
(298,88,l),
(318,120,o),
(336,212,o),
(345,294,qs),
(356,390,o),
(381,497,o),
(410,528,q),
(448,528,o),
(505,487,o),
(505,455,q),
(485,415,o),
(462,322,o),
(451,255,qs),
(436,171,o),
(406,63,o),
(377,15,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
14 5 2 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 1 0 133 0 1 1 30 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 0 1 0 133 0 1 1 118
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
31 29 23 2 8 23
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = v.ss02;
},
{
glyphname = w.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(288,-38,o),
(273,-38,qs),
(227,-38,o),
(125,77,o),
(45,221,o),
(24,272,qs),
(14,299,ls),
(6,319,o),
(-9,362,o),
(-9,372,qs),
(-9,380,o),
(-4,380,qs),
(7,380,o),
(40,348,q),
(50,348,o),
(70,315,o),
(70,302,q),
(71,301,o),
(77,294,o),
(77,291,qs),
(77,287,o),
(70,287,q),
(90,241,o),
(132,177,o),
(164,137,qs),
(197,94,o),
(222,58,q),
(222,73,o),
(221,81,qs),
(220,112,ls),
(220,148,o),
(240,193,o),
(268,193,qs),
(292,193,o),
(331,164,o),
(356,137,qs),
(375,118,l),
(410,205,o),
(467,378,o),
(510,520,qs),
(526,574,l),
(530,578,o),
(537,578,qs),
(550,578,o),
(590,555,o),
(602,544,q),
(605,529,o),
(605,510,qs),
(605,456,o),
(565,301,o),
(541,242,qs),
(530,209,o),
(477,81,o),
(465,58,q),
(453,25,o),
(424,25,qs),
(397,25,o),
(332,75,o),
(313,102,q),
(313,-19,o),
(298,-33,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
50 1 3 4 33 31 23 1 4 0 2 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 4 1 133 0 4 3 4 133 0 3 2 3 133 0 0 2 5 2 0 5 128 0 2 2 5 97 0 5 5 27 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 4 1 133 0 4 3 4 133 0 3 2 3 133 0 0 2 5 2 0 5 128 0 2 0 5 2 89 0 2 2 5 97 0 5 2 5 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
59 57 48 47 46 45 41 27 35 6 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = w.ss02;
},
{
glyphname = x.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,-72,o),
(177,-72,qs),
(154,-72,o),
(106,-33,o),
(106,-15,qs),
(106,8,o),
(147,76,o),
(184,125,qs),
(219,171,o),
(227,189,q),
(211,214,o),
(167,265,o),
(131,303,qs),
(93,344,o),
(49,397,o),
(37,421,q),
(83,415,o),
(153,359,o),
(198,308,qs),
(237,264,o),
(262,243,q),
(277,255,o),
(309,307,qs),
(343,362,o),
(398,423,o),
(429,423,qs),
(457,423,o),
(487,392,q),
(498,383,o),
(498,373,qs),
(498,362,o),
(486,362,qs),
(479,362,o),
(470,365,q),
(409,273,o),
(360,180,o),
(360,155,qs),
(360,138,o),
(378,117,o),
(400,99,qs),
(437,70,o),
(495,-1,o),
(521,-69,q),
(517,-70,o),
(508,-70,qs),
(475,-70,o),
(422,-21,o),
(382,30,qs),
(360,59,o),
(330,95,o),
(313,108,q),
(302,95,o),
(276,44,qs),
(250,-5,o),
(215,-58,o),
(193,-69,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
39 1 1 2 45 34 4 3 0 1 2 76 0 2 1 2 133 0 1 0 1 133 3 1 0 0 118 54 52 36 43 41 4 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = x.ss02;
},
{
glyphname = y.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(313,-396,o),
(269,-396,qs),
(224,-396,o),
(130,-360,o),
(66,-311,o),
(66,-296,qs),
(66,-285,o),
(87,-285,q),
(147,-329,o),
(202,-329,qs),
(265,-329,o),
(361,-219,o),
(412,-51,o),
(412,32,qs),
(412,64,o),
(407,97,q),
(388,38,o),
(331,-17,o),
(296,-17,qs),
(254,-17,o),
(167,54,o),
(107,164,o),
(102,219,q),
(102,269,o),
(107,347,o),
(117,387,q),
(117,402,o),
(123,422,o),
(133,422,qs),
(140,422,o),
(148,418,q),
(157,418,o),
(189,386,o),
(189,372,qs),
(189,363,o),
(178,357,q),
(170,309,o),
(170,262,qs),
(170,147,o),
(224,67,q),
(232,49,o),
(249,49,qs),
(267,49,o),
(285,67,q),
(328,118,o),
(367,256,o),
(367,335,qs),
(367,373,o),
(362,418,q),
(358,429,o),
(358,440,qs),
(358,464,o),
(381,464,qs),
(400,464,o),
(423,448,q),
(429,442,o),
(439,436,qs),
(446,431,o),
(453,424,o),
(453,418,q),
(479,285,o),
(509,91,o),
(509,-7,qs),
(509,-295,o),
(346,-376,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
48 41 38 3 1 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
3 1 2 0 1 0 2 1 128 0 6 4 5 4 6 5 128 0 5 0 7 5 7 101 0 0 0 29 77 0 1 1 4 97 0 4 4 27 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 0 2 0 133 3 1 2 1 2 133 0 6 4 5 4 6 5 128 0 5 0 7 5 7 101 0 1 1 4 97 0 4 4 27 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 17 39 40 33 25 41 42 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = y.ss02;
},
{
glyphname = z.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(376,-25,o),
(282,-25,qs),
(203,-25,o),
(98,47,o),
(98,108,qs),
(98,177,o),
(167,256,q),
(194,303,o),
(263,382,o),
(318,438,qs),
(337,458,l),
(315,463,o),
(270,463,qs),
(223,463,o),
(181,465,o),
(136,483,o),
(120,504,q),
(114,504,o),
(108,511,o),
(106,518,o),
(106,519,q),
(353,519,l),
(435,497,o),
(435,459,qs),
(435,442,o),
(409,404,o),
(382,374,qs),
(346,331,o),
(337,317,q),
(380,334,o),
(413,334,qs),
(457,334,o),
(477,303,q),
(488,292,o),
(488,289,qs),
(488,287,o),
(477,287,q),
(456,266,o),
(394,253,o),
(338,249,qs),
(291,247,o),
(260,241,q),
(237,198,ls),
(210,149,o),
(183,79,o),
(183,39,q),
(193,37,o),
(211,37,qs),
(253,37,o),
(330,69,o),
(388,102,qs),
(446,133,l),
(453,140,o),
(483,120,o),
(508,85,o),
(508,70,q),
(511,64,o),
(511,58,qs),
(511,43,o),
(475,24,o),
(461,24,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
49 1 3 5 31 1 2 3 14 4 2 3 0 1 3 76 0 3 5 2 5 3 2 128 0 2 1 5 2 1 126 0 1 0 5 1 0 126 8 1 7 0 6 0 7 6 128 0 4 0 5 3 4 5 105 0 0 0 6 97 0 6 6 27 6 78 0 0 0 60 0 60 41 54 24 36 19 22 43 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = z.ss02;
},
{
glyphname = i.sc;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,-86,o),
(266,69,qs),
(275,380,o),
(275,518,qs),
(275,758,o),
(255,790,q),
(260,799,o),
(279,805,o),
(295,805,qs),
(331,805,o),
(374,800,o),
(385,790,q),
(385,789,l),
(381,783,l),
(370,700,l),
(362,644,l),
(343,-139,l),
(346,-152,o),
(359,-222,o),
(359,-238,qs),
(359,-247,o),
(358,-248,qs),
(356,-249,o),
(326,-233,o),
(319,-229,q),
(303,-223,o),
(283,-218,qs),
(267,-214,o),
(260,-207,o),
(260,-191,qs),
(261,-146,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
24 17 14 13 10 5 0 73 0 0 0 17 0 78 22 20 1 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = i.sc;
},
{
glyphname = i.sc.loclTRK;
layers = (
{
layerId = m01;
width = 600;
}
);
note = i.sc.loclTRK;
},
{
glyphname = zero;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,-34,o),
(76,250,o),
(76,416,q),
(74,440,o),
(74,452,qs),
(74,530,o),
(140,693,o),
(259,801,o),
(334,801,qs),
(368,801,o),
(408,787,q),
(423,794,o),
(439,794,qs),
(487,794,o),
(539,647,o),
(539,532,qs),
(539,407,o),
(480,147,o),
(367,-29,o),
(291,-34,q)
);
},
{
closed = 1;
nodes = (
(212,225,o),
(297,70,o),
(350,44,q),
(382,115,o),
(430,337,o),
(430,437,qs),
(430,564,o),
(338,715,o),
(233,708,q),
(181,607,o),
(181,453,qs),
(181,384,o),
(193,298,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
8 1 3 0 29 16 2 2 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 3 3 0 97 1 1 0 0 26 77 4 1 2 2 27 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 1 2 3 2 134 0 3 3 0 97 1 1 0 0 26 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
4 1 2 3 2 134 0 0 0 26 77 0 3 3 1 97 0 1 1 26 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 24 23 0 19 0 18 34 37 5 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(330,-20,o),
(328,-20,qs),
(295,-20,o),
(276,181,o),
(275,350,qs),
(273,485,o),
(268,507,q),
(256,485,o),
(239,427,qs),
(216,359,o),
(180,285,o),
(149,270,q),
(142,262,o),
(123,251,o),
(117,251,qs),
(111,251,o),
(111,257,qs),
(111,262,o),
(115,270,q),
(141,363,ls),
(176,490,o),
(226,659,o),
(252,728,q),
(299,795,o),
(327,795,qs),
(338,795,o),
(349,773,o),
(349,753,qs),
(349,721,o),
(336,676,q),
(355,606,o),
(372,464,o),
(380,347,qs),
(385,264,o),
(395,154,o),
(405,101,q),
(408,91,o),
(408,81,qs),
(408,51,o),
(363,-4,o),
(336,-18,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
33 10 2 1 0 1 76 0 1 0 2 0 1 2 128 0 0 0 26 77 0 2 2 27 2 78 27 40 46 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,-27,o),
(90,-27,qs),
(58,-27,o),
(58,-4,qs),
(58,18,o),
(105,85,o),
(148,137,qs),
(174,167,o),
(183,181,qs),
(228,241,o),
(287,328,o),
(309,370,q),
(321,405,o),
(335,438,qs),
(360,498,o),
(386,580,o),
(386,617,qs),
(386,670,o),
(355,700,q),
(326,700,o),
(268,641,o),
(230,559,o),
(230,527,q),
(223,520,o),
(223,511,qs),
(223,505,o),
(230,485,o),
(230,480,qs),
(230,456,o),
(191,418,o),
(167,418,q),
(139,431,o),
(139,465,qs),
(139,514,o),
(241,665,o),
(377,779,o),
(424,779,qs),
(476,779,o),
(482,700,q),
(482,609,o),
(415,434,o),
(320,286,o),
(243,183,qs),
(191,113,o),
(152,56,q),
(170,59,o),
(243,82,qs),
(344,113,o),
(491,150,o),
(531,150,qs),
(565,150,o),
(565,134,qs),
(565,110,o),
(497,56,q),
(492,56,o),
(473,49,o),
(470,49,qs),
(465,49,o),
(465,56,q),
(400,56,o),
(279,28,o),
(194,0,qs),
(137,-18,o),
(120,-23,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
40 35 2 3 4 6 1 5 0 2 76 24 1 4 18 1 0 2 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 4 2 3 2 4 3 128 0 3 1 2 3 1 126 0 1 0 2 1 0 126 0 0 5 2 0 5 126 0 2 2 26 77 0 5 5 27 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 4 2 133 0 4 3 4 133 0 3 1 3 133 0 1 0 1 133 0 0 5 0 133 0 5 5 27 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 4 2 133 0 4 3 4 133 0 3 1 3 133 0 1 0 1 133 0 0 5 0 133 0 5 5 118
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
61 60 26 21 43 40 19 6 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(227,8,o),
(212,8,qs),
(170,8,o),
(73,55,o),
(0,134,o),
(-9,178,q),
(-16,193,o),
(38,250,o),
(113,298,o),
(128,298,qs),
(134,298,o),
(134,293,qs),
(134,283,o),
(116,261,q),
(158,205,o),
(276,117,o),
(328,117,qs),
(360,117,o),
(386,136,q),
(440,185,o),
(492,272,o),
(492,308,qs),
(492,357,o),
(401,414,o),
(325,414,qs),
(280,414,o),
(240,406,q),
(216,397,o),
(206,397,qs),
(189,397,o),
(207,434,o),
(232,467,qs),
(257,503,o),
(261,511,q),
(311,570,ls),
(356,621,o),
(402,682,o),
(402,700,qs),
(402,720,o),
(370,720,qs),
(336,720,o),
(261,697,q),
(243,687,o),
(230,671,o),
(230,662,qs),
(230,657,o),
(238,633,o),
(238,624,qs),
(238,592,o),
(190,549,qs),
(180,540,o),
(172,540,qs),
(162,540,o),
(158,566,o),
(158,594,q),
(152,678,o),
(245,761,o),
(323,781,q),
(430,821,o),
(482,821,qs),
(530,821,o),
(530,787,qs),
(530,749,o),
(431,615,o),
(351,523,qs),
(323,490,l),
(383,499,o),
(428,499,qs),
(518,499,o),
(603,435,o),
(603,381,qs),
(603,316,o),
(495,156,o),
(326,29,o),
(240,11,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
19 1 2 3 8 1 5 0 62 60 2 6 7 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 3 1 2 1 3 2 128 0 2 0 1 2 0 126 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 6 8 5 6 8 126 0 1 1 26 77 0 5 5 0 97 0 0 0 29 77 0 8 8 30 8 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 1 3 1 133 0 3 2 3 133 0 2 0 2 133 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 6 8 5 6 8 126 0 5 5 0 97 0 0 0 29 77 0 8 8 30 8 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 1 3 1 133 0 3 2 3 133 0 2 0 2 133 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 6 8 5 6 8 126 0 0 0 5 4 0 5 105 0 8 8 30 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 1 3 1 133 0 3 2 3 133 0 2 0 2 133 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 6 8 5 6 8 126 0 8 8 132 0 0 5 5 0 89 0 0 0 5 97 0 5 0 5 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
38 22 38 34 41 43 22 38 37 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(288,-49,o),
(274,24,o),
(271,91,qs),
(270,117,o),
(266,165,o),
(262,176,q),
(202,160,o),
(162,160,qs),
(70,160,o),
(70,249,qs),
(70,306,o),
(112,423,q),
(112,454,o),
(179,698,o),
(193,734,q),
(278,814,o),
(291,798,q),
(291,774,o),
(277,732,o),
(262,700,q),
(262,681,o),
(245,622,o),
(224,560,qs),
(196,473,o),
(167,368,o),
(167,326,qs),
(167,242,o),
(238,242,q),
(262,244,l),
(262,324,o),
(311,440,o),
(376,440,q),
(377,439,o),
(385,431,o),
(398,423,o),
(406,423,q),
(406,408,o),
(391,384,o),
(369,366,o),
(360,359,q),
(360,257,l),
(388,263,o),
(439,284,o),
(478,303,qs),
(539,333,o),
(572,342,q),
(580,316,o),
(485,258,o),
(411,226,qs),
(379,212,o),
(376,210,q),
(376,194,o),
(380,152,qs),
(385,92,o),
(385,78,qs),
(385,28,o),
(352,-37,o),
(308,-49,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
45 28 21 17 16 11 6 1 0 51 6 2 2 1 2 76 40 37 2 0 74 0 0 1 0 133 0 3 2 3 134 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 57 56 50 48 30 29 26 24 4 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,-44,o),
(180,-44,qs),
(120,-44,o),
(33,4,o),
(33,53,q),
(27,60,o),
(68,99,o),
(125,134,o),
(139,134,qs),
(148,134,o),
(148,126,qs),
(148,119,o),
(143,109,q),
(158,86,o),
(242,57,o),
(289,57,qs),
(324,57,o),
(383,74,o),
(400,91,qs),
(430,121,o),
(465,218,o),
(465,266,qs),
(465,305,o),
(442,367,o),
(419,384,qs),
(388,404,o),
(357,404,qs),
(318,404,o),
(246,353,o),
(199,306,qs),
(184,292,o),
(154,263,o),
(143,255,qs),
(114,236,o),
(96,236,qs),
(66,236,o),
(66,289,qs),
(66,331,o),
(102,461,o),
(149,574,o),
(161,586,q),
(118,586,o),
(118,607,qs),
(118,624,o),
(170,669,o),
(198,677,q),
(210,677,o),
(236,673,qs),
(260,669,o),
(272,669,qs),
(292,669,o),
(308,677,q),
(325,703,o),
(399,745,o),
(482,769,o),
(511,769,q),
(522,761,o),
(522,749,qs),
(522,721,o),
(405,645,o),
(261,586,o),
(236,586,q),
(212,551,o),
(175,431,o),
(175,385,qs),
(175,360,o),
(180,347,q),
(263,427,o),
(398,502,o),
(448,502,qs),
(505,502,o),
(566,417,o),
(566,350,qs),
(566,274,o),
(490,110,o),
(340,-17,o),
(236,-38,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
9 1 6 7 63 1 8 9 71 1 10 8 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 2 3 2 133 4 1 3 1 3 133 5 1 1 0 1 133 0 7 0 6 0 7 6 128 0 6 9 0 6 9 126 0 8 9 10 9 8 10 128 0 9 0 10 9 10 101 0 0 0 29 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 2 3 2 133 4 1 3 1 3 133 5 1 1 0 1 133 0 0 7 0 133 0 7 6 7 133 0 6 9 6 133 0 8 9 10 9 8 10 128 0 9 8 10 9 89 0 9 9 10 97 0 10 9 10 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
0 2 4 2 133 0 4 3 4 133 0 3 1 3 133 5 1 1 0 1 133 0 0 7 0 133 0 7 6 7 133 0 6 9 6 133 0 8 9 10 9 8 10 128 0 9 8 10 9 89 0 9 9 10 97 0 10 9 10 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
75 73 68 66 41 38 37 20 18 36 21 23 37 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,-103,o),
(295,-103,qs),
(259,-103,o),
(189,-24,o),
(169,26,q),
(126,84,o),
(80,243,o),
(80,329,qs),
(80,463,o),
(185,700,o),
(284,764,q),
(294,767,o),
(314,775,qs),
(360,794,o),
(386,794,qs),
(411,794,o),
(432,780,qs),
(452,765,o),
(472,731,o),
(472,715,qs),
(472,692,o),
(434,656,o),
(399,649,q),
(394,644,o),
(387,653,o),
(382,667,qs),
(369,705,o),
(350,715,q),
(335,719,o),
(319,719,qs),
(246,719,o),
(182,545,o),
(182,419,qs),
(182,363,o),
(193,258,o),
(202,223,q),
(248,281,o),
(339,335,o),
(380,335,qs),
(416,335,o),
(472,297,o),
(504,234,o),
(504,198,qs),
(504,136,o),
(411,24,o),
(317,-6,q),
(328,-17,o),
(350,-30,qs),
(359,-35,o),
(371,-44,o),
(371,-49,qs),
(371,-58,o),
(350,-72,q)
);
},
{
closed = 1;
nodes = (
(287,90,o),
(335,69,o),
(360,69,qs),
(381,69,o),
(399,76,q),
(422,106,o),
(422,141,qs),
(422,171,o),
(390,225,o),
(335,258,o),
(303,258,qs),
(296,258,o),
(284,256,q),
(254,193,o),
(254,150,qs),
(254,122,o),
(268,108,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
16 1 5 4 6 1 2 3 5 2 76 0 1 2 0 2 1 0 128 0 0 4 2 0 4 126 0 4 5 2 4 5 126 0 5 3 2 5 3 126 0 3 3 132 0 2 2 26 2 78 38 38 43 45 39 44 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,-105,o),
(283,-82,qs),
(283,-51,o),
(306,68,qs),
(334,208,o),
(334,253,qs),
(334,270,o),
(332,275,q),
(323,275,o),
(263,265,qs),
(205,255,o),
(194,255,q),
(154,231,o),
(134,231,qs),
(107,231,o),
(134,298,o),
(226,358,o),
(287,358,qs),
(305,358,o),
(332,353,q),
(332,376,o),
(336,436,qs),
(340,498,o),
(340,532,qs),
(340,599,o),
(311,698,o),
(273,728,q),
(255,728,o),
(168,702,o),
(155,688,qs),
(124,653,o),
(78,619,o),
(66,619,qs),
(47,619,o),
(69,684,o),
(142,754,o),
(194,767,q),
(229,785,o),
(344,826,o),
(371,826,q),
(416,781,o),
(447,660,o),
(447,579,qs),
(446,513,ls),
(445,492,o),
(445,451,qs),
(445,404,o),
(450,373,q),
(588,373,l),
(590,365,o),
(590,360,qs),
(590,336,o),
(538,297,o),
(470,275,o),
(450,275,q),
(446,248,o),
(442,194,qs),
(435,113,o),
(413,12,o),
(352,-77,o),
(292,-100,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */
9 1 5 1 40 1 0 5 54 1 6 7 3 76 0 2 4 2 133 0 4 3 4 133 0 3 1 3 133 0 5 1 0 1 5 0 128 0 7 0 6 0 7 6 128 0 6 6 132 0 1 5 0 1 87 0 1 1 0 97 8 1 0 1 0 81 18 17 34 40 20 37 24 21 21 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,1,o),
(143,98,qs),
(143,151,o),
(194,286,o),
(223,335,q),
(157,436,o),
(157,524,qs),
(157,595,o),
(238,699,o),
(361,753,o),
(420,753,qs),
(473,753,o),
(540,710,o),
(540,669,q),
(538,652,l),
(570,675,o),
(583,675,qs),
(591,675,o),
(591,668,qs),
(591,659,o),
(563,630,o),
(538,617,q),
(463,541,o),
(374,446,o),
(327,388,q),
(390,274,o),
(390,188,qs),
(390,55,o),
(239,1,q)
);
},
{
closed = 1;
nodes = (
(257,575,o),
(274,525,o),
(290,491,qs),
(307,451,o),
(311,441,q),
(337,467,o),
(389,529,qs),
(435,583,o),
(459,608,qs),
(468,617,l),
(468,604,o),
(466,604,qs),
(463,604,o),
(459,608,qs),
(450,617,l),
(442,650,o),
(380,679,o),
(339,679,qs),
(302,679,o),
(276,670,q),
(264,658,o),
(257,621,o),
(257,599,qs)
);
},
{
closed = 1;
nodes = (
(292,89,l),
(297,107,o),
(297,130,qs),
(297,155,o),
(283,201,o),
(270,232,qs),
(265,243,o),
(257,265,q),
(245,227,o),
(245,195,qs),
(245,137,o),
(276,107,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
62 55 46 41 39 23 14 13 9 3 10 2 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 3 2 3 0 2 128 0 3 3 1 97 0 1 1 28 77 0 2 2 30 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 3 2 3 0 2 128 0 1 0 3 0 1 3 105 0 2 2 30 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
36 25 36 27 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(385,-33,o),
(375,4,o),
(375,46,qs),
(375,134,o),
(402,379,qs),
(415,507,o),
(415,527,q),
(351,460,o),
(233,396,o),
(184,396,qs),
(123,396,o),
(49,480,o),
(49,543,qs),
(49,609,o),
(137,744,o),
(225,794,qs),
(263,813,o),
(308,813,qs),
(356,813,o),
(447,773,o),
(515,703,o),
(529,660,q),
(510,622,o),
(510,279,q),
(505,247,o),
(503,197,qs),
(501,136,o),
(488,55,o),
(442,-13,o),
(396,-26,q)
);
},
{
closed = 1;
nodes = (
(218,487,o),
(262,487,qs),
(306,487,o),
(393,558,o),
(415,602,q),
(393,659,o),
(301,729,o),
(246,729,qs),
(216,729,o),
(186,717,q),
(172,703,o),
(158,651,o),
(158,621,qs),
(158,591,o),
(172,541,o),
(186,527,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
40 22 7 3 3 2 1 76 5 1 1 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 0 97 0 0 0 26 77 0 1 1 3 97 0 3 3 29 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 0 0 2 3 0 2 105 0 1 1 3 97 0 3 3 29 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
44 42 38 36 38 42 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = nine;
unicode = 57;
},
{
glyphname = zero.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,-19,o),
(126,128,o),
(70,337,o),
(70,434,qs),
(70,488,o),
(122,674,o),
(209,816,o),
(260,816,qs),
(300,816,o),
(338,769,qs),
(356,745,o),
(356,732,qs),
(356,723,o),
(346,723,qs),
(337,723,o),
(311,740,o),
(305,752,q),
(234,700,o),
(165,491,o),
(165,370,qs),
(165,283,o),
(198,129,o),
(255,35,o),
(289,35,qs),
(322,35,o),
(355,81,q),
(403,164,o),
(403,322,qs),
(403,384,o),
(391,503,o),
(380,594,qs),
(367,694,o),
(367,725,qs),
(367,765,o),
(382,765,qs),
(391,765,o),
(405,752,q),
(441,704,o),
(487,480,o),
(487,357,qs),
(487,214,o),
(422,6,o),
(355,-19,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 2 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 3 2 3 0 2 128 0 2 1 3 2 1 126 0 3 3 26 77 0 1 1 4 97 0 4 4 27 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 0 3 133 0 0 2 0 133 0 2 1 2 133 0 1 1 4 97 0 4 4 27 4 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
22 36 40 41 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = zero.ss01;
},
{
glyphname = one.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,-1,o),
(299,98,o),
(280,228,o),
(272,330,qs),
(268,391,o),
(260,465,o),
(253,490,q),
(244,451,ls),
(227,368,o),
(190,263,o),
(163,263,qs),
(139,263,o),
(111,313,q),
(110,316,o),
(103,331,o),
(103,334,q),
(104,335,l),
(106,335,o),
(111,330,q),
(144,429,o),
(191,616,o),
(228,779,qs),
(235,809,l),
(247,821,o),
(262,821,qs),
(284,821,o),
(324,777,o),
(324,756,q),
(335,721,o),
(359,458,o),
(359,419,qs),
(359,406,o),
(374,301,qs),
(388,205,o),
(404,81,o),
(404,40,qs),
(404,-1,o),
(394,-7,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
33 30 9 3 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 0 1 134 0 0 0 26 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 0 1 0 133 0 1 1 118
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
44 43 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = one.ss01;
},
{
glyphname = two.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,-23,o),
(57,2,o),
(17,42,o),
(17,64,qs),
(17,79,o),
(25,91,q),
(44,126,o),
(108,229,qs),
(174,336,o),
(253,483,o),
(309,651,o),
(309,733,qs),
(309,756,o),
(308,768,q),
(296,773,o),
(277,773,qs),
(243,773,o),
(195,727,o),
(195,693,q),
(190,688,o),
(181,688,qs),
(163,688,o),
(120,719,o),
(120,731,q),
(128,784,o),
(201,839,o),
(250,839,qs),
(284,839,o),
(347,812,o),
(365,788,q),
(400,719,o),
(400,634,qs),
(400,553,o),
(340,378,o),
(259,227,o),
(197,126,qs),
(176,91,l),
(188,94,o),
(236,112,qs),
(317,141,o),
(433,175,o),
(481,175,qs),
(579,175,o),
(588,91,q),
(543,67,o),
(491,51,o),
(433,39,qs),
(402,33,l),
(338,16,ls),
(266,-3,o),
(176,-23,o),
(139,-23,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
32 27 2 2 3 14 1 4 0 2 76 0 2 3 0 3 2 0 128 0 0 4 3 0 4 126 0 1 0 3 2 1 3 105 5 1 4 4 27 4 78 0 0 0 51 0 50 35 36 45 40 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = two.ss01;
},
{
glyphname = three.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,-19,o),
(227,-19,qs),
(142,-19,o),
(-13,46,o),
(-49,105,q),
(-49,118,o),
(-29,124,o),
(-9,124,q),
(115,50,o),
(228,50,qs),
(312,50,o),
(440,127,o),
(509,244,o),
(509,301,qs),
(509,324,o),
(503,343,q),
(457,397,o),
(408,397,qs),
(384,397,o),
(329,375,o),
(285,351,qs),
(239,328,l),
(229,328,o),
(189,340,o),
(157,361,o),
(157,374,qs),
(157,384,o),
(167,394,q),
(236,423,o),
(335,504,o),
(386,589,o),
(386,626,qs),
(386,660,o),
(363,685,q),
(339,694,o),
(314,694,qs),
(275,694,o),
(222,654,o),
(222,620,qs),
(222,609,o),
(225,597,q),
(221,593,o),
(214,593,qs),
(202,593,o),
(170,617,o),
(145,649,o),
(145,657,q),
(142,668,o),
(142,677,qs),
(142,714,o),
(206,751,o),
(263,769,qs),
(283,775,l),
(313,780,o),
(334,780,qs),
(406,780,o),
(480,697,o),
(480,633,qs),
(480,593,o),
(450,510,o),
(423,478,q),
(518,455,o),
(608,361,o),
(608,300,qs),
(608,235,o),
(517,98,o),
(369,-2,o),
(289,-14,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
26 1 1 2 6 1 4 1 62 1 5 6 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 3 6 2 3 6 126 0 6 5 2 6 5 126 0 2 2 0 97 0 0 0 26 77 0 5 5 7 97 0 7 7 27 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 3 6 2 3 6 126 0 6 5 2 6 5 126 0 0 0 2 1 0 2 105 0 5 5 7 97 0 7 7 27 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 17 38 35 28 38 26 43 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = three.ss01;
},
{
glyphname = four.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(385,-63,o),
(371,-63,qs),
(344,-63,o),
(297,-24,o),
(297,0,q),
(277,20,o),
(277,176,q),
(261,172,o),
(225,158,qs),
(187,145,o),
(143,132,o),
(122,132,qs),
(64,132,o),
(43,195,q),
(69,312,o),
(139,540,o),
(199,722,q),
(199,751,o),
(224,848,o),
(238,878,q),
(241,881,o),
(249,881,qs),
(263,881,o),
(307,862,o),
(340,838,o),
(340,829,qs),
(340,820,o),
(316,820,q),
(286,718,o),
(240,533,qs),
(188,329,o),
(160,234,q),
(175,242,o),
(212,252,o),
(231,256,qs),
(265,263,o),
(297,273,q),
(295,303,ls),
(291,351,o),
(291,393,qs),
(291,498,o),
(327,498,qs),
(346,498,o),
(375,469,q),
(375,462,o),
(383,439,o),
(383,436,qs),
(383,430,o),
(375,430,q),
(375,273,l),
(401,286,o),
(431,286,qs),
(479,286,o),
(511,254,q),
(511,247,o),
(520,224,o),
(520,221,qs),
(520,215,o),
(511,215,q),
(485,202,o),
(419,195,o),
(375,195,q),
(375,155,o),
(385,69,qs),
(388,36,o),
(394,-33,o),
(394,-58,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
49 1 3 4 28 19 17 3 2 3 34 29 16 3 1 2 59 1 6 0 66 61 2 7 6 5 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 5 4 5 133 0 4 3 4 133 0 1 2 0 2 1 0 128 0 6 0 7 0 6 7 128 0 7 7 132 0 2 0 0 6 2 0 105 0 3 3 29 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 5 4 5 133 0 4 3 4 133 0 3 2 3 133 0 1 2 0 2 1 0 128 0 6 0 7 0 6 7 128 0 7 7 132 0 2 1 0 2 89 0 2 2 0 97 0 0 2 0 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
40 41 20 29 40 37 18 20 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = four.ss01;
},
{
glyphname = five.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(185,681,o),
(173,681,qs),
(154,681,o),
(106,715,o),
(106,728,qs),
(106,734,o),
(112,737,q),
(235,737,o),
(421,767,q),
(431,767,o),
(476,730,o),
(476,718,qs),
(476,706,o),
(452,706,qs),
(447,706,o),
(427,699,o),
(421,699,qs),
(413,699,o),
(406,706,q),
(354,695,o),
(255,690,o),
(189,690,q)
);
},
{
closed = 1;
nodes = (
(335,33,o),
(311,33,qs),
(264,33,o),
(160,68,o),
(90,129,o),
(90,165,qs),
(90,180,o),
(96,195,q),
(104,199,o),
(113,199,qs),
(131,199,o),
(158,168,o),
(158,149,qs),
(158,118,l),
(191,103,o),
(226,103,qs),
(276,103,o),
(361,166,o),
(415,266,o),
(421,319,q),
(425,334,o),
(425,354,qs),
(425,394,o),
(388,476,o),
(359,505,q),
(329,500,o),
(287,465,o),
(260,421,o),
(241,384,qs),
(219,338,o),
(205,319,q),
(205,307,o),
(195,307,qs),
(186,307,o),
(174,319,q),
(138,331,o),
(113,385,o),
(113,426,qs),
(114,460,ls),
(115,471,o),
(115,493,qs),
(115,522,o),
(112,535,q),
(112,586,o),
(107,660,o),
(96,690,q),
(99,691,o),
(106,691,qs),
(140,691,o),
(170,602,o),
(180,527,qs),
(185,490,o),
(189,474,q),
(211,517,o),
(270,558,o),
(302,558,qs),
(351,558,o),
(448,473,o),
(509,339,o),
(509,269,qs),
(509,197,o),
(437,77,o),
(359,40,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
38 1 5 7 59 53 45 41 31 5 8 6 70 1 9 10 3 76 2 1 2 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
0 2 4 0 4 2 0 128 0 7 0 5 0 7 5 128 0 5 6 0 5 112 0 6 8 0 6 8 126 0 8 10 0 8 10 126 0 10 9 0 10 9 126 0 3 4 0 3 89 0 9 0 11 9 11 102 1 12 2 0 0 4 97 0 4 4 28 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 70 values pushed */
0 2 4 1 4 2 1 128 0 7 0 5 0 7 5 128 0 5 6 0 5 112 0 6 8 0 6 8 126 0 8 10 0 8 10 126 0 10 9 0 10 9 126 0 3 0 1 0 3 1 105 0 9 0 11 9 11 102 12 1 0 0 4 97 0 4 4 28 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
1 0 83 81 75 73 69 67 52 50 36 35 29 27 20 18 14 13 12 11 8 6 5 3 0 21 1 21 13 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = five.ss01;
},
{
glyphname = six.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,7,o),
(130,115,o),
(56,290,o),
(56,389,qs),
(56,486,o),
(127,658,o),
(266,768,o),
(365,772,q),
(383,768,o),
(415,739,o),
(435,704,o),
(435,693,qs),
(435,683,o),
(426,683,qs),
(411,683,o),
(381,709,q),
(302,691,o),
(195,578,o),
(142,419,o),
(142,330,qs),
(142,263,o),
(157,198,q),
(175,297,o),
(267,390,o),
(328,390,qs),
(378,390,o),
(473,334,o),
(533,242,o),
(533,192,qs),
(533,139,o),
(460,43,o),
(381,7,q)
);
},
{
closed = 1;
nodes = (
(310,65,o),
(393,118,o),
(447,204,o),
(447,244,qs),
(447,286,o),
(413,309,q),
(398,313,o),
(381,313,qs),
(343,313,o),
(278,267,o),
(241,193,o),
(241,154,qs),
(241,105,o),
(270,70,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
15 1 1 2 9 1 3 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 1 2 133 0 1 0 1 133 0 0 0 4 3 0 4 106 0 3 3 30 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 2 1 2 133 0 1 0 1 133 0 3 4 3 134 0 0 4 4 0 89 0 0 0 4 98 0 4 0 4 82
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
37 22 21 41 37 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = six.ss01;
},
{
glyphname = seven.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(257,-51,o),
(257,58,qs),
(257,94,o),
(271,174,o),
(284,236,qs),
(301,313,o),
(301,335,q),
(289,338,o),
(276,338,qs),
(252,338,o),
(219,331,qs),
(181,325,o),
(165,325,qs),
(113,325,o),
(95,370,q),
(125,385,o),
(194,400,o),
(242,407,qs),
(294,415,o),
(319,421,q),
(381,610,o),
(404,747,q),
(164,747,l),
(169,737,o),
(169,729,qs),
(169,721,o),
(161,721,qs),
(152,721,o),
(123,740,o),
(101,767,o),
(101,779,qs),
(101,790,o),
(113,799,q),
(233,799,l),
(322,814,o),
(376,814,qs),
(443,814,o),
(497,772,o),
(497,728,qs),
(497,704,o),
(485,646,o),
(473,598,qs),
(464,561,o),
(444,476,o),
(439,438,q),
(473,438,o),
(519,432,o),
(542,421,q),
(551,412,o),
(566,385,o),
(566,377,qs),
(566,370,o),
(559,370,q),
(525,358,o),
(456,352,o),
(404,352,q),
(379,164,l),
(353,-25,l),
(353,-34,o),
(336,-52,o),
(336,-60,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
35 1 4 5 9 1 0 1 53 1 6 7 3 76 2 1 6 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 4 5 1 5 4 1 128 0 7 0 6 0 7 6 128 0 6 6 132 0 1 0 0 7 1 0 105 0 3 3 26 77 0 5 5 2 97 0 2 2 26 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 4 5 1 5 4 1 128 0 7 0 6 0 7 6 128 0 6 6 132 0 2 0 5 4 2 5 103 0 1 0 0 7 1 0 105 0 3 3 26 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
34 40 20 21 17 40 25 20 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = seven.ss01;
},
{
glyphname = eight.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(300,5,o),
(288,5,qs),
(235,5,o),
(147,84,o),
(96,203,o),
(96,258,qs),
(96,269,o),
(98,287,q),
(114,347,o),
(148,433,o),
(174,474,q),
(159,489,o),
(140,504,qs),
(88,548,o),
(25,622,o),
(25,661,qs),
(25,693,o),
(78,742,o),
(130,774,qs),
(156,791,l),
(184,791,o),
(255,769,o),
(306,734,o),
(306,717,qs),
(306,709,o),
(297,709,qs),
(288,709,o),
(259,725,o),
(249,735,q),
(208,735,o),
(134,667,o),
(118,622,q),
(109,613,o),
(109,604,qs),
(109,592,o),
(130,570,o),
(153,551,qs),
(186,524,o),
(193,511,q),
(204,525,o),
(228,562,qs),
(296,665,o),
(414,800,o),
(465,800,qs),
(503,800,o),
(529,753,q),
(491,698,o),
(431,622,qs),
(383,562,o),
(316,469,o),
(285,417,q),
(331,372,o),
(398,225,o),
(398,157,qs),
(398,106,o),
(354,27,o),
(306,6,q)
);
},
{
closed = 1;
nodes = (
(186,197,o),
(186,182,qs),
(186,144,o),
(230,100,q),
(260,122,o),
(290,194,o),
(290,237,qs),
(290,273,o),
(269,348,o),
(249,380,q),
(243,362,o),
(227,326,qs),
(210,288,o),
(193,237,o),
(193,211,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
10 1 1 0 71 67 61 45 17 5 6 4 2 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
10 1 1 3 71 67 61 45 17 5 6 4 2 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 2 0 1 2 128 0 2 4 0 2 4 126 3 1 0 0 26 77 0 4 4 30 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 1 3 2 3 1 2 128 0 2 4 3 2 4 126 0 0 0 26 77 0 3 3 26 77 0 4 4 30 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 3 0 1 0 3 1 128 0 1 2 0 1 2 126 0 2 4 0 2 4 126 0 0 0 26 77 0 4 4 30 4 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
55 53 20 34 29 43 5 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eight.ss01;
},
{
glyphname = nine.ss01;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,-43,o),
(355,43,o),
(355,116,qs),
(355,162,o),
(365,242,qs),
(367,267,o),
(372,316,o),
(372,331,q),
(323,308,o),
(277,308,qs),
(219,308,o),
(132,380,o),
(85,495,o),
(85,558,qs),
(85,620,o),
(131,724,o),
(227,785,o),
(297,781,qs),
(342,781,o),
(421,749,o),
(470,704,o),
(470,687,qs),
(470,671,o),
(447,668,q),
(414,702,o),
(342,736,o),
(306,736,qs),
(265,736,o),
(197,693,o),
(157,614,o),
(157,561,qs),
(157,481,o),
(204,388,q),
(217,368,o),
(239,368,qs),
(261,368,o),
(313,410,o),
(359,487,o),
(372,538,qs),
(382,569,o),
(382,594,qs),
(382,607,o),
(376,632,o),
(376,634,qs),
(376,639,o),
(382,646,o),
(391,650,qs),
(397,652,o),
(409,652,qs),
(440,652,o),
(472,596,o),
(472,555,qs),
(472,525,o),
(465,500,q),
(465,447,o),
(473,321,qs),
(482,204,o),
(482,127,qs),
(482,22,o),
(465,-43,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
5 1 1 0 51 3 2 4 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 4 5 1 4 105 0 0 0 5 0 5 101 0 2 2 3 97 0 3 3 26 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 0 2 0 3 2 105 0 0 1 5 0 89 0 1 0 4 5 1 4 105 0 0 0 5 97 0 5 0 5 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
24 38 39 38 44 41 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = nine.ss01;
},
{
glyphname = zero.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(376,-14,o),
(353,-14,qs),
(253,-14,o),
(115,114,o),
(47,317,o),
(47,430,qs),
(47,528,o),
(96,697,o),
(190,800,o),
(254,800,qs),
(295,800,o),
(340,777,q),
(389,782,o),
(473,635,o),
(522,403,o),
(522,288,qs),
(522,169,o),
(466,5,o),
(408,-9,q)
);
},
{
closed = 1;
nodes = (
(357,71,o),
(430,197,o),
(430,306,qs),
(430,403,o),
(384,629,o),
(357,710,q),
(337,710,o),
(306,743,q),
(254,726,o),
(179,616,o),
(141,463,o),
(141,381,qs),
(141,270,o),
(209,100,o),
(272,77,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
25 6 2 2 0 1 76 0 2 0 3 0 2 3 128 0 0 0 26 77 0 3 3 1 97 0 1 1 27 1 78 21 25 38 39 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = zero.ss02;
},
{
glyphname = one.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(411,25,o),
(402,25,qs),
(378,25,o),
(336,61,o),
(336,82,q),
(323,131,o),
(283,477,o),
(283,521,q),
(261,471,ls),
(225,380,o),
(157,265,o),
(117,265,qs),
(85,265,o),
(55,310,q),
(60,315,o),
(67,325,o),
(70,329,qs),
(75,338,o),
(83,345,o),
(90,345,q),
(124,392,o),
(168,498,o),
(196,584,qs),
(217,647,o),
(246,727,o),
(266,766,q),
(315,772,o),
(364,696,o),
(379,587,o),
(382,505,qs),
(384,438,o),
(388,416,q),
(388,375,o),
(397,288,o),
(406,222,qs),
(412,173,o),
(423,70,o),
(423,30,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
37 32 2 1 0 1 76 29 23 5 3 0 74 0 0 1 0 133 0 1 1 118 36 34 26 24 2 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = one.ss02;
},
{
glyphname = two.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,39,o),
(183,13,o),
(124,13,qs),
(16,13,o),
(16,68,qs),
(16,79,o),
(18,85,q),
(121,169,o),
(280,329,o),
(396,525,o),
(396,626,qs),
(396,683,o),
(376,736,q),
(327,723,o),
(217,658,o),
(180,621,qs),
(172,613,o),
(172,602,qs),
(172,587,o),
(186,561,qs),
(196,541,o),
(196,535,qs),
(196,525,o),
(180,525,q),
(171,533,o),
(157,540,qs),
(139,549,o),
(131,557,q),
(108,605,o),
(108,644,qs),
(108,667,o),
(115,687,q),
(151,723,o),
(276,792,o),
(323,792,qs),
(343,792,o),
(359,784,q),
(487,706,o),
(487,568,qs),
(487,482,o),
(393,293,o),
(251,132,o),
(180,85,q),
(220,96,o),
(287,121,qs),
(348,145,o),
(434,169,o),
(473,169,qs),
(490,169,o),
(506,166,q),
(520,166,o),
(562,145,o),
(594,115,o),
(594,101,qs),
(594,92,o),
(587,85,q),
(541,85,o),
(496,79,o),
(465,71,qs),
(423,60,o),
(376,53,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
47 38 2 4 3 55 1 5 0 2 76 17 1 0 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 3 1 3 4 1 128 2 1 1 0 3 1 0 126 0 0 5 3 0 5 126 0 3 3 26 77 0 5 5 30 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 4 3 1 3 4 1 128 2 1 1 0 3 1 0 126 0 0 5 3 0 5 126 0 5 5 132 0 3 3 26 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
58 56 26 43 33 21 19 6 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = two.ss02;
},
{
glyphname = three.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(382,-14,o),
(332,-14,qs),
(263,-14,o),
(86,93,o),
(-48,226,o),
(-48,252,qs),
(-48,262,o),
(-37,262,qs),
(-27,262,o),
(-10,255,q),
(18,236,o),
(62,197,qs),
(119,147,o),
(200,95,o),
(241,95,qs),
(287,95,o),
(328,136,q),
(416,186,o),
(555,341,o),
(555,424,qs),
(555,467,o),
(532,509,q),
(497,533,o),
(459,533,qs),
(433,533,o),
(382,516,o),
(347,500,qs),
(317,487,o),
(282,475,o),
(266,475,qs),
(243,475,o),
(226,492,q),
(226,500,o),
(216,512,qs),
(205,525,o),
(205,532,qs),
(205,537,o),
(210,542,q),
(235,558,ls),
(284,590,o),
(343,640,o),
(362,677,qs),
(371,695,o),
(371,709,qs),
(371,730,o),
(336,750,o),
(309,750,qs),
(273,750,o),
(204,719,o),
(193,695,q),
(188,690,o),
(188,681,qs),
(188,673,o),
(196,648,o),
(201,637,qs),
(210,617,o),
(210,610,q),
(205,599,o),
(193,599,qs),
(178,599,o),
(142,634,o),
(142,644,q),
(122,684,o),
(122,717,qs),
(122,764,o),
(198,813,o),
(256,813,qs),
(305,813,o),
(399,779,o),
(460,717,o),
(460,676,qs),
(460,635,o),
(429,593,q),
(534,572,o),
(634,453,o),
(634,371,qs),
(634,306,o),
(575,167,o),
(474,50,o),
(413,17,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
22 17 2 1 2 6 1 4 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 3 6 2 3 6 126 0 6 5 2 6 5 126 0 2 2 0 97 0 0 0 26 77 0 5 5 7 97 0 7 7 27 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 3 6 2 3 6 126 0 6 5 2 6 5 126 0 0 0 2 1 0 2 105 0 5 5 7 97 0 7 7 27 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 37 39 36 47 42 38 43 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = three.ss02;
},
{
glyphname = four.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(421,-17,o),
(414,-23,o),
(407,-25,o),
(406,-25,qs),
(354,-25,o),
(319,57,o),
(319,123,qs),
(320,176,l),
(224,147,o),
(167,147,qs),
(73,147,o),
(73,223,qs),
(73,266,o),
(122,382,o),
(170,475,qs),
(192,519,l),
(256,655,ls),
(306,763,o),
(320,791,q),
(325,795,o),
(335,795,qs),
(350,795,o),
(386,771,o),
(411,740,o),
(411,731,qs),
(411,725,o),
(404,725,qs),
(396,725,o),
(378,734,q),
(356,675,o),
(268,471,qs),
(184,275,o),
(163,219,q),
(184,219,o),
(231,234,o),
(272,249,qs),
(306,262,l),
(306,344,o),
(301,447,o),
(292,505,q),
(298,511,o),
(307,511,qs),
(318,511,o),
(341,499,o),
(349,491,q),
(349,485,o),
(361,463,qs),
(373,439,o),
(373,434,qs),
(373,427,o),
(363,433,q),
(373,395,o),
(378,330,o),
(378,276,q),
(382,276,o),
(399,281,o),
(407,283,q),
(425,290,o),
(435,290,qs),
(445,290,o),
(479,278,o),
(506,252,o),
(506,233,q),
(501,221,o),
(466,210,o),
(433,203,qs),
(419,200,o),
(396,194,o),
(392,190,q),
(392,100,o),
(421,-10,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
30 19 2 0 1 33 7 2 2 0 62 1 2 5 2 3 76 0 3 4 1 4 3 1 128 0 1 0 4 1 0 126 0 0 2 4 0 2 126 0 2 0 5 6 2 5 105 0 4 4 26 77 0 6 6 27 6 78 20 41 36 37 23 47 42 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = four.ss02;
},
{
glyphname = five.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(312,3,ls),
(204,3,o),
(51,36,o),
(43,85,q),
(96,92,o),
(197,92,qs),
(284,92,o),
(378,108,o),
(438,176,o),
(438,250,qs),
(438,308,o),
(415,408,q),
(390,476,o),
(348,534,o),
(329,534,qs),
(314,534,o),
(285,505,o),
(263,475,qs),
(237,439,o),
(200,403,o),
(177,403,qs),
(168,403,o),
(156,408,qs),
(122,423,o),
(94,480,o),
(94,521,qs),
(94,549,o),
(102,605,qs),
(104,626,o),
(109,669,o),
(109,685,qs),
(109,706,o),
(107,715,q),
(100,722,o),
(89,742,o),
(89,750,qs),
(89,763,o),
(107,763,qs),
(217,763,o),
(382,796,q),
(408,796,o),
(463,754,o),
(463,731,qs),
(463,722,o),
(441,708,o),
(426,708,qs),
(412,708,o),
(398,715,q),
(189,715,l),
(189,683,l),
(187,659,ls),
(181,615,o),
(181,579,qs),
(181,545,o),
(189,537,q),
(235,600,o),
(291,600,qs),
(350,600,o),
(467,469,o),
(542,274,o),
(542,187,qs),
(542,107,o),
(472,8,o),
(398,4,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
27 1 1 4 13 1 0 1 8 1 6 0 59 1 8 7 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
27 1 1 4 13 1 0 2 8 1 6 0 59 1 8 7 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 5 6 7 6 5 7 128 0 4 2 1 1 0 4 1 106 0 0 0 6 5 0 6 105 0 3 3 26 77 0 7 7 8 95 9 1 8 8 30 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 0 1 2 0 128 0 5 6 7 6 5 7 128 0 4 0 1 2 4 1 104 0 0 0 6 5 0 6 105 0 3 3 26 77 0 7 7 8 95 9 1 8 8 30 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 63 0 61 39 36 47 33 20 33 23 37 10 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = five.ss02;
},
{
glyphname = six.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(385,-5,o),
(311,-5,qs),
(259,-5,o),
(158,37,o),
(82,110,o),
(65,155,q),
(52,214,o),
(52,276,qs),
(52,390,o),
(124,623,o),
(265,787,o),
(363,800,q),
(385,796,o),
(424,767,o),
(447,733,o),
(447,722,qs),
(447,714,o),
(439,714,qs),
(421,714,o),
(379,751,q),
(276,705,o),
(162,463,o),
(147,320,q),
(191,390,o),
(297,457,o),
(353,457,qs),
(408,457,o),
(504,398,o),
(562,298,o),
(562,242,qs),
(562,188,o),
(505,83,o),
(445,39,qs)
);
},
{
closed = 1;
nodes = (
(227,60,o),
(257,60,qs),
(312,60,o),
(412,128,o),
(474,236,o),
(474,292,qs),
(474,344,o),
(445,387,q),
(421,394,o),
(403,394,qs),
(349,394,o),
(246,316,o),
(182,197,o),
(182,140,qs),
(182,104,o),
(197,72,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
9 1 4 3 1 76 20 16 12 3 1 74 0 1 0 1 133 0 0 0 3 4 0 3 105 0 4 4 2 97 0 2 2 30 2 78 38 38 47 22 37 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = six.ss02;
},
{
glyphname = seven.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,-113,o),
(248,-113,qs),
(229,-113,o),
(197,-76,o),
(197,-51,qs),
(197,-43,o),
(200,-32,q),
(215,90,o),
(247,254,o),
(278,328,q),
(254,328,o),
(180,308,o),
(169,297,q),
(156,290,o),
(145,290,qs),
(134,290,o),
(117,301,o),
(106,312,qs),
(99,320,o),
(99,330,qs),
(99,355,o),
(181,390,o),
(249,408,qs),
(264,412,o),
(290,419,o),
(294,422,q),
(343,535,o),
(409,678,o),
(450,751,q),
(435,751,o),
(375,741,o),
(343,734,qs),
(220,709,o),
(166,709,qs),
(90,709,o),
(90,751,q),
(228,782,ls),
(332,806,o),
(435,829,q),
(473,829,o),
(533,799,o),
(544,766,q),
(538,729,o),
(505,652,o),
(475,593,qs),
(435,516,o),
(419,469,q),
(441,469,o),
(481,435,o),
(481,422,q),
(483,414,o),
(483,410,qs),
(483,394,o),
(452,378,o),
(423,371,qs),
(413,368,o),
(394,362,o),
(388,359,q),
(370,298,o),
(342,172,qs),
(322,75,o),
(287,-52,o),
(262,-110,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
20 1 3 1 12 10 2 5 0 2 76 26 1 3 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 3 0 3 2 0 128 0 5 0 4 0 5 4 128 0 4 6 0 4 6 126 0 6 6 132 0 1 0 3 2 1 3 105 0 0 0 29 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 3 0 3 2 0 128 0 0 5 3 0 5 126 0 5 4 3 5 4 126 0 4 6 3 4 6 126 0 6 6 132 0 1 3 3 1 89 0 1 1 3 97 0 3 1 3 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
23 19 45 19 36 23 30 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = seven.ss02;
},
{
glyphname = eight.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(399,25,o),
(346,25,qs),
(299,25,o),
(206,74,o),
(142,156,o),
(136,201,qs),
(133,216,o),
(133,230,qs),
(133,266,o),
(165,342,o),
(206,401,o),
(243,451,q),
(141,494,o),
(47,588,o),
(47,633,qs),
(47,669,o),
(104,730,o),
(198,765,o),
(250,765,qs),
(305,765,o),
(404,724,o),
(439,682,q),
(446,689,o),
(451,701,qs),
(457,713,o),
(466,723,o),
(475,723,qs),
(481,723,o),
(493,718,qs),
(536,700,o),
(536,658,qs),
(536,610,o),
(444,491,o),
(386,433,q),
(442,393,o),
(510,265,o),
(510,202,qs),
(510,158,o),
(475,83,o),
(439,58,q)
);
},
{
closed = 1;
nodes = (
(207,522,o),
(231,512,o),
(254,500,q),
(258,497,o),
(278,486,q),
(300,518,o),
(341,567,qs),
(382,615,o),
(403,647,q),
(394,656,o),
(386,672,qs),
(379,689,o),
(367,701,q),
(314,701,o),
(231,690,o),
(152,642,o),
(136,593,q),
(132,586,o),
(132,579,qs),
(132,566,o),
(151,547,o),
(169,536,qs),
(185,526,o),
(189,522,q)
);
},
{
closed = 1;
nodes = (
(284,111,o),
(360,164,o),
(406,248,o),
(406,291,qs),
(406,322,o),
(378,377,o),
(350,397,q),
(289,336,o),
(212,233,o),
(212,183,qs),
(212,142,o),
(243,111,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
54 44 17 3 4 3 68 58 27 5 4 5 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 1 0 1 133 0 3 0 4 0 3 4 128 0 4 5 0 4 5 126 0 5 2 0 5 2 126 0 2 2 132 0 0 0 28 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 1 133 0 0 3 0 133 0 3 4 3 133 0 4 5 4 133 0 5 2 5 133 0 2 2 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
27 28 27 47 38 43 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eight.ss02;
},
{
glyphname = nine.ss02;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(455,-21,o),
(444,-21,qs),
(420,-21,o),
(380,7,o),
(353,34,q),
(349,48,o),
(375,368,qs),
(380,432,l),
(325,393,o),
(262,393,qs),
(213,393,o),
(129,439,o),
(79,520,o),
(79,570,qs),
(79,626,o),
(112,683,qs),
(138,726,o),
(244,781,o),
(300,781,qs),
(359,781,o),
(397,750,q),
(394,814,o),
(419,814,qs),
(432,814,o),
(466,782,o),
(490,739,o),
(490,727,qs),
(490,717,o),
(481,717,q),
(482,498,ls),
(482,126,o),
(470,-16,q)
);
},
{
closed = 1;
nodes = (
(207,456,o),
(270,456,qs),
(300,456,o),
(355,478,o),
(391,507,o),
(393,518,q),
(397,717,l),
(380,733,l),
(364,735,o),
(355,735,qs),
(304,735,o),
(207,688,o),
(146,610,o),
(146,567,qs),
(146,538,o),
(163,507,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
10 1 5 2 41 1 6 0 23 1 3 6 3 76 40 1 0 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 0 5 6 5 0 6 128 0 6 0 3 4 6 3 105 0 1 1 26 77 0 5 5 2 97 0 2 2 26 77 0 4 4 27 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 5 6 5 0 6 128 0 2 0 5 0 2 5 105 0 6 0 3 4 6 3 105 0 1 1 26 77 0 4 4 27 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 1 2 1 133 0 0 5 6 5 0 6 128 0 2 0 5 0 2 5 105 0 6 0 3 4 6 3 105 0 4 4 27 4 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
38 38 38 39 34 36 18 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = nine.ss02;
},
{
glyphname = DEL;
layers = (
{
layerId = m01;
width = 600;
}
);
note = DEL;
unicode = 127;
},
{
glyphname = period;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,77,o),
(315,115,o),
(286,115,qs),
(279,115,o),
(275,114,qs),
(257,110,o),
(228,60,o),
(228,35,qs),
(228,8,o),
(245,-3,qs),
(268,-18,o),
(290,-18,qs),
(318,-18,o),
(361,21,o),
(361,47,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 97 0 0 0 27 0 78 24 33 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,99,o),
(342,109,o),
(322,117,o),
(313,117,qs),
(302,117,o),
(294,112,qs),
(276,102,o),
(235,5,o),
(206,-105,o),
(206,-128,qs),
(206,-144,o),
(212,-150,q),
(229,-150,o),
(281,-148,o),
(282,-143,qs),
(286,-132,o),
(291,-109,o),
(294,-98,qs),
(298,-83,o),
(313,-45,o),
(320,-28,qs),
(337,21,o),
(370,95,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
22 1 0 1 1 76 0 1 0 1 133 0 0 0 118 39 25 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = comma;
unicode = 44;
},
{
glyphname = colon;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(259,327,o),
(243,327,qs),
(228,327,o),
(211,340,o),
(192,359,q),
(185,362,o),
(185,370,qs),
(185,386,o),
(234,441,o),
(299,483,o),
(321,483,qs),
(338,483,o),
(344,467,q),
(344,429,o),
(338,392,o),
(311,359,o),
(279,337,q)
);
},
{
closed = 1;
nodes = (
(233,111,o),
(233,132,qs),
(233,150,o),
(260,187,o),
(300,212,o),
(319,212,qs),
(328,212,o),
(338,207,q),
(357,202,o),
(377,177,o),
(377,160,qs),
(377,131,o),
(332,83,o),
(300,83,qs),
(275,83,o),
(252,98,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
9 3 2 1 0 1 76 0 1 0 3 0 1 3 128 0 3 0 2 3 2 102 0 0 0 29 0 78 38 34 39 36 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(227,178,o),
(218,178,qs),
(207,178,o),
(196,190,o),
(196,199,qs),
(196,216,o),
(225,261,o),
(270,291,o),
(294,289,qs),
(314,289,o),
(314,275,qs),
(314,261,o),
(281,216,o),
(241,180,o),
(233,180,q)
);
},
{
closed = 1;
nodes = (
(174,-220,o),
(164,-220,qs),
(140,-220,o),
(190,-106,o),
(241,-9,qs),
(274,50,o),
(274,57,q),
(288,65,o),
(313,86,qs),
(338,107,o),
(374,130,o),
(391,130,qs),
(405,130,o),
(416,119,q),
(416,110,o),
(398,91,o),
(381,78,qs),
(363,64,o),
(356,57,q),
(340,36,o),
(316,-14,o),
(303,-49,qs),
(279,-109,o),
(234,-182,o),
(193,-207,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
25 1 3 2 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 2 133 0 3 3 118 40 45 38 20 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = exclam;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(299,140,o),
(285,133,qs),
(261,121,o),
(249,121,qs),
(234,121,o),
(234,140,q),
(235,129,o),
(238,129,qs),
(242,129,o),
(242,184,qs),
(242,274,o),
(226,643,o),
(220,719,q),
(220,741,o),
(269,790,o),
(290,790,q),
(290,786,o),
(298,770,qs),
(308,752,o),
(308,743,qs),
(308,739,o),
(305,734,q),
(305,708,o),
(316,596,qs),
(336,387,o),
(336,291,qs),
(336,159,o),
(305,140,q)
);
},
{
closed = 1;
nodes = (
(268,-17,ls),
(262,-17,o),
(262,-13,qs),
(262,-6,o),
(288,21,o),
(323,42,o),
(334,42,qs),
(347,42,o),
(347,26,q),
(339,18,o),
(315,-2,o),
(289,-16,o),
(276,-16,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
31 1 2 1 1 76 21 14 7 5 4 0 74 0 0 1 0 133 0 1 2 1 133 3 1 2 2 27 2 78 28 28 28 40 28 40 34 32 24 22 4 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = exclamdown;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,620,l),
(322,520,o),
(342,371,qs),
(364,206,o),
(371,112,q),
(374,102,o),
(374,91,qs),
(374,66,o),
(341,18,o),
(314,0,q),
(308,0,o),
(302,12,o),
(300,26,o),
(300,28,q),
(290,28,o),
(290,43,qs),
(290,49,o),
(295,57,o),
(300,57,q),
(293,111,ls),
(280,218,o),
(260,354,o),
(244,409,q),
(244,425,o),
(240,459,qs),
(235,491,o),
(235,516,qs),
(235,552,o),
(263,604,o),
(300,620,q)
);
},
{
closed = 1;
nodes = (
(245,741,o),
(288,765,o),
(300,765,qs),
(314,765,o),
(314,747,q),
(319,737,o),
(290,692,o),
(248,654,o),
(237,654,qs),
(228,654,o),
(228,666,qs),
(228,673,o),
(229,677,q),
(219,687,o),
(219,699,qs),
(219,713,o),
(229,732,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
41 35 33 3 2 3 6 1 0 1 2 76 0 3 2 3 133 0 2 1 2 133 0 1 0 1 133 0 0 0 118 36 39 29 30 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = question;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(298,67,o),
(289,67,qs),
(278,67,o),
(254,78,o),
(237,88,qs),
(221,98,o),
(212,102,q),
(168,131,o),
(168,172,qs),
(168,207,o),
(223,281,o),
(275,335,qs),
(310,372,o),
(344,411,o),
(353,430,q),
(383,465,o),
(419,573,o),
(419,624,qs),
(419,678,o),
(375,746,o),
(331,746,qs),
(300,746,o),
(259,727,q),
(263,687,l),
(263,658,o),
(244,649,q),
(207,619,o),
(190,619,qs),
(173,619,o),
(173,645,qs),
(173,665,o),
(181,695,q),
(216,748,o),
(332,821,o),
(389,821,qs),
(439,821,o),
(478,789,q),
(508,759,o),
(508,699,qs),
(508,623,o),
(462,508,qs),
(452,481,o),
(405,425,o),
(363,382,qs),
(311,329,o),
(257,257,o),
(257,225,qs),
(257,170,o),
(353,134,q),
(360,127,o),
(345,105,o),
(316,80,o),
(306,71,q)
);
},
{
closed = 1;
nodes = (
(255,-117,o),
(248,-117,qs),
(240,-117,o),
(240,-111,qs),
(240,-101,o),
(276,-60,o),
(316,-32,o),
(322,-38,q),
(325,-44,o),
(325,-50,qs),
(325,-82,o),
(259,-116,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
29 28 2 1 2 1 76 62 60 54 3 3 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 1 2 3 2 1 3 128 0 3 3 132 0 2 2 0 97 0 0 0 26 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 1 2 3 2 1 3 128 0 3 3 132 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
51 49 32 30 25 23 18 16 4 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = question;
unicode = 63;
},
{
glyphname = questiondown;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,671,o),
(138,671,qs),
(132,671,o),
(122,678,o),
(121,679,q),
(121,702,o),
(160,748,o),
(187,762,q),
(234,762,o),
(234,739,qs),
(234,727,o),
(208,699,o),
(170,679,o),
(154,679,q)
);
},
{
closed = 1;
nodes = (
(156,-184,o),
(156,-143,qs),
(156,-114,o),
(213,-43,o),
(254,-2,q),
(320,98,o),
(320,181,q),
(312,210,o),
(282,292,qs),
(252,370,o),
(220,485,o),
(220,546,q),
(229,555,o),
(256,584,o),
(286,605,o),
(299,605,qs),
(311,605,o),
(320,596,q),
(317,577,o),
(317,558,qs),
(317,512,o),
(343,428,o),
(370,364,qs),
(394,308,o),
(403,280,qs),
(410,255,o),
(410,226,qs),
(410,161,o),
(342,33,o),
(287,-35,q),
(257,-55,o),
(257,-74,qs),
(257,-86,o),
(282,-101,o),
(303,-101,q),
(311,-90,o),
(327,-58,o),
(334,-43,qs),
(352,-3,o),
(381,41,o),
(403,48,q),
(418,57,o),
(425,57,qs),
(436,57,o),
(436,42,qs),
(436,14,o),
(375,-98,o),
(287,-185,o),
(246,-185,q),
(237,-184,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
8 1 1 0 56 51 45 3 4 6 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
56 51 45 3 4 6 1 76 8 1 2 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 0 1 0 133 8 2 2 1 6 1 133 0 6 4 6 133 0 4 5 4 133 0 5 3 3 5 89 0 5 5 3 97 7 1 3 5 3 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 0 2 0 133 8 1 2 1 2 133 0 1 6 1 133 0 6 4 6 133 0 4 5 4 133 0 5 3 3 5 89 0 5 5 3 97 7 1 3 5 3 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 63 62 48 46 29 28 20 19 15 14 0 13 0 13 37 20 9 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = asterisk;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,715,o),
(318,716,o),
(320,713,q),
(326,708,o),
(326,677,qs),
(326,660,o),
(322,613,o),
(322,602,qs),
(322,593,o),
(323,591,q),
(329,598,l),
(355,620,o),
(421,664,o),
(440,664,qs),
(443,664,o),
(444,663,q),
(458,620,l),
(419,594,ls),
(350,549,o),
(353,546,q),
(353,545,o),
(355,545,qs),
(360,545,l),
(380,542,o),
(472,486,o),
(472,475,qs),
(472,471,o),
(441,424,o),
(433,418,q),
(418,427,o),
(338,484,o),
(327,495,q),
(326,497,o),
(325,496,qs),
(323,494,o),
(323,478,qs),
(323,458,o),
(319,378,o),
(314,372,qs),
(313,371,o),
(302,369,o),
(298,368,qs),
(276,363,l),
(274,363,l),
(267,371,o),
(267,419,qs),
(268,469,l),
(269,489,l),
(207,456,l),
(170,436,l),
(167,437,l),
(156,454,o),
(142,476,o),
(142,480,qs),
(142,487,o),
(224,545,o),
(235,545,q),
(133,607,l),
(132,608,o),
(129,609,o),
(129,611,q),
(131,617,o),
(158,656,o),
(168,656,qs),
(177,656,o),
(244,620,qs),
(281,598,o),
(281,601,q),
(282,602,o),
(282,609,qs),
(282,628,o),
(275,665,qs),
(269,705,o),
(269,715,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
65 63 56 5 3 5 1 0 1 76 44 29 25 22 4 1 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
2 1 0 3 1 3 0 1 128 0 1 1 132 0 3 3 28 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
0 3 0 3 133 2 1 0 1 0 133 0 1 1 118
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 2 3 133 0 2 0 2 133 0 0 1 0 133 0 1 1 118
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
73 70 60 57 22 40 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = numbersign;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,1,o),
(177,9,qs),
(177,17,o),
(210,49,o),
(222,59,q),
(308,231,l),
(245,231,o),
(121,261,q),
(109,240,ls),
(100,224,o),
(92,203,o),
(92,189,qs),
(93,179,o),
(53,118,o),
(3,66,o),
(-8,66,qs),
(-14,66,o),
(-14,75,qs),
(-14,112,o),
(77,275,q),
(61,281,o),
(61,289,qs),
(61,295,o),
(78,311,o),
(87,318,qs),
(101,328,o),
(106,335,q),
(113,355,o),
(133,395,qs),
(141,412,o),
(159,449,o),
(163,464,q),
(141,475,o),
(128,475,qs),
(116,475,o),
(92,464,q),
(60,436,o),
(40,436,qs),
(24,436,o),
(24,453,qs),
(24,469,o),
(55,510,o),
(116,539,o),
(157,539,qs),
(174,539,o),
(193,536,q),
(202,547,o),
(223,589,o),
(234,612,qs),
(269,686,o),
(326,766,o),
(365,766,q),
(357,743,o),
(309,654,qs),
(257,558,o),
(250,536,q),
(285,536,o),
(336,529,qs),
(358,527,o),
(406,522,o),
(425,522,q),
(433,538,o),
(477,656,qs),
(521,772,o),
(525,781,q),
(531,785,o),
(539,797,q),
(564,824,o),
(591,846,o),
(598,839,q),
(560,728,ls),
(516,605,o),
(483,507,q),
(529,507,o),
(593,497,o),
(612,478,q),
(590,423,o),
(528,423,qs),
(501,423,o),
(453,435,q),
(439,392,o),
(415,334,o),
(396,304,q),
(540,304,ls),
(546,304,o),
(546,298,qs),
(546,291,o),
(533,275,o),
(525,275,q),
(506,248,o),
(456,230,o),
(422,230,qs),
(365,231,l),
(345,190,ls),
(307,110,o),
(242,18,o),
(193,1,q)
);
},
{
closed = 1;
nodes = (
(186,326,o),
(252,318,qs),
(314,310,o),
(337,304,q),
(360,341,o),
(384,417,qs),
(396,450,l),
(357,459,o),
(280,464,o),
(222,464,q),
(210,446,o),
(187,402,qs),
(166,359,o),
(149,335,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
20 1 9 3 64 1 13 9 103 1 8 13 16 1 2 8 110 1 1 2 88 76 2 0 1 84 1 10 0 7 76 106 1 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
0 6 5 6 133 0 4 5 3 5 4 3 128 0 8 13 2 13 8 2 128 0 10 0 12 0 10 12 128 0 9 13 5 9 90 7 1 5 0 13 8 5 13 106 0 3 0 2 1 3 2 105 0 1 11 1 0 10 1 0 106 0 12 12 30 12 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
0 6 5 6 133 0 4 5 3 5 4 3 128 0 8 13 2 13 8 2 128 0 10 0 12 0 10 12 128 0 9 13 5 9 90 7 1 5 0 13 8 5 13 106 0 1 11 1 0 10 1 0 106 0 2 2 3 97 0 3 3 29 77 0 12 12 30 12 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
0 6 5 6 133 0 4 5 3 5 4 3 128 0 8 13 2 13 8 2 128 0 10 0 12 0 10 12 128 0 9 13 5 9 90 7 1 5 0 13 8 5 13 106 0 3 0 2 1 3 2 105 0 1 11 1 0 10 1 0 106 0 12 12 30 12 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
102 100 96 95 90 89 81 79 63 61 36 38 20 19 28 19 36 38 35 14 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = slash;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,-127,o),
(121,-127,qs),
(103,-127,o),
(83,-121,o),
(83,-111,qs),
(83,-105,o),
(89,-94,q),
(85,-106,l),
(88,-106,o),
(256,259,qs),
(417,609,o),
(453,680,qs),
(464,699,o),
(521,729,o),
(543,729,qs),
(555,729,o),
(560,725,q),
(556,716,o),
(554,698,qs),
(552,680,o),
(545,658,o),
(536,654,q),
(522,630,o),
(465,496,o),
(433,418,qs),
(329,168,o),
(190,-122,o),
(151,-129,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
20 1 1 0 1 76 0 1 0 1 134 0 0 0 28 0 78 43 43 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = slash;
unicode = 47;
},
{
glyphname = backslash;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(531,-116,o),
(515,-121,qs),
(492,-128,o),
(478,-128,qs),
(452,-128,o),
(430,-111,q),
(321,129,ls),
(116,575,o),
(74,680,qs),
(69,692,o),
(69,699,qs),
(69,713,o),
(101,725,o),
(137,725,qs),
(145,725,o),
(167,690,o),
(180,665,qs),
(293,460,o),
(543,-39,o),
(543,-103,qs),
(543,-117,o),
(536,-118,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
10 1 1 0 1 76 0 1 0 1 134 0 0 0 28 0 78 40 38 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = hyphen;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,203,o),
(145,203,qs),
(134,203,o),
(134,210,qs),
(134,221,o),
(177,262,o),
(196,272,q),
(204,280,o),
(217,280,qs),
(226,280,o),
(258,272,o),
(263,272,qs),
(304,272,o),
(372,281,qs),
(446,289,o),
(480,289,q),
(454,238,o),
(335,205,o),
(249,205,qs),
(163,206,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
15 1 0 2 1 76 17 1 0 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 2 1 133 3 1 2 0 0 2 89 3 1 2 2 0 95 4 1 0 2 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 1 3 1 133 0 3 2 2 3 112 0 2 0 0 2 89 0 2 2 0 96 4 1 0 2 0 80
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
1 0 11 9 7 6 4 3 0 19 1 19 5 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = underscore;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,-74,o),
(414,-74,qs),
(303,-74,o),
(70,-57,o),
(-29,-42,q),
(-35,-39,o),
(-35,-34,qs),
(-35,-26,o),
(-13,-6,o),
(6,9,qs),
(14,16,o),
(22,22,q),
(121,8,o),
(353,-9,o),
(463,-9,qs),
(539,-9,o),
(617,-4,qs),
(632,-4,o),
(632,-12,qs),
(632,-20,o),
(604,-47,o),
(571,-69,o),
(566,-69,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 25 values pushed */
10 1 0 74 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 59 68 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = parenleft;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(285,-219,o),
(274,-219,qs),
(235,-219,o),
(172,-47,o),
(137,215,o),
(137,344,qs),
(137,391,o),
(140,434,qs),
(145,470,ls),
(157,563,o),
(191,697,o),
(275,800,o),
(348,800,q),
(358,796,o),
(358,787,qs),
(358,777,o),
(334,751,o),
(303,731,o),
(296,731,q),
(227,601,o),
(227,414,qs),
(227,338,o),
(245,180,o),
(263,67,qs),
(277,0,o),
(316,-80,qs),
(330,-112,o),
(342,-143,o),
(342,-156,qs),
(342,-173,o),
(320,-199,o),
(296,-212,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
23 1 1 0 1 76 0 1 0 1 134 0 0 0 26 0 78 30 28 19 18 2 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(320,-151,o),
(305,-151,qs),
(292,-151,o),
(292,-141,qs),
(292,-129,o),
(314,-107,q),
(365,-31,o),
(424,172,o),
(424,274,qs),
(424,405,o),
(320,610,o),
(212,656,q),
(205,663,o),
(228,691,o),
(263,715,o),
(270,715,q),
(385,671,o),
(500,445,o),
(500,300,qs),
(500,174,o),
(417,-63,o),
(344,-136,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
5 1 0 74 0 0 0 118 20 18 1 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
width = 600;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
width = 600;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
width = 600;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
width = 600;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = quotedbl;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,362,o),
(204,343,o),
(197,343,qs),
(185,343,o),
(185,380,qs),
(185,395,o),
(181,451,qs),
(175,519,o),
(175,553,qs),
(175,600,o),
(185,619,q),
(191,619,o),
(207,639,qs),
(223,659,o),
(229,659,qs),
(237,659,o),
(246,652,o),
(246,647,qs),
(246,634,o),
(229,619,q),
(237,591,o),
(251,453,o),
(251,420,q),
(249,417,o),
(240,393,o),
(240,380,q)
);
},
{
closed = 1;
nodes = (
(332,371,o),
(312,436,o),
(303,522,o),
(303,540,q),
(301,548,o),
(301,554,qs),
(301,571,o),
(317,613,o),
(340,642,o),
(350,642,qs),
(355,642,o),
(358,639,q),
(358,611,o),
(366,565,o),
(373,532,qs),
(384,486,o),
(384,464,qs),
(384,418,o),
(347,380,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
7 1 2 0 40 38 32 25 5 5 1 2 2 76 0 0 2 0 133 0 2 1 2 133 0 1 1 118 28 26 41 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(250,472,o),
(227,579,o),
(227,634,qs),
(227,673,o),
(234,679,q),
(234,686,o),
(279,718,o),
(323,735,o),
(323,726,qs),
(323,722,o),
(317,713,q),
(321,690,ls),
(335,624,o),
(335,588,qs),
(335,503,o),
(267,480,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
14 7 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = at;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(280,49,o),
(214,49,qs),
(103,49,o),
(-12,161,o),
(-12,251,qs),
(-12,334,o),
(85,515,o),
(174,587,qs),
(205,614,o),
(301,644,o),
(353,644,qs),
(411,644,o),
(514,608,o),
(577,534,o),
(577,481,qs),
(577,454,o),
(568,424,q),
(552,393,o),
(492,326,o),
(419,281,o),
(387,281,qs),
(348,281,o),
(324,315,q),
(274,271,o),
(242,271,qs),
(220,271,o),
(198,305,o),
(198,333,qs),
(198,369,o),
(236,444,o),
(269,465,qs),
(283,474,o),
(328,486,o),
(348,486,qs),
(387,486,o),
(387,463,qs),
(387,452,o),
(378,437,q),
(378,410,l),
(417,346,o),
(452,346,qs),
(472,346,o),
(497,389,o),
(497,421,qs),
(497,459,o),
(459,535,o),
(375,586,o),
(312,586,qs),
(252,586,o),
(174,560,q),
(129,521,o),
(74,382,o),
(74,312,qs),
(74,234,o),
(151,130,o),
(229,126,q),
(252,123,o),
(274,123,qs),
(337,123,o),
(464,160,o),
(541,193,q),
(548,200,o),
(569,212,o),
(576,212,qs),
(582,212,o),
(582,207,q),
(559,161,o),
(468,110,o),
(398,84,qs),
(364,71,l)
);
},
{
closed = 1;
nodes = (
(298,343,o),
(313,358,q),
(315,356,o),
(323,403,o),
(323,420,qs),
(323,433,o),
(320,439,q),
(283,439,o),
(269,424,q),
(249,392,o),
(249,366,qs),
(249,343,o),
(266,343,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
31 30 2 3 9 46 1 5 3 5 1 0 5 3 76
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
31 30 2 3 9 46 1 6 3 5 1 0 5 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
31 30 2 3 9 46 1 6 3 5 1 1 5 3 76
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 9 4 3 2 9 114 0 7 0 2 4 7 2 105 11 10 2 3 5 5 3 89 1 1 0 0 8 0 8 101 6 1 5 5 4 97 0 4 4 29 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 9 4 3 4 9 3 128 0 7 0 2 4 7 2 105 11 10 2 3 5 5 3 89 1 1 0 0 8 0 8 101 6 1 5 5 4 97 0 4 4 29 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 9 4 3 4 9 3 128 0 7 0 2 4 7 2 105 11 10 2 3 0 5 0 3 5 105 1 1 0 0 8 0 8 101 0 6 6 4 97 0 4 4 29 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 9 4 3 4 9 3 128 0 0 1 8 1 0 114 0 7 0 2 4 7 2 105 11 10 2 3 0 5 1 3 5 105 0 1 0 8 1 8 101 0 6 6 4 97 0 4 4 29 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
70 70 70 82 70 81 75 74 39 40 34 39 37 37 38 17 42 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = at;
unicode = 64;
},
{
glyphname = ampersand;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(472,-44,o),
(437,-7,o),
(408,32,qs),
(372,82,o),
(359,89,q),
(312,39,o),
(221,-8,o),
(181,-8,qs),
(127,-8,o),
(58,67,o),
(58,122,qs),
(58,173,o),
(121,280,o),
(185,325,q),
(98,440,o),
(98,532,qs),
(98,584,o),
(149,660,o),
(229,699,o),
(271,699,qs),
(321,699,o),
(388,643,o),
(388,592,qs),
(388,550,o),
(336,439,o),
(280,372,q),
(297,348,o),
(316,324,qs),
(341,292,o),
(376,242,o),
(390,214,q),
(399,236,o),
(409,271,qs),
(421,309,o),
(439,350,o),
(473,383,o),
(501,389,q),
(501,400,o),
(509,400,qs),
(516,400,o),
(516,389,q),
(497,350,o),
(477,286,qs),
(452,213,o),
(437,183,q),
(448,164,o),
(480,124,qs),
(510,85,o),
(539,40,o),
(539,19,qs),
(539,-17,o),
(484,-38,q)
);
},
{
closed = 1;
nodes = (
(195,498,o),
(227,443,qs),
(248,404,l),
(271,432,o),
(296,497,o),
(296,528,qs),
(296,571,o),
(248,626,o),
(203,626,qs),
(191,626,o),
(185,625,q),
(173,601,o),
(173,577,qs),
(173,553,o),
(185,529,q)
);
},
{
closed = 1;
nodes = (
(264,57,o),
(311,88,o),
(343,119,q),
(254,188,o),
(201,293,q),
(171,273,o),
(139,213,o),
(139,180,qs),
(139,138,o),
(188,70,o),
(233,57,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
63 1 0 3 74 72 46 37 25 20 14 10 6 9 4 0 2 76 0 0 3 4 3 0 4 128 0 4 2 3 4 2 126 0 1 0 3 0 1 3 105 0 2 2 30 2 78 77 76 58 55 44 42 32 30 43 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = bar;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,255,o),
(255,623,qs),
(255,676,o),
(257,780,q),
(260,791,o),
(268,791,qs),
(283,791,o),
(322,736,qs),
(334,719,o),
(340,713,q),
(339,662,o),
(339,559,qs),
(339,169,o),
(381,-128,q),
(382,-153,o),
(372,-153,qs),
(362,-153,o),
(328,-113,o),
(298,-64,o),
(297,-56,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
15 9 5 3 0 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 1 0 134 0 1 1 26 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 1 0 1 133 0 0 0 118
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
24 34 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = bar;
unicode = 124;
},
{
glyphname = dollar;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,-110,o),
(179,-84,o),
(179,-55,qs),
(180,-21,o),
(181,13,qs),
(182,78,ls),
(182,113,o),
(178,120,q),
(171,125,o),
(149,136,o),
(139,141,qs),
(107,157,o),
(68,184,o),
(57,207,q),
(57,219,o),
(87,249,o),
(127,271,o),
(139,271,qs),
(149,271,o),
(149,263,qs),
(149,256,o),
(142,245,q),
(149,237,o),
(167,230,qs),
(190,219,l),
(190,306,o),
(194,422,o),
(202,480,q),
(180,503,o),
(180,526,qs),
(180,556,o),
(214,580,q),
(216,592,o),
(219,617,o),
(220,630,qs),
(225,692,o),
(250,766,o),
(287,779,q),
(292,784,o),
(299,784,qs),
(303,784,o),
(310,780,o),
(311,779,q),
(295,757,o),
(284,706,o),
(282,671,qs),
(281,657,o),
(278,628,o),
(275,617,q),
(295,627,o),
(343,642,o),
(360,642,q),
(366,669,ls),
(374,713,o),
(399,765,o),
(432,779,q),
(440,779,o),
(440,763,qs),
(440,743,o),
(428,699,qs),
(420,661,o),
(420,655,q),
(436,657,o),
(445,657,qs),
(477,657,o),
(520,637,o),
(520,621,qs),
(520,593,o),
(456,567,q),
(456,572,o),
(439,585,o),
(429,591,qs),
(410,603,o),
(408,605,q),
(402,574,o),
(396,512,qs),
(390,450,o),
(384,419,q),
(454,371,o),
(531,273,o),
(531,229,qs),
(531,184,o),
(447,109,o),
(360,82,q),
(361,39,ls),
(361,3,o),
(337,-41,o),
(299,-54,q),
(294,-54,o),
(294,-24,qs),
(294,-19,o),
(297,47,qs),
(299,82,l),
(251,82,l),
(251,-17,o),
(239,-29,q),
(242,-38,o),
(242,-47,qs),
(242,-66,o),
(214,-95,o),
(190,-104,q)
);
},
{
closed = 1;
nodes = (
(281,512,o),
(319,476,o),
(335,468,q),
(335,487,o),
(341,531,qs),
(347,573,o),
(347,593,q),
(323,593,o),
(291,589,o),
(275,580,q),
(263,567,o),
(263,530,q)
);
},
{
closed = 1;
nodes = (
(260,186,o),
(290,170,o),
(299,170,q),
(305,201,o),
(311,269,qs),
(317,339,o),
(323,369,q),
(304,388,o),
(283,402,q),
(263,419,l),
(255,369,o),
(251,270,o),
(251,195,q)
);
},
{
closed = 1;
nodes = (
(392,142,o),
(406,142,qs),
(464,142,o),
(464,184,qs),
(464,213,o),
(409,292,o),
(372,319,q),
(372,145,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
57 54 2 1 3 38 1 2 1 51 26 2 5 2 126 118 115 112 109 72 22 7 4 5 125 86 78 75 4 6 4 133 1 7 6 6 76 16 4 2 0 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 1 3 2 3 1 2 128 0 4 5 6 5 4 6 128 0 7 6 0 6 7 0 128 0 2 0 5 4 2 5 105 0 6 0 0 6 0 100 0 3 3 26 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 3 1 3 133 0 1 2 1 133 0 4 5 6 5 4 6 128 0 7 6 0 6 7 0 128 0 2 0 5 4 2 5 105 0 6 7 0 6 89 0 6 6 0 96 0 0 6 0 80
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
132 130 123 122 105 104 83 81 61 59 49 48 37 35 22 8 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
width = 600;
}
);
note = plus;
unicode = 43;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
width = 600;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = divide;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,335,o),
(123,335,qs),
(207,335,o),
(420,321,qs),
(473,318,l),
(523,321,l),
(524,314,l),
(529,261,ls),
(529,254,o),
(527,251,qs),
(523,245,o),
(434,237,o),
(412,237,qs),
(368,237,o),
(276,229,qs),
(186,221,o),
(139,221,qs),
(109,221,o),
(82,224,qs),
(70,225,o),
(56,267,o),
(51,315,o),
(50,326,qs)
);
},
{
closed = 1;
nodes = (
(341,531,o),
(261,531,qs),
(245,531,o),
(218,505,o),
(218,489,qs),
(218,471,o),
(267,441,o),
(293,441,qs),
(317,441,o),
(327,456,qs),
(332,463,o),
(341,495,o),
(341,500,qs)
);
},
{
closed = 1;
nodes = (
(340,137,o),
(332,151,o),
(309,157,o),
(281,157,qs),
(257,157,o),
(224,131,o),
(224,111,qs),
(224,95,o),
(258,71,o),
(276,71,qs),
(281,71,o),
(287,73,q),
(301,74,o),
(343,104,o),
(343,119,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
35 1 3 4 14 1 1 2 50 1 5 6 3 76 22 1 2 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 4 3 4 133 0 3 2 2 3 112 0 0 1 6 1 0 114 0 6 5 1 6 112 0 5 5 132 0 2 1 1 2 87 0 2 2 1 98 0 1 2 1 82
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 4 3 4 133 0 3 2 3 133 0 0 1 6 1 0 114 0 6 5 1 6 112 0 5 5 132 0 2 1 1 2 87 0 2 2 1 98 0 1 2 1 82
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 4 3 4 133 0 3 2 3 133 0 0 1 6 1 0 114 0 6 5 1 6 5 126 0 5 5 132 0 2 1 1 2 87 0 2 2 1 98 0 1 2 1 82
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 22 36 37 71 34 36 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = divide;
unicode = 247;
},
{
glyphname = equal;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,309,o),
(83,309,qs),
(69,309,o),
(69,317,qs),
(69,325,o),
(97,353,o),
(131,376,o),
(137,376,q),
(217,387,o),
(377,393,o),
(497,393,q),
(507,403,o),
(535,403,qs),
(549,403,o),
(568,394,o),
(568,386,qs),
(568,382,o),
(565,376,qs),
(553,354,o),
(517,323,o),
(498,323,qs),
(487,323,o),
(479,327,q),
(462,327,ls),
(398,327,o),
(268,319,qs),
(150,311,o),
(103,311,q)
);
},
{
closed = 1;
nodes = (
(370,162,ls),
(313,159,o),
(239,159,qs),
(90,159,o),
(68,180,q),
(115,238,o),
(189,238,qs),
(216,238,o),
(257,229,q),
(285,229,o),
(343,233,qs),
(364,234,o),
(407,236,o),
(428,236,qs),
(473,236,o),
(514,229,q),
(514,213,o),
(486,183,o),
(445,163,o),
(428,163,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
42 31 2 7 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 2 133 0 3 4 1 8 3 0 5 3 0 105 6 1 5 7 7 5 89 6 1 5 5 7 95 9 1 7 5 7 79
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 3 2 133 0 4 0 5 0 4 5 128 0 3 1 8 2 0 4 3 0 105 6 1 5 7 7 5 89 6 1 5 5 7 95 9 1 7 5 7 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 2 3 2 133 0 4 0 6 0 4 6 128 0 6 5 5 6 112 0 3 1 8 2 0 4 3 0 105 0 5 7 7 5 87 0 5 5 7 96 9 1 7 5 7 80
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
28 28 4 0 28 47 28 43 41 39 38 32 26 24 18 16 15 13 7 5 0 27 4 27 10 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,120,o),
(143,114,qs),
(106,103,o),
(90,103,qs),
(76,103,o),
(76,112,qs),
(76,120,o),
(88,136,q),
(129,165,o),
(218,203,o),
(288,227,qs),
(349,248,o),
(414,274,o),
(446,292,q),
(348,340,o),
(119,416,q),
(109,411,o),
(100,411,qs),
(89,411,o),
(89,420,qs),
(89,431,o),
(117,467,o),
(156,495,o),
(172,495,qs),
(178,495,o),
(181,494,q),
(194,494,o),
(279,459,o),
(290,448,q),
(334,434,ls),
(514,380,o),
(540,354,q),
(540,311,o),
(457,239,o),
(343,188,o),
(261,158,qs),
(193,133,o),
(166,120,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
23 5 2 3 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 0 3 0 2 3 128 0 3 3 132 1 1 0 0 29 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
1 1 0 2 0 133 0 2 3 2 133 0 3 3 118
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
44 36 18 26 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greater;
unicode = 62;
},
{
glyphname = less;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,136,o),
(458,136,qs),
(432,136,o),
(384,150,o),
(349,164,qs),
(299,184,o),
(275,188,q),
(176,215,o),
(84,260,o),
(84,285,qs),
(84,306,o),
(151,357,o),
(221,391,q),
(275,434,o),
(353,488,o),
(401,509,q),
(422,516,o),
(444,516,qs),
(473,516,o),
(473,499,qs),
(473,487,o),
(417,455,o),
(398,455,qs),
(383,455,o),
(383,466,q),
(184,348,l),
(165,341,o),
(165,329,qs),
(165,314,o),
(225,279,o),
(257,273,q),
(325,252,ls),
(510,194,o),
(545,188,q),
(552,183,o),
(543,173,o),
(527,161,qs),
(509,150,o),
(509,145,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
13 1 0 1 1 76 0 0 1 2 1 0 2 128 0 1 0 2 1 89 0 1 1 2 97 0 2 1 2 81 46 35 46 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = less;
unicode = 60;
},
{
glyphname = asciitilde;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,289,o),
(139,344,o),
(212,344,qs),
(244,344,o),
(274,338,qs),
(292,335,o),
(335,321,o),
(354,314,qs),
(409,294,o),
(446,288,qs),
(458,286,o),
(464,286,qs),
(494,286,o),
(532,304,qs),
(548,311,o),
(553,311,qs),
(563,311,o),
(588,286,o),
(589,272,qs),
(589,271,ls),
(589,254,o),
(571,246,q),
(522,219,o),
(467,219,qs),
(435,219,o),
(406,229,qs),
(340,251,o),
(270,271,o),
(229,274,qs),
(224,274,ls),
(203,274,o),
(164,259,o),
(138,244,qs),
(112,231,o),
(81,218,o),
(66,218,qs),
(59,218,o),
(40,229,o),
(31,235,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 48 values pushed */
38 1 0 1 1 76 0 3 5 4 5 3 4 128 0 4 1 0 4 89 0 5 0 1 0 5 1 105 0 4 4 0 97 2 1 0 4 0 81 40 19 22 35 52 33 6 8 28
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = percent;
layers = (
{
.lastUpdate = 753955765.467;
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(25,16,o),
(21,16,qs),
(14,16,o),
(14,24,qs),
(14,32,o),
(25,48,o),
(31,48,q),
(94,125,o),
(228,303,o),
(324,435,qs),
(433,585,o),
(471,635,q),
(490,670,o),
(532,703,o),
(548,703,qs),
(557,703,o),
(568,693,o),
(568,685,qs),
(568,671,o),
(534,635,o),
(499,620,q),
(455,563,o),
(366,427,qs),
(300,327,o),
(210,200,o),
(96,70,o),
(31,19,q)
);
},
{
closed = 1;
nodes = (
(155,497,o),
(89,459,o),
(57,459,qs),
(26,459,o),
(-16,495,o),
(-16,527,qs),
(-16,556,o),
(1,590,qs),
(17,622,o),
(87,675,o),
(120,675,qs),
(158,675,o),
(177,635,q),
(177,623,o),
(154,593,o),
(123,572,o),
(112,572,qs),
(107,572,o),
(104,575,qs),
(100,579,o),
(86,597,o),
(73,605,o),
(60,605,q),
(60,529,o),
(112,529,qs),
(122,529,o),
(134,532,q),
(138,551,o),
(163,587,o),
(192,610,o),
(201,610,qs),
(210,610,o),
(210,600,qs),
(210,580,o),
(177,532,qs)
);
},
{
closed = 1;
nodes = (
(417,10,o),
(400,10,qs),
(378,10,o),
(355,36,o),
(355,57,qs),
(355,88,o),
(398,160,o),
(472,210,o),
(516,210,qs),
(529,209,l),
(559,239,o),
(575,239,qs),
(585,239,o),
(585,225,qs),
(585,210,o),
(573,180,q),
(582,167,o),
(582,150,qs),
(582,127,o),
(542,87,o),
(514,78,q),
(492,56,o),
(460,28,o),
(441,19,qs)
);
},
{
closed = 1;
nodes = (
(426,112,o),
(450,78,o),
(471,78,q),
(480,87,o),
(485,100,q),
(494,116,o),
(499,121,q),
(490,131,o),
(456,136,o),
(426,136,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
8 1 6 0 48 1 2 6 69 1 12 9 88 1 11 12 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 0 6 0 133 0 2 6 4 6 2 4 128 0 4 5 6 4 5 126 0 8 7 9 7 8 9 128 0 9 12 7 9 12 126 13 1 12 11 7 12 11 126 0 11 1 7 11 1 126 0 6 0 5 3 6 5 105 0 3 0 7 8 3 7 105 10 1 1 1 30 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 79 values pushed */
0 0 6 0 133 0 2 6 4 6 2 4 128 0 4 5 6 4 5 126 0 8 7 9 7 8 9 128 0 9 12 7 9 12 126 13 1 12 11 7 12 11 126 0 11 1 7 11 1 126 10 1 1 1 132 0 6 0 5 3 6 5 105 0 3 7 7 3 89 0 3 3 7 97 0 7 3 7 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 85 values pushed */
0 0 6 0 133 0 2 6 4 6 2 4 128 0 4 5 6 4 5 126 0 8 7 9 7 8 9 128 0 9 12 7 9 12 126 13 1 12 11 7 12 11 126 0 11 1 7 11 1 126 0 1 10 7 1 10 126 0 10 10 132 0 6 0 5 3 6 5 105 0 3 7 7 3 89 0 3 3 7 97 0 7 3 7 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
86 86 86 95 86 95 93 92 84 82 77 76 45 38 36 36 17 36 36 43 42 14 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = percent;
unicode = 37;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Regular;
properties = (
{
key = postscriptFontName;
value = "Natural-Regular";
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = "Natural Regular";
}
);
}
);
}
);
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 0;
}
